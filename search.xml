<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++</title>
      <link href="/2023/08/19/2/"/>
      <url>/2023/08/19/2/</url>
      
        <content type="html"><![CDATA[<h1 id="第11章-使用类"><a href="#第11章-使用类" class="headerlink" title="第11章 使用类"></a>第11章 使用类</h1><h2 id="11-6类的自动转换和强制类型转换"><a href="#11-6类的自动转换和强制类型转换" class="headerlink" title="11.6类的自动转换和强制类型转换"></a>11.6类的自动转换和强制类型转换</h2><ol><li><p>数据类型的转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> tine = <span class="number">11</span>;  </span><br><span class="line"><span class="type">int</span> side = <span class="number">3.33</span>;  都是正确的，将进行自动类型转换</span><br><span class="line"><span class="type">int</span> *p = <span class="number">10</span>;    不会进行自动转换，是不兼容的类型，可进行强制类型转换</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>下面的构造函数用于将double类型的值转换为Stonewt类类型，介绍的是转换构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stonewt::<span class="built_in">Stonewt</span>(<span class="type">double</span> lbs)   只能是接受一个参数的构造函数才能这样   Stonewt::<span class="built_in">Stonewt</span>(<span class="type">int</span> stn,<span class="type">double</span> lbs=<span class="number">0</span>)可以</span><br><span class="line">&#123;</span><br><span class="line">stone = <span class="built_in">int</span>(lbs)/<span class="number">14</span>;</span><br><span class="line">pounds = lbs; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stonewt myCat;</span><br><span class="line">myCat = <span class="number">19.6</span>;</span><br><span class="line">先创建一个临时的Stonewt的对象，并将<span class="number">19.2</span>作为初始值，然后将临时对象的内容复制到myCat中,为类的隐式转换，是自动进行的</span><br></pre></td></tr></table></figure></li><li><p>explicit是关闭隐式转换，但仍然允许显式强制类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Stonewt</span><span class="params">(<span class="type">double</span> lbs)</span></span>;</span><br><span class="line">Stonewt myCat;</span><br><span class="line">myCat = <span class="number">19.6</span>;  NO</span><br><span class="line"></span><br><span class="line">myCat = <span class="built_in">Stonewt</span>(<span class="number">19.6</span>);   Yes</span><br><span class="line">myCat = (Stonewt)<span class="number">19.6</span>;</span><br></pre></td></tr></table></figure></li><li><p>转换还存在二义性，还可以用于将double值传递给接受Stonewt参数的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">const</span> Stonewt &amp; st,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Wow&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">display</span>(<span class="number">422</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果提供了Stonewt(double)构造函数,并且是成员函数的加法函数则可以这样做：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stonewt <span class="title">jennySt</span><span class="params">(<span class="number">9</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="type">double</span> kennyD = <span class="number">176.0</span>;</span><br><span class="line">Stonewt total;</span><br><span class="line">total = jennySt+kennyD;</span><br></pre></td></tr></table></figure><p>但只有友元函数才允许这样做：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stonewt <span class="title">jennySt</span><span class="params">(<span class="number">9</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="type">double</span> kennyD = <span class="number">176.0</span>;</span><br><span class="line">Stonewt total;</span><br><span class="line">total = kennyD+jennySt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-6-1转换函数"><a href="#11-6-1转换函数" class="headerlink" title="11.6.1转换函数"></a>11.6.1转换函数</h3><ol><li><p>转换函数的概念：是将类类型转换为某种类型，是用户定义的强制类型转换</p></li><li><p>转换函数必须是类方法，不能指定返回类型，不能有参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span></span>;    转换为<span class="type">double</span>类型的函数</span><br><span class="line"><span class="function">Stonewt::<span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> pounds;   返回一个<span class="type">double</span>数</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">Stonewt <span class="title">wolfe</span><span class="params">(<span class="number">285.7</span>)</span></span>;</span><br><span class="line"><span class="type">double</span> honst = <span class="built_in">double</span>(wolfe);</span><br><span class="line"><span class="type">double</span> honst = (<span class="type">double</span>)wolfe;</span><br><span class="line"><span class="type">double</span> honst = wolfe;</span><br></pre></td></tr></table></figure><p>注意虽然没有声明返回类型，但也将返回所需的值，是四舍五入的方式而不是去掉小数部分</p></li><li><p>类类型转换为某种类型也会存在二义性</p></li><li><p>explicit 不能用于转换函数，但可以使用非转换函数替换，只能进行强制转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Stonewt::Stone_to_Int</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">int</span> (pounds+<span class="number">0.5</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> plb = poppins;    是非法的</span><br><span class="line"><span class="type">int</span> plb = poppins.<span class="built_in">Stone_to_Int</span>();   可以</span><br></pre></td></tr></table></figure></li><li><p>警告：应谨慎地使用隐式转换函数。通常使用显式的强制类型转换</p></li></ol><h3 id="11-6-2转换函数和友元函数"><a href="#11-6-2转换函数和友元函数" class="headerlink" title="11.6.2转换函数和友元函数"></a>11.6.2转换函数和友元函数</h3><ol><li>实现加法时的选择，要将double量和Stonewt量相加可以有两种方法</li></ol><h1 id="第12章-类和动态内存分配"><a href="#第12章-类和动态内存分配" class="headerlink" title="第12章 类和动态内存分配"></a>第12章 类和动态内存分配</h1><h2 id="12-1动态内存和类"><a href="#12-1动态内存和类" class="headerlink" title="12.1动态内存和类"></a>12.1动态内存和类</h2><h3 id="12-1-1开发一个动态内存类"><a href="#12-1-1开发一个动态内存类" class="headerlink" title="12.1.1开发一个动态内存类"></a>12.1.1开发一个动态内存类</h3><ol><li><p>使用动态内存分配来开发类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str;   </span><br></pre></td></tr></table></figure><p>使用char指针，而不是char数组，这意味着类声明没有为字符串分配存储空间</p></li><li><p>静态类成员特点：<br>无论创建了多少对象，所有对象共享同一个静态成员，例如，num_strings成员可以记录所创建的对象数目</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> num_strings;</span><br><span class="line"><span class="type">int</span> StringBad::num_strings = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>不能在类声明中初始化静态成员变量，只能在.c文件中初始化，类外也不可以初始化，但如果静态成员是const整数类型或枚举类型(见第十章)，则可以在类声明中初始化<br>创建构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBad::<span class="built_in">StringBad</span>(<span class="type">const</span> <span class="type">char</span> *s)</span><br><span class="line">&#123;</span><br><span class="line">len = <span class="built_in">strlen</span>(s);   不会包括末尾的空字符<span class="string">&#x27;\0&#x27;</span></span><br><span class="line">str = <span class="keyword">new</span> <span class="type">char</span>[len+<span class="number">1</span>];  </span><br><span class="line"><span class="built_in">strcpy</span>(str,s);</span><br><span class="line">num_strings++;  记录对象的数量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串并不保存在对象中，而是保存在堆内存中，对象仅保存了指出到哪里去查找字符串的信息。不能这样做：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = s;</span><br></pre></td></tr></table></figure><p>这只保存了地址，而没有创建字符串副本</p></li><li><p>析构函数的使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">StringBad knot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象声明放在一个内部代码块中，因为析构函数将在定义对象的代码块执行完毕时调用，对象的删除的顺序与创建顺序相反</p></li><li><p>在进行输出类时，是运用了重载运算符&lt;&lt;，注意查看重载运算符&lt;&lt;函数中输出的是什么内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StringBad knot;</span><br><span class="line">cout &lt;&lt; knot &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li><p>编译器会自动生成成员函数和自动使用你不使用函数：构造函数，析构函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">StringBad</span>(<span class="type">const</span> StringBad &amp;);   为复制构造函数，会创建对象的一个副本</span><br><span class="line">StringBad sailor=sports《《 StringBad sailor=<span class="built_in">StringBad</span>(sports);  调用了一个函数</span><br></pre></td></tr></table></figure></li></ol><h3 id="12-1-2-特殊成员函数"><a href="#12-1-2-特殊成员函数" class="headerlink" title="12.1.2 特殊成员函数"></a>12.1.2 特殊成员函数</h3><ol><li><p>特殊成员函数是自动定义的，有：<br>默认构造函数，如果没有定义<br>默认析构函数，如果没有定义<br>复制构造函数，如果没有定义<br>赋值运算符，如果没有定义<br>地址运算符，如果没有定义，返回调用对象的地址(即this指针的值)<br>c++11新增：<br>移动构造函数<br>移动运算符</p></li><li><p>默认构造函数<br>如果定义了构造函数，c++将不会定义默认构造函数。如果希望在创建对象时不显示地对它进行初始话，则必须显示地定义默认构造函数，它还可以来设定特定的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Klunk::<span class="built_in">Klunk</span>()</span><br><span class="line">&#123;</span><br><span class="line">klunk_ct = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Klunk lunk;     在创建对象时不显示地对它进行初始话</span><br></pre></td></tr></table></figure><p>带参数的构造函数也可以是默认构造函数，只要所有参数都有默认值，但只有一个默认构造函数，不然会造成二义性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Klunk</span>(<span class="type">int</span> n=<span class="number">0</span>)&#123;klunk_ct = n&#125;;</span><br></pre></td></tr></table></figure></li><li><p>复制构造函数<br>1.它用于初始化过程，而不是常规的赋值过程，每当程序生成了对象副本时，编译器都将使用复制构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StirngBad * pStringBad = <span class="keyword">new</span> <span class="built_in">StringBad</span>(<span class="type">const</span> StringBad &amp;);</span><br></pre></td></tr></table></figure><p>使用motto初始化一个匿名对象，并将新对象的地址赋给pstring指针<br>2.当按值传递和返回对象时以及编译器生成临时对象，例如将3个Vectir对象相加时，编译器可能生成临时的Vector对象来保存中间结果，都将调用复制构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">callme1</span><span class="params">(StringBad n)</span></span>;    复制构造函数初始化<span class="built_in">callme2</span>()函数的StringBad形参</span><br><span class="line"><span class="built_in">callme2</span>(headline2);</span><br></pre></td></tr></table></figure><p>3.由于按值传递对象将调用复制构造函数，在用类为函数的参数时应该按引用传递对象<br>4.如果成员本身就是类对象，则将使用这个类的复制函数来复制成员对象。静态成员不受影响，因为它们属于整个类</p></li><li><p>显示复制构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBad::<span class="built_in">StringBad</span>(<span class="type">const</span> StringBad &amp; s)</span><br><span class="line">&#123;</span><br><span class="line">num_string++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果类中包含这样的静态数据成员，即其值将在对象被创建时发生变化，则应该提供一个显示复制构造函数来处理计数问题</p></li></ol><h3 id="12-1-3-回到Stringbad-复制构造函数的哪里出了问题"><a href="#12-1-3-回到Stringbad-复制构造函数的哪里出了问题" class="headerlink" title="12.1.3 回到Stringbad: 复制构造函数的哪里出了问题"></a>12.1.3 回到Stringbad: 复制构造函数的哪里出了问题</h3><ol><li><p>这里复制的并不是字符串，而是一个指向字符串的指针，得到两个指向同一个字符串的指针，相当于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sailor.str = sport.str;(由于私有成员是无法访问的，因此这些代码是不能通过编译的)</span><br></pre></td></tr></table></figure></li><li><p>sports.str指向的内容已经被sailor的析构函数释放</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> [] sailor.str;</span><br><span class="line"><span class="keyword">delete</span> [] sports.str;</span><br></pre></td></tr></table></figure></li><li><p>定义一个显式复制构造函数以解决问题(深度复制)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBad::<span class="built_in">StringBad</span>(<span class="type">const</span> StringBad &amp; st)</span><br><span class="line">&#123;</span><br><span class="line">num_string++;</span><br><span class="line">len = st.len;</span><br><span class="line">str = <span class="keyword">new</span> <span class="type">char</span> [len+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(str,st.str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该复制构造函数应当复制字符串并将副本的地址赋给str成员,如果类中包含了使用new初始化的指针成员，应当定义一个深度复制函数</p></li></ol><h3 id="12-1-4-StringBad的其他问题：赋值运算符"><a href="#12-1-4-StringBad的其他问题：赋值运算符" class="headerlink" title="12.1.4 StringBad的其他问题：赋值运算符"></a>12.1.4 StringBad的其他问题：赋值运算符</h3><ol><li><p>赋值运算符的功能以及何时使用它<br>将已有的对象赋给另一个对象时，将使用重载的赋值运算符：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBad &amp; StringBad::<span class="keyword">operator</span>=(<span class="type">const</span> StringBad &amp;);</span><br><span class="line">so = s1;</span><br><span class="line">使用函数表示法时：</span><br><span class="line">so.<span class="built_in">operator</span>(s1);</span><br></pre></td></tr></table></figure><p>与复制构造函数相似，赋值运算符也对成员进行逐个复制。如果成员本身就是类对象，则程序将使用为这个类定义的赋值运算符来复制该成员，但静态数据成员不受影响</p></li><li><p>赋值的问题与复制的问题的一样的</p></li><li><p>解决赋值的问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StringBad &amp; StringBad::<span class="keyword">operator</span>=(<span class="type">const</span> StringBad &amp;st)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>==&amp;st)     </span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">delete</span> [] str;</span><br><span class="line">len = st.len;</span><br><span class="line">str = <span class="keyword">new</span> <span class="type">char</span> [len+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(str,st.str);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.函数返回一个指向调用对象的引用(即this指针)<br>2.代码首先检查自我复制，这是通过查看赋值运算符右边的地址(&amp; s)是否与接收对象的地址(this)相同来完成的<br>3.赋值操作并不创建新的对象，因此不需要调整静态数据成员num_strings的值</p></li></ol><h2 id="改进后的新Stirng类"><a href="#改进后的新Stirng类" class="headerlink" title="改进后的新Stirng类"></a>改进后的新Stirng类</h2><ol><li><p>标准字符串函数库cstring的功能</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">length</span><span class="params">()</span><span class="type">const</span>  </span>&#123;<span class="keyword">return</span> len&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt;(<span class="type">const</span> String &amp; st,<span class="type">const</span> String &amp; st2);</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String &amp; st,<span class="type">const</span> String &amp; st2);</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String &amp; st,<span class="type">const</span> String &amp; st2);</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt;&gt;(istream &amp; st,<span class="type">const</span> String &amp; st2);</span><br><span class="line"><span class="type">char</span> &amp; <span class="keyword">operator</span>[](<span class="type">int</span> i)<span class="type">const</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> &amp; <span class="keyword">operator</span>[](<span class="type">int</span> i)<span class="type">const</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">HowMany</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>c++11空指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>nullptr用于表示空指针</p></li><li><p>重载&gt;&gt;运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; is,String &amp; st)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">80</span>];</span><br><span class="line">is.<span class="built_in">get</span>(temp,<span class="number">80</span>)</span><br><span class="line"><span class="keyword">if</span>(is)</span><br><span class="line">str = temp;</span><br><span class="line"><span class="keyword">while</span>(is&amp;&amp;is.<span class="built_in">get</span>()!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为对象数组输入内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String saying[n];</span><br><span class="line"><span class="type">char</span> temp[<span class="number">80</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin.<span class="built_in">get</span>(temp,<span class="number">80</span>);</span><br><span class="line"><span class="keyword">while</span>(cin&amp;&amp;cin.<span class="built_in">get</span>()!=<span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cin)</span><br><span class="line">saying[i] = temp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为对象数组输出到屏幕上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;saying[i][<span class="number">0</span>]&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;saying[i]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>找到对象数组中最短的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> shortest = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(saying[i].<span class="built_in">length</span>()&lt;saying[shortest].length)</span><br><span class="line">shortest = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="12-2-2比较成员函数"><a href="#12-2-2比较成员函数" class="headerlink" title="12.2.2比较成员函数"></a>12.2.2比较成员函数</h3><ol><li>将比较函数作为友元，有助于String对象与常规的c字符串进行比较<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&quot;love&quot;</span>==answer)</span><br><span class="line">将被转换为：</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">operator</span>==(<span class="string">&quot;love&quot;</span>,answer))</span><br><span class="line">然后，编译器将使用某个构造函数将代码转换为：</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">operator</span>==(<span class="built_in">String</span>(<span class="string">&quot;love&quot;</span>),answer))</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> String &amp; st1,<span class="type">const</span> String &amp;st2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(st1.str,st2.str)&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> String &amp; st1,<span class="type">const</span> String &amp;st2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(st1.str,st2.str)&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String &amp; st1,<span class="type">const</span> String &amp;st2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(st1.str,st2.str)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="12-2-3使用中括号表示法访问字符"><a href="#12-2-3使用中括号表示法访问字符" class="headerlink" title="12.2.3使用中括号表示法访问字符"></a>12.2.3使用中括号表示法访问字符</h3><ol><li><p>一般是在String类这种数组中，opera[4]不是指它包含有四个对象，而是第四个字符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">opera</span><span class="params">(<span class="string">&quot;The Magic Flute&quot;</span>)</span></span>;</span><br><span class="line">opera[<span class="number">4</span>];</span><br><span class="line"><span class="type">char</span> &amp; String::opera[](<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将r赋给指向means.str[0]的引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">means</span><span class="params">(<span class="string">&quot;might&quot;</span>)</span></span>;</span><br><span class="line">means[<span class="number">0</span>]=<span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">means.<span class="keyword">operator</span>[](<span class="number">0</span>)=<span class="string">&#x27;r</span></span><br><span class="line"><span class="string">means.str[0]=&#x27;</span>r<span class="number">&#x27;</span>   访问的是私有数据，但由于<span class="keyword">operator</span>[]()是类的一个方法，因此能够修改数组的内容</span><br></pre></td></tr></table></figure><p>后三者是等同的</p></li><li><p>answer是常量，只能使用常量函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> String <span class="title">answer</span><span class="params">(<span class="string">&quot;futile&quot;</span>)</span></span>;     </span><br><span class="line">如果只有<span class="keyword">operator</span>[]()定义，则下面的代码将出错：</span><br><span class="line">cout&lt;&lt;answer[<span class="number">1</span>];</span><br><span class="line">因此提供常量版本：</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> &amp; String::opera[](<span class="type">int</span> i) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="12-2-4-静态类成员函数"><a href="#12-2-4-静态类成员函数" class="headerlink" title="12.2.4 静态类成员函数"></a>12.2.4 静态类成员函数</h3><ol><li><p>不能通过对象调用静态成员函数，甚至不能使用this指针，它不属于对象，属于类，调用它的方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> count = String::<span class="built_in">HowMany</span>();</span><br></pre></td></tr></table></figure><p>可以使用类名和作用域解析运算符调用它，可以访问静态成员num_string，但不能访问str</p></li><li><p>两种的差别</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> num_strings;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> CLNLIM = <span class="number">80</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="12-2-5-进一步重载赋值运算符"><a href="#12-2-5-进一步重载赋值运算符" class="headerlink" title="12.2.5 进一步重载赋值运算符"></a>12.2.5 进一步重载赋值运算符</h3><ol><li>将常规字符串复制到String对象中<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String &amp; String::<span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">char</span> *s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] str;</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line">str = <span class="keyword">new</span> <span class="type">char</span> [len+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(str,s);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>一般来说，必须释放str指向的内存</li></ol><h2 id="12-3-在构造函数中使用new时应注意的事项"><a href="#12-3-在构造函数中使用new时应注意的事项" class="headerlink" title="12.3 在构造函数中使用new时应注意的事项"></a>12.3 在构造函数中使用new时应注意的事项</h2><ol><li>如果有多个构造函数，则必须以相同的方式使用new，要么带中括号，要么不带中括号。因为只有一个析构函数，然而将指针初始化为空，两种都兼容</li></ol><h3 id="12-3-1-包含类成员的类的逐成员复制"><a href="#12-3-1-包含类成员的类的逐成员复制" class="headerlink" title="12.3.1 包含类成员的类的逐成员复制"></a>12.3.1 包含类成员的类的逐成员复制</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Magazine</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">String title;</span><br><span class="line">string publisher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String和string都使用动态内存分配，但不需要为Magazine类编写复制构造函数和赋值运算符，会将使用成员类定义的复制构造函数和赋值运算符</p><h2 id="12-4-有关返回对象的说明"><a href="#12-4-有关返回对象的说明" class="headerlink" title="12.4 有关返回对象的说明"></a>12.4 有关返回对象的说明</h2><h3 id="12-4-1-返回指向const对象的引用"><a href="#12-4-1-返回指向const对象的引用" class="headerlink" title="12.4.1 返回指向const对象的引用"></a>12.4.1 返回指向const对象的引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> Vector &amp; <span class="title">Max</span><span class="params">(<span class="type">const</span> Vector &amp; v1;<span class="type">const</span> Vector &amp; v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v1.<span class="built_in">magval</span>()&gt;v2.<span class="built_in">magval</span>())</span><br><span class="line"><span class="keyword">return</span> v1;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个const与返回有关，返回的是v1或v2，v1和v2都被声明为const引用，所有才使用const</p><h3 id="12-4-2-返回指向非const对象引用"><a href="#12-4-2-返回指向非const对象引用" class="headerlink" title="12.4.2 返回指向非const对象引用"></a>12.4.2 返回指向非const对象引用</h3><p>operator&lt;&lt;()的返回类型必须是ostream &amp;，而不能仅仅是ostream。如果使用返回类型ostream，将调用ostream类的复制构造函数，而ostream类没有公有的复制构造函数</p><h3 id="12-4-3-返回对象"><a href="#12-4-3-返回对象" class="headerlink" title="12.4.3 返回对象"></a>12.4.3 返回对象</h3><p>如果被返回的对象是被调用函数中的局部变量，则不应按引用方式返回它，只能是返回对象</p><h2 id="12-5-使用指向对象的指针"><a href="#12-5-使用指向对象的指针" class="headerlink" title="12.5 使用指向对象的指针"></a>12.5 使用指向对象的指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String * shortest = &amp;sayings[<span class="number">0</span>];</span><br><span class="line">shortest-&gt;<span class="built_in">length</span>()</span><br></pre></td></tr></table></figure><p>使用结构体的方式来使用成员</p><ol><li>使用new初始化对象<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String *favorite = <span class="keyword">new</span> <span class="built_in">String</span>(saying[choice]);</span><br><span class="line">将调用复制构造函数：</span><br><span class="line"><span class="built_in">String</span>()</span><br></pre></td></tr></table></figure>这里指针favorite指向new创建的未被命名对象，但复制构造函数会给它创建内容</li></ol><h3 id="12-5-1-再谈定位new运算符"><a href="#12-5-1-再谈定位new运算符" class="headerlink" title="12.5.1 再谈定位new运算符"></a>12.5.1 再谈定位new运算符</h3><p>内存缓冲区实则指的是数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JustTesting</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string words;</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *buffer = <span class="keyword">new</span> <span class="type">char</span> [BUF];</span><br><span class="line">JustTesting *pc1,*pc2;，*pc3</span><br><span class="line">pcl = <span class="built_in">new</span> (buffer) JustTesting</span><br><span class="line">pc2 = <span class="keyword">new</span> <span class="built_in">JustTesting</span>(<span class="string">&quot;Heap&quot;</span>,<span class="number">10</span>);</span><br><span class="line">pc3 = <span class="built_in">new</span> (buffer+<span class="built_in">sizeof</span>(JustTesting)) <span class="built_in">JustTesting</span>()</span><br><span class="line"><span class="keyword">delete</span> [] buffer;   要这样做的原因在于：<span class="keyword">delete</span>不能与定位<span class="keyword">new</span>运算符配合使用</span><br><span class="line"><span class="keyword">delete</span> pc2;</span><br></pre></td></tr></table></figure><p>将delete用于pc2，将自动调用为pc2指向的的对象调用析构函数，用于buffer时，不会为使用定位new运算符创建的对象调用析构函数，而是需要显示的调用析构函数<br>，一般情况下将自动调用析构函数，这是需要显示调用析构函数的少数几种情况之一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p1-&gt;~<span class="built_in">JustTesting</span>();</span><br></pre></td></tr></table></figure><ol><li><p>cout对地址输出的不同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;(<span class="type">void</span> *)buffer&lt;&lt;pc1&lt;&lt;pc2&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>buffer输出地址的方式不同</p></li><li><p>定位new运算符创建的对象的删除顺序与创建的顺序相反。原因在于晚创建的对象可能依赖于早创建的对象，另外当所有对象都被消除后，才能释放缓冲区</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p3-&gt;~<span class="built_in">JustTesting</span>();</span><br><span class="line">p1-&gt;~<span class="built_in">JustTesting</span>();</span><br><span class="line"><span class="keyword">delete</span> [] buffer; </span><br></pre></td></tr></table></figure></li></ol><h1 id="第13章-类继承"><a href="#第13章-类继承" class="headerlink" title="第13章 类继承"></a>第13章 类继承</h1><p>面向对象编程的主要目的之一是提供可重用的代码</p><ol><li>通过继承完成的一些工作：<br>可以在已有的基础上添加功能。例如，对于数组类，可以添加数学运算。<br>可以给类添加数据。例如，对于字符串类，可以添加显示颜色的数据成员。<br>可以修改类方法的行为。例如，提供给飞机乘客的服务的类，可以提供更高级别服务的类。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Table::<span class="built_in">Table</span>(<span class="type">const</span> string &amp; fn,<span class="type">const</span> string &amp; ln,<span class="type">bool</span> ht):<span class="built_in">firstname</span>(fn),<span class="built_in">lastname</span>(ln),<span class="built_in">hasTable</span>(ht)&#123;&#125;</span><br><span class="line">Table::<span class="built_in">Table</span>(<span class="type">const</span> string &amp; fn,<span class="type">const</span> string &amp; ln,<span class="type">bool</span> ht)</span><br><span class="line">&#123;</span><br><span class="line">firstname = fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>初始化列表语法可以减少一个步骤，它直接使用string的复制构造函数将firstname初始化为fny</li></ol><h2 id="13-1-一个简单的基类"><a href="#13-1-一个简单的基类" class="headerlink" title="13.1 一个简单的基类"></a>13.1 一个简单的基类</h2><h3 id="13-1-1"><a href="#13-1-1" class="headerlink" title="13.1.1"></a>13.1.1</h3><p>构造函数必须给新成员和继承的成员提供数据。第二个构造函数使用一个类为参数，包含firstname，lastname，hasTable</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">RatePlayer</span>(<span class="type">int</span> r=<span class="number">0</span>,<span class="type">const</span> string &amp; fn=<span class="string">&quot;none&quot;</span>);</span><br><span class="line"><span class="built_in">RatePlayer</span>(<span class="type">int</span> r=<span class="number">0</span>,<span class="type">const</span> TableTennishPlayer &amp; tp);</span><br></pre></td></tr></table></figure><p>继承类的构造函数的写法</p><h3 id="13-1-2-构造函数：访问权限的考虑"><a href="#13-1-2-构造函数：访问权限的考虑" class="headerlink" title="13.1.2 构造函数：访问权限的考虑"></a>13.1.2 构造函数：访问权限的考虑</h3><ol><li><p>派生类不能直接访问基类的私有成员，而必须通过基类方法进行访问。列如，RatePlayer构造函数不能直接设置继承的成员，派生类构造函数必须使用基类构造函数</p></li><li><p>创建派生类对象时，程序首先创建基类对象。使用成员初始化列表来完成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RatePlayer::<span class="built_in">RatePlayer</span>(<span class="type">int</span> r,<span class="type">const</span> string &amp; fn,<span class="type">const</span> string &amp; ln,<span class="type">bool</span> ht):<span class="built_in">TableTennisPalyer</span>(fn,ln,ht)</span><br><span class="line">&#123;</span><br><span class="line">rating = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了TableTennisPalyer的构造函数</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RatePlayer::<span class="built_in">RatePlayer</span>(<span class="type">int</span> r,<span class="type">const</span> string &amp; fn,<span class="type">const</span> string &amp; ln,<span class="type">bool</span> ht)</span><br><span class="line">&#123;</span><br><span class="line">rating = r;</span><br><span class="line">&#125;</span><br><span class="line">省略了成员初始化列表，程序将调用默认的基类构造函数，等效有：</span><br><span class="line">RatePlayer::<span class="built_in">RatePlayer</span>(<span class="type">int</span> r,<span class="type">const</span> string &amp; fn,<span class="type">const</span> string &amp; ln,<span class="type">bool</span> ht)：<span class="built_in">TableTennisPalyer</span>()</span><br><span class="line">&#123;</span><br><span class="line">rating = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.第二个构造函数的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RatePlayer::<span class="built_in">RatePlayer</span>(<span class="type">int</span> r=<span class="number">0</span>,<span class="type">const</span> TableTennishPlayer &amp; tp):<span class="built_in">TableTennishPlayer</span>(tp),<span class="built_in">rating</span>(r) &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>上述方法声明是在类外声明的，与在类内声明的形式有很大的不一样</p></li><li><p>释放对象的顺序与创建对象的顺序相反，先执行派生类的析构函数</p></li></ol><h3 id="13-1-4-派生类和基类之间的特殊关系"><a href="#13-1-4-派生类和基类之间的特殊关系" class="headerlink" title="13.1.4 派生类和基类之间的特殊关系"></a>13.1.4 派生类和基类之间的特殊关系</h3><ol><li><p>基类指针或引用可以指向和引用派生类对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RatedPlayer <span class="title">rplayer1</span><span class="params">(<span class="number">1140</span>,<span class="string">&quot;Mallory&quot;</span>,<span class="string">&quot;Duck&quot;</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line">TableTennisPlayer &amp; rt = rplayer;</span><br><span class="line">TableTennisPlayer * pt = &amp;rplayer;</span><br><span class="line">rt.<span class="built_in">Name</span>();</span><br><span class="line">pt-&gt;<span class="built_in">Name</span>();</span><br></pre></td></tr></table></figure><p>基类指针或引用只能用于调用基类方法，不能使用基类指针或引用来调用派生类的方法</p></li><li><p>对于形参为指向基类的指针或引用的函数，也可以使用派生类作为实参，按值传递将派生类对象的基类部分传递给函数 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">(<span class="type">const</span> TableTennisPlayher &amp; rt)</span></span></span><br><span class="line"><span class="function">RatedPlayer <span class="title">rplayer1</span><span class="params">(<span class="number">1140</span>,<span class="string">&quot;Mallory&quot;</span>,<span class="string">&quot;Duck&quot;</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="function">TableTennisPlayer <span class="title">player1</span><span class="params">(<span class="number">1140</span>,<span class="string">&quot;Mallory&quot;</span>,<span class="string">&quot;Duck&quot;</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="built_in">Show</span>(rplayer1);</span><br><span class="line"><span class="built_in">Show</span>(player1);</span><br></pre></td></tr></table></figure></li><li><p>引用兼容性属性让你能够将基类对象初始化为派生类对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RatedPlayer <span class="title">rplayer1</span><span class="params">(<span class="number">1140</span>,<span class="string">&quot;Mallory&quot;</span>,<span class="string">&quot;Duck&quot;</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="function">TableTennisPlayer <span class="title">player1</span><span class="params">(rplayer1)</span></span>;</span><br></pre></td></tr></table></figure><p>要初始化player1,基类要调用构造函数的原型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TableTennisPlayer</span>(<span class="type">const</span> RatedPlayer &amp; );</span><br></pre></td></tr></table></figure><p>基类定义中没有这样的构造函数，但存在隐式复制构造函数</p></li><li><p>同样，也可以将派生类对象赋给基类对象：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RatedPlayer <span class="title">rplayer1</span><span class="params">(<span class="number">1140</span>,<span class="string">&quot;Mallory&quot;</span>,<span class="string">&quot;Duck&quot;</span>,<span class="literal">true</span>)</span></span>;</span><br><span class="line">TableTennisPlayer player1;</span><br><span class="line">player1 = rplayer1;</span><br></pre></td></tr></table></figure><p>将使用隐式重载赋值运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TableTennisPlayher &amp; <span class="keyword">operator</span>=(<span class="type">const</span> TableTennisPlayher &amp; )<span class="type">const</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="13-2-继承：is-a关系"><a href="#13-2-继承：is-a关系" class="headerlink" title="13.2 继承：is-a关系"></a>13.2 继承：is-a关系</h2><ol><li><p>公有继承是最常用的方式，它建立一种is-a关系，新类将继承原始类的所有数据成员</p></li><li><p>公有继承不建立has-a关系，has-a关系：午餐有水果，将水果的对象作为午餐类的数据成员</p></li><li><p>公有继承不建立is-like-a关系,即律师就像鲨鱼，不应从鲨鱼类派生出律师类，继承可以在基类的基础上添加基础，但不能删除基类的属性</p></li><li><p>公有继承不建立is-implemented-as-a关系,即作为···来实现，使用数组来实现栈，不可以因为栈不是数组</p></li><li><p>所以坚持使用is-a的关系，当满足is-a的关系，就可以使用公有继承</p></li></ol><h2 id="13-3-多态公有继承"><a href="#13-3-多态公有继承" class="headerlink" title="13.3 多态公有继承"></a>13.3 多态公有继承</h2><ol><li><p>概念：同一个方法在派生类和基类中的行为是不同的即称为多态–具有多种形态</p></li><li><p>两种实现方法：<br>在派生类中重新定义基类的方法<br>使用虚方法</p></li></ol><h3 id="13-3-1-开发Brass类和BrassPlus类"><a href="#13-3-1-开发Brass类和BrassPlus类" class="headerlink" title="13.3.1 开发Brass类和BrassPlus类"></a>13.3.1 开发Brass类和BrassPlus类</h3><ol><li><p>虚方法的定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Brass</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ViewAcct</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BrassPlus</span>:<span class="keyword">public</span> Brass </span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ViewAcct</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会在派生类中重新定义基类的方法,但函数名一样的，关键字virtual只用于类声明的方法原型中</p></li><li><p>引用类型或指针类型选择方法在继承类中的使用<br>方法没有使用virtual将根据引用类型或指针类型选择方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Brass <span class="title">dom</span><span class="params">(<span class="string">&quot;D&quot;</span>,<span class="number">121</span>,<span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">BrassPlus <span class="title">dot</span><span class="params">(<span class="string">&quot;D&quot;</span>,<span class="number">121</span>,<span class="number">22</span>)</span></span>;</span><br><span class="line">Brass &amp; bl_ref = dom;   本应该这样定义的</span><br><span class="line">Brass &amp; b2_ref = dot;</span><br><span class="line">bl_ref.<span class="built_in">ViewAcct</span>();</span><br><span class="line">b2_ref.<span class="built_in">ViewAcct</span>();</span><br></pre></td></tr></table></figure><p>引用变量的类型为Brass,所以都为Brass::ViewAcct()</p></li></ol><p>方法使用virtual将根据引用类型或指针类型选择方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Brass <span class="title">dom</span><span class="params">(<span class="string">&quot;D&quot;</span>,<span class="number">121</span>,<span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">BrassPlus <span class="title">dot</span><span class="params">(<span class="string">&quot;D&quot;</span>,<span class="number">121</span>,<span class="number">22</span>)</span></span>;</span><br><span class="line">Brass &amp; bl_ref = dom;   本应该这样定义的</span><br><span class="line">Brass &amp; b2_ref = dot;</span><br></pre></td></tr></table></figure><p>第二个是BrassPlus::ViewAcct()</p><ol start="3"><li><p>可以在派生类方法中调用基类的方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BrassPlus::ViewAcct</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Brass::<span class="built_in">ViewAcct</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;df&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果该方法是虚方法，是使用作用域解析运算符来调用基类方法，而不是派生类对象来调用方法；如果不是虚方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BrassPlus::ViewAcct</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ViewAcct</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;df&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则不必使用作用域解析运算符</p></li><li><p>使用格式化方法setf()和precision()将浮点值的输出模式设置为定点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout.<span class="built_in">precision</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建指向Brass的指针数组，可以使用一个数组来表示多种类型的对象，这也是多态，Brass指针既可以指向Brass对象，也可以指向BrassPlus对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Brass * p_clients[<span class="number">4</span>];       与一般的数组定义是完全不一样的</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">p_clients[i]=<span class="keyword">new</span> <span class="built_in">Brass</span>(temp,tempnum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是Brass的指针数组,所以可以进行new分配内存</p></li><li><p>类对象的输入与一般的数据输入是不一样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string temp;</span><br><span class="line"><span class="type">long</span> tempnum;</span><br><span class="line"><span class="built_in">getline</span>(cin,temp);</span><br><span class="line">cin&gt;&gt;tempnum;</span><br></pre></td></tr></table></figure></li><li><p>多态是由下述代码提供的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">p_clients[i]-&gt;ViewAcct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p_clients[i]指的是指针不是值</p></li><li><p>为何需要虚构函数</p></li></ol><h2 id="13-4-静态联编和动态联编"><a href="#13-4-静态联编和动态联编" class="headerlink" title="13.4 静态联编和动态联编"></a>13.4 静态联编和动态联编</h2><ol><li>在编译过程就知道使用哪一个函数，是静态联编。因为虚函数的存在编译器不知道用户将选择哪种类型的对象，只能在程序运行的时候确定正确的虚函数方法<br>叫动态联编，总之，编译器对虚方法使用动态联编，根据对象类型将ViewAcct()关联到Brass::ViewAcct()或BrassPlus::ViewAcct()</li></ol><h3 id="13-4-1-指针和引用类型的兼容性"><a href="#13-4-1-指针和引用类型的兼容性" class="headerlink" title="13.4.1 指针和引用类型的兼容性"></a>13.4.1 指针和引用类型的兼容性</h3><ol><li><p>c++不允许将一种类型地址或引用赋给另一种类型的指针或引用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> x = <span class="number">2.5</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;x;</span><br><span class="line"><span class="type">long</span> &amp; rl = x;</span><br></pre></td></tr></table></figure><p>但基类和派生类可以，而不必进行类型转换</p></li><li><p>虚函数的工作原理：<br>给每个对象添加一个隐藏成员，隐藏成员是一个指向函数地址数组的指针，被称为虚函数表</p></li><li><p>虚析构函数<br>析构函数应当是虚函数，即使它不执行任何操作，除非类不用做基类，析构函数不应进行delete操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">BaseClass</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">Employee *pe = <span class="keyword">new</span> Singer;</span><br><span class="line"><span class="keyword">delete</span> pe;</span><br></pre></td></tr></table></figure><p>如果没有虚析构函数，delete语句将调用<del>Employer()析构函数，将释放派生类对象中的基类部分指向的内存，但不会释放新的类成员指向的内存，如果有虚析构函<br>数则先调用</del>Singer析构函数，在调用~Employer()析构函数</p></li><li><p>虚函数的参数要相同，但返回值可以不同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dwelling</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Dwelling &amp; <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hovel</span>:<span class="keyword">public</span> Dwelling</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Hovel &amp; <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新定义将隐藏方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dwelling</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showperks</span><span class="params">(<span class="type">int</span> a)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showperks</span><span class="params">(<span class="type">long</span> a)</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">两个都将被隐藏</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hovel</span>:<span class="keyword">public</span> Dwelling</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span>  <span class="type">void</span> <span class="title">showperks</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新定义继承的方法并不是重载，将隐藏所有的同名基类的方法</p></li></ol><h2 id="13-5-访问控制：protected"><a href="#13-5-访问控制：protected" class="headerlink" title="13.5 访问控制：protected"></a>13.5 访问控制：protected</h2><ol><li>protected与private相似，在类外只能用公有类成员来访问protected部分中的类成员<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">brass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">doubloe balance;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">doubloe balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>区别在于继承方面：派生类的成员可以直接访问基类的保护成员，但不能直接访问基类的私有成员，在派生类中与公有成员相识。例如可以编写<br>BrassPlus::Withdraw()<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BrassPlus::Withdraw</span><span class="params">(<span class="type">double</span> amt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(amt&lt; balance)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>只有在派生类中可以这样使用，保护数据成员可以简化代码的编写工作，但又使保护数据成员balance成为公有变量，被轻易修改</li></ol><h2 id="13-6-抽象基类-ABC"><a href="#13-6-抽象基类-ABC" class="headerlink" title="13.6 抽象基类(ABC)"></a>13.6 抽象基类(ABC)</h2><ol><li><p>前面已经接受了简单继承和多态继承</p></li><li><p>另一种建立继承的方法：Ellipse类和Circle类有共点，可以建立拥有他们共同点的类BaseEllipse，这个类还包含Ellipse类和Circle类不的同的方法，应<br>被声明为虚函数，但至少应有一个纯虚函数</p></li><li><p>抽象函数通过使用纯虚函数来提供未实现的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseEllipse</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当类声明中包含纯虚函数时，则不能创建该类的对象，只能用做基类，因此可以从BaseEllipse类派生出Ellipse类和Circle类</p></li><li><p>Ellipse类和Circle类被称为具体类，具有相同的基类，可以用BaseEllipse指针数组同时管理这两种对象</p></li><li><p>BaseEllipse类的纯虚函数也应该定于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Withdraw</span><span class="params">(<span class="type">double</span> amt)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BaseEllipse::Withdraw</span><span class="params">(<span class="type">double</span> amt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">balance -= amt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Circle::Withdraw</span><span class="params">(<span class="type">double</span> amt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">balance -= amt; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-6-1-应用ABC概念"><a href="#13-6-1-应用ABC概念" class="headerlink" title="13.6.1 应用ABC概念"></a>13.6.1 应用ABC概念</h3><ol><li>ABC是一种必须实施的接口，这种模式在基于组件的编程模式中很常见，每个ABC或者派生类是组件</li></ol><h2 id="13-7-继承和动态内存分配"><a href="#13-7-继承和动态内存分配" class="headerlink" title="13.7 继承和动态内存分配"></a>13.7 继承和动态内存分配</h2><h2 id="13-7-1-第一种情况：派生类不使用new"><a href="#13-7-1-第一种情况：派生类不使用new" class="headerlink" title="13.7.1 第一种情况：派生类不使用new"></a>13.7.1 第一种情况：派生类不使用new</h2><ol><li>基类使用动态内存分配，包含特殊方法：析构函数，复制构造函数，重载赋值运算符，而派生类不需要</li></ol><h2 id="13-7-2-第二种情况：派生类使用new"><a href="#13-7-2-第二种情况：派生类使用new" class="headerlink" title="13.7.2 第二种情况：派生类使用new"></a>13.7.2 第二种情况：派生类使用new</h2><ol><li>必须为派生类定义特殊方法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">派生类的析构函数：</span><br><span class="line">baseDMA::~<span class="built_in">baseDMA</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hasDMA::~<span class="built_in">hasDMA</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] style;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>派生类的复制构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hasDMA::<span class="built_in">hasDMA</span>(<span class="type">const</span> hasDMA &amp;hs)</span><br><span class="line">         ：<span class="built_in">baseDMA</span>(hs)     是基类的引用可以指向派生类型</span><br><span class="line">&#123;</span><br><span class="line">style = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(hs.style) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(style,hs.style);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派生类的重载赋值运算符：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hasDMA &amp; hasDMA::<span class="keyword">operator</span>=(<span class="type">const</span> hasDMA &amp;hs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> == &amp;hs)</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">baseDMA::<span class="keyword">operator</span>=(hs);    显示调用基类赋值运算符</span><br><span class="line"><span class="keyword">delete</span> [] style;</span><br><span class="line">style = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(hs.style) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(style,hs.style);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;    对<span class="keyword">this</span>指针的返回，返回类型也是引用</span><br><span class="line">&#125;</span><br><span class="line">baseDMA::<span class="keyword">operator</span>=(hs)不可用*<span class="keyword">this</span> = hs代替不然编译器会hasDMA::<span class="keyword">operator</span>=()，从而形成递归调用</span><br></pre></td></tr></table></figure><h3 id="13-7-3-友元的继承"><a href="#13-7-3-友元的继承" class="headerlink" title="13.7.3 友元的继承"></a>13.7.3 友元的继承</h3><ol><li>hasDMA类的友元访问label和rating的方法：使用强制类型转换<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">baseDMA</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *label;</span><br><span class="line"><span class="type">int</span> rating;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os, <span class="type">const</span> baseDMA &amp; rs)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; rs.rating &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os, <span class="type">const</span> hasDMA &amp; hs)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; (<span class="type">const</span> baseDMA &amp;)hs;</span><br><span class="line">os &lt;&lt; hs.style &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第14章-c-中的代码重用"><a href="#第14章-c-中的代码重用" class="headerlink" title="第14章 c++中的代码重用"></a>第14章 c++中的代码重用</h1><ol><li>可以定义一个通用的栈模板，然后创建表示int或double值栈的类</li></ol><h2 id="14-1-包含对象成员的类"><a href="#14-1-包含对象成员的类" class="headerlink" title="14.1 包含对象成员的类"></a>14.1 包含对象成员的类</h2><ol><li>对于考试分数，可以使用一个定长数组，这限制了数组的长度；可以使用动态内存分配的指针，并提供大量的支持代码；也可以使用动态内存分配的类表示该数组；<br>还可以在标准c++库中查找一个表示这种数据的类，自己开发这样的类一点问题也没有</li></ol><h3 id="14-1-1-valarray类简介"><a href="#14-1-1-valarray类简介" class="headerlink" title="14.1.1 valarray类简介"></a>14.1.1 valarray类简介</h3><ol><li><p>它支持将数组中所有元素的值相加以及在数组中找出最大和最小的值的操作，提供的算术支持比vector和array的多</p></li><li><p>几个使用其构造函数的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="type">double</span> gpa[<span class="number">5</span>] = &#123;<span class="number">3.1</span>,<span class="number">3.5</span>,<span class="number">3.8</span>,<span class="number">2.9</span>,<span class="number">3.3</span>&#125;;</span><br><span class="line">valarray &lt;<span class="type">double</span>&gt; v1;</span><br><span class="line">valarray &lt;<span class="type">int</span>&gt; <span class="built_in">v2</span>(<span class="number">8</span>);  指定长度的空数组</span><br><span class="line">valarray &lt;<span class="type">int</span>&gt; <span class="built_in">v3</span>(<span class="number">10</span>,<span class="number">8</span>);</span><br><span class="line">valarray &lt;<span class="type">double</span>&gt; <span class="built_in">v4</span>(gpa,<span class="number">4</span>);</span><br><span class="line">valarray &lt;<span class="type">int</span>&gt; v5 = &#123;<span class="number">12</span>,<span class="number">32</span>,<span class="number">34</span>&#125;;    初始化列表</span><br></pre></td></tr></table></figure><p>先有长度再有数值，长度放后面</p></li><li><p>这个类的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>()   返回数组的长度</span><br><span class="line"><span class="built_in">length</span>()     返回字符串的长度</span><br><span class="line"><span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">max</span>()</span><br><span class="line"><span class="built_in">min</span>()</span><br></pre></td></tr></table></figure></li></ol><h3 id="14-1-2-Student类的设计"><a href="#14-1-2-Student类的设计" class="headerlink" title="14.1.2 Student类的设计"></a>14.1.2 Student类的设计</h3><ol><li><p>可以从string和valarray这两个类，派生出Student类，这是多重公有继承(一种is-a关系),但这里并不合适，学生类与这些类不是is-a的关系</p></li><li><p>模板类一般使用自定义的形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">privatef:</span><br><span class="line"><span class="keyword">typedef</span> std::valarray&lt;<span class="type">double</span>&gt; ArrayDb;     也在<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放在私有部分意味着可以在Student类的实现中使用它，当在Student类外面不能使用</p></li><li><p>在Student类中，可以直接使用string和valarray这两个类的方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>():<span class="built_in">name</span>(<span class="string">&quot;Null Student&quot;</span>),<span class="built_in">scores</span>()&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(<span class="type">const</span> string &amp; s)</span>:name(s),scores()&#123;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(<span class="type">int</span> n)</span>:name(<span class="string">&quot;Nully&quot;</span>),scores(n)&#123;</span>&#125;</span><br><span class="line"><span class="built_in">Studeent</span>(<span class="type">const</span> string &amp; s,<span class="type">int</span> n):<span class="built_in">name</span>(s),<span class="built_in">scores</span>(n)&#123;&#125;</span><br><span class="line"><span class="built_in">Studeent</span>(<span class="type">const</span> string &amp; s,<span class="type">const</span> ArrayDb &amp; a):<span class="built_in">name</span>(s),<span class="built_in">scores</span>(a)&#123;&#125;</span><br><span class="line"><span class="built_in">Studeent</span>(<span class="type">const</span> <span class="type">char</span> *str,<span class="type">const</span> <span class="type">double</span> *pd,<span class="type">int</span> n):<span class="built_in">name</span>(str),<span class="built_in">scores</span>(pd,n)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化被包含的对象时，构造函数将使用成员名，因为初始化的是成员对象，而不是继承的对象</p></li><li><p>在构造函数有一个参数时，考虑隐式转换函数，没有使用explicit可以写如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Student</span>(<span class="type">int</span> n):<span class="built_in">name</span>(<span class="string">&quot;Nully&quot;</span>),<span class="built_in">scores</span>(n)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">doh</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>将创建一个Nully,5个元素的doh对象，但着一般是不允许的</p></li></ol><p>如果使用了explicit：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Student</span><span class="params">(<span class="type">int</span> n)</span>:name(<span class="string">&quot;Nully&quot;</span>),scores(n)&#123;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">doh</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>将会发生错误</p><ol start="5"><li><p>初始化顺序：它们被声明的顺序，而不是它们在初始化列表中的顺序  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Studeent</span>(<span class="type">const</span> string &amp; s,<span class="type">int</span> n):<span class="built_in">scores</span>(n),<span class="built_in">name</span>(s)&#123;&#125;</span><br></pre></td></tr></table></figure><p>先初始化name成员而不是scores成员，在一个成员的值作为另一个成员的初始化表达式的一部分使，初始化的顺序就非常重要</p></li><li><p>stu.name是一个string对象，所以调用函数operator&lt;&lt;(ostream &amp;,const string &amp;)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os,<span class="type">const</span> Student &amp; stu)</span><br><span class="line">&#123;</span><br><span class="line">os&lt;&lt;stu.name&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scores.<span class="built_in">sum</span>()</span><br><span class="line">scores.<span class="built_in">size</span>()</span><br></pre></td></tr></table></figure><p>可以使用scores类的方法，同样该函数也可以实现valarray的输出，但scores没有&lt;&lt;重载运算符，因此，Student类定义了一个私有辅助方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ostream &amp; <span class="title">Student::arr_out</span><span class="params">(ostram &amp; os)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> lim = scores.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(lim&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">&#123;</span><br><span class="line">os&lt;&lt;scores[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">4</span>) os&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">5</span>!=<span class="number">0</span>)</span><br><span class="line">os&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os,<span class="type">const</span> Student &amp; stu)</span><br><span class="line">&#123;</span><br><span class="line">os&lt;&lt;stu.name&lt;&lt;endl;</span><br><span class="line">stu.<span class="built_in">arr_out</span>(os);</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> &amp; Student::<span class="keyword">operator</span>[](<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> scores[i];    引用返回的更快</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在包含main()函数的文件中一般还自定义函数</p></li></ol><h2 id="14-2-私有继承"><a href="#14-2-私有继承" class="headerlink" title="14.2 私有继承"></a>14.2 私有继承</h2><ol><li><p>另一种实现has-a关系的途径–私有继承，基类的公有成员和保护成员都将成为派生类的私有成员，可以在派生类的成员函数中使用它们，<br>即只能在派生类的方法中使用基类的方法,has-a是使用接口，与包含的特性一致,也是将另外两个类的对象做为Student的成员，is-a是使用实现</p></li><li><p>访问限定符的默认类型是私有private</p></li><li><p>Student类应从两个类派生而来,使用多个基类的继承被称为多重继承</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">private</span> string,<span class="keyword">private</span> valarray&lt;<span class="type">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>包含与私有继承的区别：包含提供了两个对象成员，而私有继承提供了两个无名的子对象成员</p></li></ol><h3 id="14-2-1-初始化基类组件"><a href="#14-2-1-初始化基类组件" class="headerlink" title="14.2.1 初始化基类组件"></a>14.2.1 初始化基类组件</h3><ol><li><p>有隐式地继承组件和显式地包含组件</p></li><li><p>私有继承类的构造函数将使用类名来初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Student</span>(<span class="type">const</span> <span class="type">char</span> * str,<span class="type">const</span> <span class="type">double</span> * pd,<span class="type">int</span> n) ：<span class="built_in">string</span>(str),<span class="built_in">ArrayDb</span>(pd,n) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="14-2-2-访问基类的方法"><a href="#14-2-2-访问基类的方法" class="headerlink" title="14.2.2 访问基类的方法"></a>14.2.2 访问基类的方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">Student::Average</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ArrayDb::<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ArrayDb::<span class="built_in">sum</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在没有确定对象时可以使用类名和作用域解析运算符来调用基类的方法，但函数的作用域与方法的作用域不一致时，就使用解析运算符</p><h3 id="14-2-3-访问基类对象"><a href="#14-2-3-访问基类对象" class="headerlink" title="14.2.3 访问基类对象"></a>14.2.3 访问基类对象</h3><ol><li>使用强制类型转换，将Student对象转换为string对象，*this表示Student对象<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> string &amp; <span class="title">Student::Name</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">const</span> string &amp;) *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>为避免调用构造函数创建新的对象，可使用强制类型转换来创建一个引用</li></ol><h3 id="14-2-3-访问基类的友元函数"><a href="#14-2-3-访问基类的友元函数" class="headerlink" title="14.2.3 访问基类的友元函数"></a>14.2.3 访问基类的友元函数</h3><p>用类名显式地限定函数名不合适于友元函数，可以使用显示地转换为基类来调用正确的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; os,<span class="type">const</span> Student &amp; stu)</span><br><span class="line">&#123;</span><br><span class="line">os&lt;&lt;(<span class="type">const</span> string &amp;)stu;      不修改的强制类型转换</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">cout&lt;&lt;plato;    调用时并不是输出Student类的全部成员，而只是string要进入函数里面去看过程</span><br></pre></td></tr></table></figure><h3 id="14-2-4-使用修改后的Student类"><a href="#14-2-4-使用修改后的Student类" class="headerlink" title="14.2.4 使用修改后的Student类"></a>14.2.4 使用修改后的Student类</h3><ol><li><p>两个版本的Student类的公有接口(方法)完全相同，因此可以使用同一个程序测试它们</p></li><li><p>使用包含比私有继承好，如果某个类需要3个string对象，可以使用包含声明3个独立的string成员，如果新类需要访问原有类的保护成员，<br>或需要重新定义虚函数，则应使用私有继承</p></li></ol><h3 id="14-2-5-保护继承"><a href="#14-2-5-保护继承" class="headerlink" title="14.2.5 保护继承"></a>14.2.5 保护继承</h3><p>第三代类体现出保护继承和私有继承的区别</p><h3 id="14-2-6-使用using重新定义访问权限"><a href="#14-2-6-使用using重新定义访问权限" class="headerlink" title="14.2.6 使用using重新定义访问权限"></a>14.2.6 使用using重新定义访问权限</h3><p>1.在派生类类外调用基类对象的方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">Student::sum</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> valarray&lt;<span class="type">double</span>&gt;::<span class="built_in">sum</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用一个using声明来指出派生类可以使用特定的基类成员，即使采用的是私有派生<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">private</span> string,<span class="keyword">private</span> valarray&lt;<span class="type">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> valarray&lt;<span class="type">double</span>&gt;::min;</span><br><span class="line"><span class="keyword">using</span> valarray&lt;<span class="type">double</span>&gt;::max;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">stu.min;  可以这样使用</span><br></pre></td></tr></table></figure>using声明只使用成员名——没有圆括号，函数特征标和返回类型</li></ol><h2 id="14-3-多重继承"><a href="#14-3-多重继承" class="headerlink" title="14.3 多重继承"></a>14.3 多重继承</h2><h2 id="14-4-类模板"><a href="#14-4-类模板" class="headerlink" title="14.4 类模板"></a>14.4 类模板</h2><ol><li>不如编写一个泛型栈，然后将具体的类型作为参数传递给这个类，这样就可以使用不同类型的栈，例如int栈和string栈</li></ol><h3 id="14-4-1-定义模板类"><a href="#14-4-1-定义模板类" class="headerlink" title="14.4.1 定义模板类"></a>14.4.1 定义模板类</h3><ol start="2"><li>templat为函数名，尖括号中的内容相当于函数的参数列表，class&#x2F;typename看作是变量的类型名，Type看作变量的名称<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Type</span>&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br></pre></td></tr></table></figure>可以使用模板成员函数替换原有类的类方法。每个函数头都将以相同模板声明打头</li></ol><p>应改为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Item items[MAX];--&gt;Type items[MAX];</span><br><span class="line">Stack::--&gt;Stack&lt;type&gt;::       作用域解析符与类名也要改</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Type</span>&gt;</span><br><span class="line"><span class="type">bool</span> Stack&lt;Type&gt;::<span class="built_in">isEmpty</span>(<span class="type">const</span> Type &amp; item) &#123;&#125;</span><br></pre></td></tr></table></figure><p>如果在类声明中定义了方法(内联定义)，则可以省略模板前缀和类限定符</p><ol start="3"><li>不能将模板成员函数放在独立的实现文件中，由于模板不是函数，它们不能单独编译</li></ol><h3 id="14-4-2-使用类模板"><a href="#14-4-2-使用类模板" class="headerlink" title="14.4.2 使用类模板"></a>14.4.2 使用类模板</h3><ol><li>使用的算法必须与类型一致，一般int与string是可以用在同一个模板类中的，string栈与指针栈有相同的功能，但不能用在同一个模板类中</li></ol><h3 id="14-4-3-指针栈-x2F-指针模板"><a href="#14-4-3-指针栈-x2F-指针模板" class="headerlink" title="14.4.3 指针栈&#x2F;指针模板"></a>14.4.3 指针栈&#x2F;指针模板</h3><ol><li><p>使用一个指针数组，其中每个指针都指向不同的字符串，用使用动态数组</p></li><li><p>返回类型为类时也要使用Stack<Type></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Stack &amp; <span class="keyword">operator</span>=(<span class="type">const</span> Stack &amp; st);   这是缩写，只能在类中使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Type</span>&gt;</span><br><span class="line">Stack&lt;Type&gt; &amp; Stack&lt;Type&gt;::<span class="keyword">operator</span>=(<span class="type">const</span> Stack &amp; st) &#123;&#125;   </span><br></pre></td></tr></table></figure></li></ol><h3 id="14-4-4-数组模板示例和非类型参数"><a href="#14-4-4-数组模板示例和非类型参数" class="headerlink" title="14.4.4 数组模板示例和非类型参数"></a>14.4.4 数组模板示例和非类型参数</h3><ol><li><p>模板常用作容器类，主要是为容器类提供可重用代码</p></li><li><p>数组模板的成员是数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Type</span>&gt;</span><br></pre></td></tr></table></figure><p>为类型参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> n&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayTP</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T ar[n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为非类型或表达式参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayTP&lt;<span class="type">double</span>,<span class="number">12</span>&gt;eqqweights;</span><br></pre></td></tr></table></figure><p>编译器将使用double替换T，使用12替换n</p></li><li><p>表达式参数可以是整型，枚举，引用或指针，因此，double m是不合法的，但double *rm是合法的<br>模板代码不能修改参数的值，也不能使用参数的地址，如n++和&amp;n<br>用作参数的值必须是常量表达式</p></li><li><p>介绍一个允许指定数组大小的简单数组模板：<br>第一种：使用动态数组和构造函数参数来提供元素数目<br>第二种：使用模板参数来提供常规数组的大小，array就是这样做的</p></li><li><p>表达式参数方法的缺点：每种数组大小都将生成自己的模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayTP&lt;<span class="type">double</span>,<span class="number">12</span>&gt; eqqweights;</span><br><span class="line">ArrayTP&lt;<span class="type">double</span>,<span class="number">13</span>&gt; donuts;</span><br></pre></td></tr></table></figure><p>将生成两个独立的类声明</p></li><li><p>使用动态数组和构造函数参数的方法的优点：更通用，数组大小是作为类成员存储在定义中的，可以将一种大小的数组赋给另一种大小的数组</p></li></ol><h3 id="14-4-4-模板的多功能性"><a href="#14-4-4-模板的多功能性" class="headerlink" title="14.4.4 模板的多功能性"></a>14.4.4 模板的多功能性</h3><ol><li><p>模板类可用作基类，也可用作组件类，还可用作其他模板的类型参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T entry;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrowArray</span> : <span class="keyword">public</span> Array&lt;Type&gt; &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Tp</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line">Array&lt;Tp&gt; ar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Array&lt; Stack&lt;<span class="type">int</span>&gt; &gt; asi;</span><br></pre></td></tr></table></figure></li><li><p>递归使用模板：对于前面的数组模板定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayTP&lt; ArrayTP&lt;<span class="type">int</span>,<span class="number">5</span>&gt; <span class="number">10</span>&gt; twodee;</span><br></pre></td></tr></table></figure><p>这使得twodee是一个包含10个元素的数组，其中每个元素都是一个包含5个int元素的数组，与之等价的常规数组声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> towdee[<span class="number">10</span>][<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>即使没有这样的函数也可以这样使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">twodee[i][j]=<span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>控制输出宽度的方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout.<span class="built_in">width</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用多个类型参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>,<span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line">Pair&lt;string,<span class="type">int</span>&gt;</span><br></pre></td></tr></table></figure><p>模板类的类名是Pair&lt;string,int&gt;，而不是Pair</p></li><li><p>默认类型模板参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>,<span class="keyword">class</span> <span class="title class_">T2</span> = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> Top&#123;...&#125;</span><br><span class="line">Top&lt;<span class="type">double</span>&gt; m1;    T2为<span class="type">int</span>型</span><br><span class="line">Top&lt;<span class="type">double</span> <span class="type">double</span>&gt; m2;  T2为<span class="type">double</span>型</span><br></pre></td></tr></table></figure></li></ol><h3 id="14-4-6-模板的具体化"><a href="#14-4-6-模板的具体化" class="headerlink" title="14.4.6 模板的具体化"></a>14.4.6 模板的具体化</h3><ol><li><p>隐式实例化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayTP&lt;<span class="type">int</span>,<span class="number">100</span>&gt; stuff;</span><br></pre></td></tr></table></figure></li><li><p>显式实例化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> <span class="keyword">class</span> <span class="title class_">ArrayTP</span>&lt;string,<span class="number">100</span>&gt;;</span><br></pre></td></tr></table></figure><p>之后将生成一个类</p></li><li><p>显式具体化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SortedArray</span> &#123;....&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假设模板使用&gt;运算符来对值进行比较，对于数字，这管用;如果T是const char *，将不管用，这将要求类定义使用strcmp()，而不是&gt;来对值进行比较，这种情况下<br>可以提供一个显式模板具体化，即为一种具体类型定义的模板，而不是泛型定义的模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">class</span> <span class="title class_">SortedArray</span>&lt;<span class="type">const</span> <span class="type">char</span> *&gt;</span><br><span class="line"></span><br><span class="line">SortedArray&lt;<span class="type">int</span>&gt; scores;</span><br><span class="line">SortedArray&lt;<span class="type">const</span> <span class="type">char</span> *&gt;dates;</span><br></pre></td></tr></table></figure></li></ol><p>4.部分具体化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">class</span> <span class="title class_">Feed</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>*&gt; <span class="keyword">class</span> <span class="title class_">Feed</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line">Feed&lt;<span class="type">char</span>&gt; fb1;</span><br><span class="line">Feed&lt;<span class="type">char</span> *&gt; fb2;</span><br></pre></td></tr></table></figure><p>第二个声明使用通用模板时，将T转换为char *类型，如果是部分具体化，T将转换为char</p><ol start="5"><li>模板该考虑的类型：常规类型，char，char *a， string，ArrayTP，ArrayTP&lt;int,5&gt;</li></ol><h3 id="14-4-7-成员模板"><a href="#14-4-7-成员模板" class="headerlink" title="14.4.7 成员模板"></a>14.4.7 成员模板</h3><p>模板可用作结构，类或模板类的成员</p><ol><li>在beta模板外定义hold类和blah方法，模板是嵌套的，还必须指出hold和blab是beta<T>类的成员<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> V&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">beta</span>&lt;T&gt;::hold &#123;...&#125;</span><br></pre></td></tr></table></figure>而不能使用<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> V&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="14-4-8-将模板用作参数"><a href="#14-4-8-将模板用作参数" class="headerlink" title="14.4.8 将模板用作参数"></a>14.4.8 将模板用作参数</h3><p>是可以将类进行更改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">Thing</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Crab</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Thing&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Crab&lt;Stack&gt; nebula;</span><br></pre></td></tr></table></figure><h3 id="14-4-8-模板类和友元"><a href="#14-4-8-模板类和友元" class="headerlink" title="14.4.8 模板类和友元"></a>14.4.8 模板类和友元</h3><h3 id="14-4-8-模板别名"><a href="#14-4-8-模板别名" class="headerlink" title="14.4.8 模板别名"></a>14.4.8 模板别名</h3><h1 id="第15章-友元、异常和其他"><a href="#第15章-友元、异常和其他" class="headerlink" title="第15章 友元、异常和其他"></a>第15章 友元、异常和其他</h1><h2 id="15-1-友元"><a href="#15-1-友元" class="headerlink" title="15.1 友元"></a>15.1 友元</h2><p>友元类的所有方法都可以访问原始类的私有成员和保护成员</p><h3 id="15-1-1-友元类"><a href="#15-1-1-友元类" class="headerlink" title="15.1.1 友元类"></a>15.1.1 友元类</h3><ol><li>编写一个模拟电视机和遥控器的简单程序，遥控器可以改变电视机的状态，而不是is-a,has-a的关系，因此将Romote类作为Tv类的一个友元，必须先定义Tv<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Remote</span>;</span><br><span class="line">...    </span><br><span class="line">&#125;;   放在公有位置</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Remote</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">volup</span><span class="params">(Tv &amp; t)</span> </span>&#123;<span class="keyword">return</span> t.<span class="built_in">volup</span>();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>满足的是一种先有电视再有遥控器的关系</li></ol><h3 id="15-1-2-友元成员函数"><a href="#15-1-2-友元成员函数" class="headerlink" title="15.1.2 友元成员函数"></a>15.1.2 友元成员函数</h3><ol><li><p>让特定是类成员成为另一个类的友元，而不必让整个类成为友元</p></li><li><p>让Remote::set_chan()成为Tv类的友元的方法是，在Tv类声明中将其声明为友元,set_chan()使用的是Tv类的成员，所以必须是友元</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Remote::set_chan</span><span class="params">(Tv &amp; t,<span class="type">int</span> c)</span></span>;</span><br><span class="line">...    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>必须使用前向声明(forward declaration)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Remote</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span>;</span><br></pre></td></tr></table></figure></li><li><p>Remote声明中只包含方法声明，并将实际的定义放在Tv类之后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Remote</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_chan</span><span class="params">(Tv &amp; t,<span class="type">int</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_mode</span><span class="params">(Tv &amp;t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Remote::set_chan</span><span class="params">(Tv &amp; t,<span class="type">int</span> c)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Remote::set_chan</span><span class="params">(Tv &amp; t,<span class="type">int</span> c)</span> </span>&#123;t.channel = c;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Remote::set_mode</span><span class="params">(Tv &amp;t)</span> </span>&#123;t.<span class="built_in">set_mode</span>();&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="15-1-3-其他友元关系"><a href="#15-1-3-其他友元关系" class="headerlink" title="15.1.3 其他友元关系"></a>15.1.3 其他友元关系</h3><h3 id="15-1-4-共同的友元"><a href="#15-1-4-共同的友元" class="headerlink" title="15.1.4 共同的友元"></a>15.1.4 共同的友元</h3><h2 id="15-2-嵌套类"><a href="#15-2-嵌套类" class="headerlink" title="15.2 嵌套类"></a>15.2 嵌套类</h2><ol><li><p>对类进行嵌套与包含并不同，包含意味着将类对象作为另一个类成员，而对类进行嵌套不创建类成员，而是定义了一种类型程序的其他部分</p></li><li><p>在方法文件中定义构造函数，则定义必须指出Node类是在Queue类中定义的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue::Node::<span class="built_in">Node</span>(<span class="type">const</span> Item &amp;i) : <span class="built_in">item</span>(i),<span class="built_in">next</span>(<span class="number">0</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="15-2-1-嵌套类和访问权限"><a href="#15-2-1-嵌套类和访问权限" class="headerlink" title="15.2.1 嵌套类和访问权限"></a>15.2.1 嵌套类和访问权限</h2><ol><li><p>类的默认访问权限是私有的，Queue队列类是嵌套类</p></li><li><p>嵌套类是在另一个类的私有部分声明的，只有类成员可以使用对象和指向嵌套类对象的指针，派生类和外部世界不知道它的存在<br>如果是保护部分声明的，派生类可见并且可以创建这种类型的对象，但对于外部是不可见的<br>如果是公有部分声明的，允许派生类和外部世界使用它<br>嵌套结构和枚举的作用也是相同的</p></li><li><p>有一个失业的教练，他不属于任何球队，可以在Team类的外面创建Coach对象,是这种关系的类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Team</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coach</span> &#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Team::Coach forhire;</span><br></pre></td></tr></table></figure></li><li><p>Queue类对象只能显示地访问Node节点类对象的公有成员，因为Node类的所有成员都被声明为公有的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Item item;</span><br><span class="line">Node *next:</span><br><span class="line"><span class="built_in">Node</span>(<span class="type">const</span> Item &amp;i) : <span class="built_in">item</span>(i),<span class="built_in">next</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node *front;</span><br><span class="line">Node *rear;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="15-2-2-模板中的嵌套"><a href="#15-2-2-模板中的嵌套" class="headerlink" title="15.2.2 模板中的嵌套"></a>15.2.2 模板中的嵌套</h2><p>Queue类定义转换为模板，是一种容器类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QueueTp&lt;<span class="type">double</span>&gt; dq;</span><br><span class="line"></span><br><span class="line"><span class="function">QueueTp&lt;string&gt; <span class="title">cs</span><span class="params">(<span class="number">5</span>)</span></span>;  <span class="comment">//可以连续输入5次</span></span><br><span class="line">string temp;</span><br><span class="line"><span class="keyword">while</span>(!cs.<span class="built_in">isfull</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">getline</span>(cin,temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Node被定义成用于存储double的值</p><h2 id="15-3异常"><a href="#15-3异常" class="headerlink" title="15.3异常"></a>15.3异常</h2><h2 id="15-4-RTTI"><a href="#15-4-RTTI" class="headerlink" title="15.4 RTTI"></a>15.4 RTTI</h2><ol><li>RTTI是运行阶段类型识别的简称，旨在为程序在运行阶段确定对象的类型提供一种标准方式</li></ol><h2 id="15-4-1-RTTI的用途"><a href="#15-4-1-RTTI的用途" class="headerlink" title="15.4.1 RTTI的用途"></a>15.4.1 RTTI的用途</h2><p>有一个类层次结构，其中的类都是从同一个基类派生而来的，则可以让基类指针指向其中任何一个类的对象</p><h2 id="15-4-2-RTTI的工作原理"><a href="#15-4-2-RTTI的工作原理" class="headerlink" title="15.4.2 RTTI的工作原理"></a>15.4.2 RTTI的工作原理</h2><ol><li><p>RTTI只适用于包含虚函数的类，是用于基类指针与派生类的转换</p></li><li><p>dynamic_cast运算符，使一个基类指针指向一个派生类的指针，如果失败将空指针赋给指针，使得进行向上转换(is-a的关系)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Grand</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Supeerd</span> : <span class="keyword">public</span> Grand;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Magnificent</span> : <span class="keyword">public</span> Supeerd;</span><br><span class="line"></span><br><span class="line">Grand *pg = <span class="keyword">new</span> Grand;</span><br><span class="line">Superd *ps = <span class="keyword">new</span> Supeerd;</span><br><span class="line"></span><br><span class="line">pg = <span class="built_in">GetOne</span>();</span><br><span class="line">ps = <span class="built_in">dynamic_cast</span>&lt;Superd *&gt;(pg);</span><br><span class="line">ps-&gt;<span class="built_in">Say</span>();</span><br></pre></td></tr></table></figure><p>这样ps可以在pg的基础上使用Say()成员(Grand类并没有这个函数，Superd有这个函数)</p></li><li><p>typeid运算符和type_info类</p></li></ol><h2 id="15-5-类型转换运算符"><a href="#15-5-类型转换运算符" class="headerlink" title="15.5 类型转换运算符"></a>15.5 类型转换运算符</h2><ol><li><p>在c语言中都是允许的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Data</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> data[<span class="number">200</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Junk</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> junk[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Data d = &#123;<span class="number">2.5e33</span>,<span class="number">3.5e-19</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *pch = (<span class="type">char</span> *) (&amp;d);  <span class="comment">//可以将结构里的成员类型发生转换，转换为字符串</span></span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">char</span> (&amp;d);       <span class="comment">//将地址转换为字符</span></span><br><span class="line">Junk *pj = (Junk *) (&amp;d);  <span class="comment">//将结构里的成员类型发生转换，转换为整型</span></span><br></pre></td></tr></table></figure></li><li><p>const_cast运算符将改变值为const或volatile，类型的其他方面不能被修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">High bar;</span><br><span class="line"><span class="type">const</span> High *pbar = &amp;bar;</span><br><span class="line">High *pb = <span class="built_in">const_cast</span>&lt;High *&gt;(pbar);</span><br></pre></td></tr></table></figure></li><li><p>static_cast运算符是进行向下转换的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">High bar;</span><br><span class="line">Low blow;</span><br><span class="line"></span><br><span class="line">Low *pl = <span class="built_in">static_cast</span>&lt;Low *&gt;(&amp;bar);</span><br></pre></td></tr></table></figure></li><li><p>reinterpret_cast运算符将进行重新解释，将一种类型转换为另一种类型</p></li></ol><h1 id="第16章-string类和标准模板库"><a href="#第16章-string类和标准模板库" class="headerlink" title="第16章 string类和标准模板库"></a>第16章 string类和标准模板库</h1><ol><li>STL编程是一种泛型编程，STL(标准模板库)是用于处理各种容器对象的模板</li></ol><h2 id="16-1-string类"><a href="#16-1-string类" class="headerlink" title="16.1 string类"></a>16.1 string类</h2><ol><li>头文件string.h和cstring支持对c风格字符串进行操纵，不支持string类</li></ol><h3 id="16-1-1-构造字符串"><a href="#16-1-1-构造字符串" class="headerlink" title="16.1.1 构造字符串"></a>16.1.1 构造字符串</h3><ol><li>string类的构造函数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">one</span><span class="params">(<span class="string">&quot;Lottery&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">two</span><span class="params">(<span class="number">20</span>,<span class="string">&#x27;s&#x27;</span>)</span></span>;   <span class="comment">//初始化为ssssssssssssssssss</span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">three</span><span class="params">(one)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> alsfs[<span class="number">20</span>] = <span class="string">&quot;Alsfsaell&quot;</span>;</span><br><span class="line">one += <span class="string">&quot;oops&quot;</span>;    <span class="comment">//+=运算符被多次重载，可以使用C-风格字符串或char值</span></span><br><span class="line">one += alsfs;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">four</span><span class="params">(one,<span class="number">3</span>,<span class="number">6</span>)</span></span>;   <span class="comment">//从one中取出从第3个到第6个字符</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> alls[<span class="number">20</span>] = <span class="string">&quot;Allwell&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">five</span><span class="params">(alls,<span class="number">20</span>)</span></span>;   <span class="comment">//取前20字母</span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">six</span><span class="params">(alls+<span class="number">2</span>,alls+<span class="number">4</span>)</span></span>;  <span class="comment">//取alls[2]到alls[4]</span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">seven</span><span class="params">(&amp;five[<span class="number">2</span>],&amp;five[<span class="number">4</span>])</span></span>;  <span class="comment">//取five[2]到five[4]</span></span><br><span class="line">不可<span class="function">string <span class="title">seven</span><span class="params">(five+<span class="number">2</span>,five+<span class="number">4</span>)</span></span>;  <span class="comment">//five不是指针地址</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure></li><li>C++11 新增的构造函数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> (string &amp;&amp; str);  <span class="comment">//移动构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> (initializer_list&lt;<span class="type">char</span>&gt; il);  <span class="comment">//列表初始化</span></span><br><span class="line">string piano_man = &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="16-1-2-string类输入"><a href="#16-1-2-string类输入" class="headerlink" title="16.1.2 string类输入"></a>16.1.2 string类输入</h3><ol><li><p>C-风格字符串的输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> info[<span class="number">100</span>];</span><br><span class="line">cin &gt;&gt; info;</span><br><span class="line">cin.<span class="built_in">getline</span>(info,<span class="number">100</span>);</span><br><span class="line">cin.<span class="built_in">get</span>(info,<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>string对象,可以自动调整对象的大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string stuff;</span><br><span class="line">cin &gt;&gt; stuff;</span><br><span class="line"><span class="built_in">getline</span>(cin,stuff);</span><br><span class="line"><span class="built_in">getline</span>(cin,stuff[<span class="number">2</span>]);  <span class="comment">//可以这两种使用</span></span><br></pre></td></tr></table></figure></li><li><p>两个版本都有一个可选参数，用于指定使用哪个字符来确定输入的边界</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">getline</span>(info,<span class="number">100</span>,<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"><span class="built_in">getline</span>(stuff,<span class="string">&#x27;:&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>string对象输入的限制<br>1.string对象的最大允许长度，由常量string::npos指定，通常最大值为unsigned int,如果你将整个文件的内容读取到单个string对象中，这是一个限制</p></li></ol><h3 id="16-1-3-使用字符串"><a href="#16-1-3-使用字符串" class="headerlink" title="16.1.3  使用字符串"></a>16.1.3  使用字符串</h3><ol><li><p>length()成员来自string类，而size()是为STL提供的，可以计算数组的大小</p></li><li><p>成员函数find()方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">find</span><span class="params">(<span class="type">char</span> c,size_type pos = <span class="number">0</span>)</span> <span class="type">const</span></span>;  <span class="comment">//从pos开始查找字符c，找到返回索引</span></span><br><span class="line"><span class="function">size_type <span class="title">find</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s,size_type pos = <span class="number">0</span>)</span> <span class="type">const</span></span>;  <span class="comment">//从pos开始查找字符串s</span></span><br><span class="line"><span class="function">size_type <span class="title">find</span><span class="params">(<span class="type">const</span> string&amp; str,size_type pos = <span class="number">0</span>)</span> <span class="type">const</span></span>;  <span class="comment">//从pos开始查找字符串str</span></span><br></pre></td></tr></table></figure></li><li><p>删除字符串的内容</p></li><li><p>capacity()返回当前分配给字符串的内存块的大小，resize()能够请求内存块的最小长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string stuff;</span><br><span class="line">stuff.<span class="built_in">resize</span>(<span class="number">10</span>);  <span class="comment">//分配10个字符的内存</span></span><br><span class="line"><span class="type">int</span> n = stuff.<span class="built_in">capacity</span>();</span><br></pre></td></tr></table></figure></li></ol><h2 id="16-2-智能指针模板类"><a href="#16-2-智能指针模板类" class="headerlink" title="16.2 智能指针模板类"></a>16.2 智能指针模板类</h2><ol><li><p>智能指针定义了类似于指针的类对象，可以帮助管理动态内存分配的智能指针模板，将new获得的地址赋给这种对象</p></li><li><p>ps是一个常规指针，不是一个类对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string* ps = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="16-2-1-使用智能指针"><a href="#16-2-1-使用智能指针" class="headerlink" title="16.2.1 使用智能指针"></a>16.2.1 使用智能指针</h3><ol><li><p>必须包含头文件<memory></p></li><li><p>模板auto_ptr，unique_ptr，shared_ptr</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">X</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">auto_ptr</span><span class="params">(X* p = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="built_in">auto_ptr</span>(auto_ptr&amp; rhs);</span><br><span class="line">auto_ptr&amp; <span class="keyword">operator</span>=(auto_ptr&amp; rhs);</span><br><span class="line">~<span class="built_in">auto_ptr</span>();</span><br><span class="line">X&amp; <span class="keyword">operator</span>*() <span class="type">const</span>;</span><br><span class="line">X* <span class="keyword">operator</span>-&gt;() <span class="type">const</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">X* ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">auto_ptr&lt;string&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> string(s))</span></span>;</span><br><span class="line">str = *p1;</span><br><span class="line"></span><br><span class="line">p1-&gt;<span class="built_in">find</span>();</span><br></pre></td></tr></table></figure><p>new string是new返回的指针，p1可以使用string的成员函数</p></li><li><p>每一个智能指针都放在代码块中，当离开作用域时，指针自动释放</p></li><li><p>auto_ptr放弃对象的所有权，变成空指针，unique_ptr放弃对象所有权，shared_ptr共享对象所有权</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">auto_ptr&lt;string&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> string(s))</span></span>;</span><br><span class="line">auto_ptr&lt;string&gt; p2;  <span class="comment">//放弃p1的所有权</span></span><br><span class="line">p2 = p1;  <span class="comment">//放弃p2的所有权，p1变为空指针，是不被允许的,unique_ptr这样做会直接编译出错</span></span><br><span class="line"></span><br><span class="line">shared_ptr&lt;string&gt; p3;</span><br><span class="line">p3 = p1;  <span class="comment">//p1和p3指向同一个对象，p1和p3共享对象的所有权</span></span><br></pre></td></tr></table></figure></li><li><p>使用new分配内存时，才能使用auto_ptr和shared_ptr，使用new[]时，使用unique_ptr</p></li></ol><h3 id="16-2-3-unique-ptr优于auto-ptr"><a href="#16-2-3-unique-ptr优于auto-ptr" class="headerlink" title="16.2.3 unique_ptr优于auto_ptr"></a>16.2.3 unique_ptr优于auto_ptr</h3><ol><li>函数返回的临时unique_ptr会被销毁<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">demo</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">ret</span><span class="params">(<span class="keyword">new</span> string(s))</span></span>;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;string&gt; p1;</span><br><span class="line">p1 = <span class="built_in">demo</span>(<span class="string">&quot;hello&quot;</span>);  <span class="comment">//编译出错，unique_ptr不能被赋值</span></span><br><span class="line"></span><br><span class="line">unique_ptr&lt;string&gt; p3；</span><br><span class="line">p3 =  <span class="built_in">unique_ter</span>&lt;string&gt;(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;hello&quot;</span>));  <span class="comment">//正确</span></span><br></pre></td></tr></table></figure>不会编译出错</li></ol><h3 id="16-2-4-选择智能指针"><a href="#16-2-4-选择智能指针" class="headerlink" title="16.2.4 选择智能指针"></a>16.2.4 选择智能指针</h3><ol><li><p>选择shared_ptr的情况：<br>1.有一个指针数组，并使用一些辅助指针来标识特定的元素<br>2.两个对象包含都指向第三个对象的指针<br>3.STL容器包含指针</p></li><li><p>STL算法都支持赋值和复制操作，可用于shared_ptr，只要不调用将一个unique_ptr复制和赋值给另一个的方法或算法，但不能用于unique_ptr</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;unique_ptr&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vp</span>(size);</span><br><span class="line">vp.<span class="built_in">push_back</span>(unique_ptr&lt;<span class="type">int</span>&gt;);</span><br></pre></td></tr></table></figure><p>push_back()调用没有问题，因为它返回一个临时unique_ptr，被赋给vp中的一个unique_ptr</p></li><li><p>unique_ptr为右值时，可将其赋给dhared_ptr</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(unique_ptr&lt;<span class="type">int</span>&gt;)</span></span>;</span><br></pre></td></tr></table></figure><p>shared_ptr包含一个显示构造函数，可将右值unique_ptr转换为shared_ptr</p></li></ol><h2 id="16-3-标准模板库"><a href="#16-3-标准模板库" class="headerlink" title="16.3 标准模板库"></a>16.3 标准模板库</h2><ol><li><p>迭代器能够用来遍历容器的对象，与能够遍历数组的指针类似，是广义指针</p></li><li><p>容器：数组，队列，链表，是选择一种能存储多种数据类型的数据类型成为容器</p></li><li><p>操作：搜索，排列和随机排列,适用于所有容器类的非成员函数，省去了大量重复的工作</p></li><li><p>STL不是面向对象编程，而是一种不同的编程模式——泛型编程</p></li><li><p>数学矢量与计算矢量不一样</p></li><li><p>能够分配容器的对象大小的容器，都使用了动态内存分配</p></li></ol><h3 id="16-3-1-模板类vector"><a href="#16-3-1-模板类vector" class="headerlink" title="16.3.1 模板类vector"></a>16.3.1 模板类vector</h3><ol><li><p>分配器：管理内存分配和释放的类</p></li><li><p>各种STL容器模板都接受一个可选的模板参数，该参数指定使用哪个分配器对象来管理内存</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="keyword">class</span> <span class="title class_">Allocator</span> = allocator&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> vectorr&#123;...&#125;;</span><br></pre></td></tr></table></figure><p>这个类使用new和delete来分配和释放内存， allocator<T>为分配器</p></li></ol><h3 id="16-3-2-可执行的操作"><a href="#16-3-2-可执行的操作" class="headerlink" title="16.3.2 可执行的操作"></a>16.3.2 可执行的操作</h3><ol><li><p>所有的STL容器都提供了一些基本方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">size</span>()</span><br><span class="line"><span class="built_in">swap</span>()交换对象的内容</span><br><span class="line"><span class="built_in">begin</span>()返回一个指向容器中第一个元素</span><br><span class="line"><span class="built_in">end</span>()超过容器尾的迭代器</span><br></pre></td></tr></table></figure></li><li><p>迭代器解除引用和递增</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span>*()返回指向当前元素的指针</span><br><span class="line"><span class="keyword">operator</span>++()递增迭代器</span><br></pre></td></tr></table></figure></li></ol><p>3.每个容器类都定义了一个合适的迭代器，该迭代器是一个名为iterator的模板类，作用域为整个类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator pd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> pd = scores.<span class="built_in">begin</span>(); <span class="comment">//C++11自动类型推断</span></span><br></pre></td></tr></table></figure><p>声明了一个迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; scores;</span><br><span class="line">pd = scores.<span class="built_in">begin</span>();</span><br><span class="line">*pd = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>一般带有指针的名字都会有指针的性质，只不过在取地址这里有点不一样</p></li><li><p>迭代器遍历容器内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(pd = scores.<span class="built_in">begin</span>();pd!=scores.<span class="built_in">end</span>();pd++)</span><br></pre></td></tr></table></figure></li><li><p>vector类的才有的push_back()，在矢量末尾添加元素,它将负责内存管理，增加矢量的长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; scores;</span><br><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">scores.<span class="built_in">push_back</span>(<span class="number">100</span>);</span><br><span class="line">scores.<span class="built_in">push_back</span>(a);</span><br></pre></td></tr></table></figure><p>erase()方法删除矢量中给定区间的元素</p></li><li><p>vector提供了随机访问功能，因此可以有begin()+2操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores.<span class="built_in">erase</span>(scores.<span class="built_in">begin</span>(),scores.<span class="built_in">begin</span>()+<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>insert()方法将元素插入到矢量中的指定位置，该区间是另一个容器对象的一部分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; old_v;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; new_v;</span><br><span class="line">...</span><br><span class="line">old_v.<span class="built_in">insert</span>(old_v.<span class="built_in">begin</span>()+<span class="number">2</span>,new_v.<span class="built_in">begin</span>(),new_v.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure></li><li><p>swap()交换两个对象的内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; old_v;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; new_v;</span><br><span class="line">old_v.<span class="built_in">swap</span>(new_v);</span><br></pre></td></tr></table></figure></li><li><p>8个容器类，需要支持10中操作，都有自己的成员函数，则要定义80个成员函数，但采用STL方式时，只需要10个非成员函数即可</p></li><li><p>即使有执行相同任务的非成员函数，STL有时也会定义一个成员函数，因为类特定算法的效率比通用算法高，vector成员函数swap()效率比非成员函数swap()高，但非成员函数让你能够交换两个不同容器的内容</p></li><li><p>STL函数：for_each(),random_shuffle()和sort()，必须包含<algorithm></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;Review&gt;::iterator pr;</span><br><span class="line"><span class="keyword">for</span> (pr = books.<span class="built_in">begin</span>(); pr != books.<span class="built_in">end</span>(); pr++)</span><br><span class="line"><span class="built_in">ShowReview</span>(*pr);</span><br><span class="line">替换为：</span><br><span class="line">for_each(books.<span class="built_in">begin</span>(),books.<span class="built_in">end</span>(),ShowReview);</span><br></pre></td></tr></table></figure><p>最后一个参数是指向函数的指针(函数对象)，该函数不可以修改容器元素的值</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">random_shuffle</span>(books.<span class="built_in">begin</span>(),books.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>随机排列该区间中的元素，要求容器类允许随机访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Review&amp; r1,<span class="type">const</span> Review&amp; r2) <span class="type">const</span>;   <span class="comment">//注意是使用的是布尔类型的返回值，现在函数总是用布尔类型的返回值和循环是否结束</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(r1.title&lt;r2.title)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r1.title==r2.title &amp;&amp; r1.rating&lt;r2.rating)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(books.<span class="built_in">begin</span>(),books.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><p>sort()第一个版本使用为存储在容器中的类型元素定义的&lt;运算符，如果容器元素类型是用户定义的，则要使用sort()，必须定义能够该类型对象的operator&lt;()函数，为Review提供了成员或非成员函数operator&lt;()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">WorseThan</span><span class="params">(<span class="type">const</span> Review&amp; r1,<span class="type">const</span> Review&amp; r2)</span> <span class="type">const</span></span>;  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(r1.title&lt;r2.title)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(r1.title==r2.title &amp;&amp; r1.rating&lt;r2.rating)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(books.<span class="built_in">begin</span>(),books.<span class="built_in">end</span>(),WorseThan);</span><br></pre></td></tr></table></figure><p>第二种版本的sort()</p><h3 id="16-3-4-基于范围的for循环"><a href="#16-3-4-基于范围的for循环" class="headerlink" title="16.3.4 基于范围的for循环"></a>16.3.4 基于范围的for循环</h3><ol><li>基于范围的for循环是为用于STL而设计的<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> prices[<span class="number">5</span>] = &#123;<span class="number">10.0</span>,<span class="number">20.0</span>,<span class="number">30.0</span>,<span class="number">40.0</span>,<span class="number">50.0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">double</span> x: prices)</span><br><span class="line">cout&lt;&lt;x&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ol><p>2.循环将依次将books中的每个Review对象传递给ShowReview()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : books)</span><br><span class="line"><span class="built_in">ShowReview</span>(x);</span><br></pre></td></tr></table></figure><ol start="3"><li>不同于for_each()，基于范围的for循环可以修改容器中的元素，但要指定一个引用参数<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">InflateReview</span><span class="params">(Review&amp; r)</span></span>&#123;r.rating++;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp; x : books)                                                        <span class="comment">//两个地方必须要有引用</span></span><br><span class="line"><span class="built_in">InflateReview</span>(x);</span><br></pre></td></tr></table></figure></li></ol><h2 id="16-4-泛型编程"><a href="#16-4-泛型编程" class="headerlink" title="16.4 泛型编程"></a>16.4 泛型编程</h2><ol><li><p>STL是一种泛型编程，面向对象编程关注的是编程的数据方面，使任何数据类型能存在容器中，而泛型编程关注的是算法，使任何容器能运用于算法，共同特定是抽象和创建可重用代码</p></li><li><p>模板使得算法独立于存储的数据类型，而迭代器使算法独立于使用的容器类型</p></li><li><p>定义一种链表类型的迭代器类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> item;</span><br><span class="line">Node* p_next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator</span></span><br><span class="line">&#123;</span><br><span class="line">Node* pt;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">iterator</span>(<span class="number">0</span>) : <span class="built_in">pt</span>(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line"><span class="built_in">iterator</span>(Node* pn) : <span class="built_in">pt</span>(pn) &#123;&#125;;</span><br><span class="line"><span class="type">double</span> <span class="keyword">operator</span>*() &#123;<span class="keyword">return</span> pt-&gt;item;&#125;</span><br><span class="line">iterator <span class="keyword">operator</span>++()                                                     <span class="comment">//是返回的是类对象</span></span><br><span class="line">&#123;</span><br><span class="line">pt = pt-&gt;p_next;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">iterator <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">iterator tmp = *<span class="keyword">this</span>;</span><br><span class="line">pt = pt-&gt;p_next;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>find_ar()与find_ll几乎相同，区别在于结束的条件不同，这就需要不同的容器了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span>* iterator;</span><br><span class="line"><span class="function">iterator <span class="title">find_ar</span><span class="params">(iterator begin,iterator end,<span class="type">double</span> &amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">iterator ar;</span><br><span class="line"><span class="keyword">for</span>(ar = begin;ar!=end;ar++)</span><br><span class="line"><span class="keyword">if</span>(*ar == val)</span><br><span class="line"><span class="keyword">return</span> ar;</span><br><span class="line"><span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">iterator <span class="title">find_ll</span><span class="params">(iterator head,<span class="type">const</span> <span class="type">double</span> &amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">interator start;</span><br><span class="line"><span class="keyword">for</span>(start = head;start!=<span class="number">0</span>;start++)</span><br><span class="line"><span class="keyword">if</span>(*start == val)</span><br><span class="line"><span class="keyword">return</span> start;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>find()函数的实现方法</p></li><li><p>每个容器类定义了相应的迭代器类型，可能是指针，可能是对象，每个容器类都有begin()和end()方法，都使用++，让迭代器递增</p></li><li><p>C++11新增的自动类型推断</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> pr = scores.<span class="built_in">begin</span>();pr != scores.<span class="built_in">end</span>();pr++)</span><br><span class="line">cout &lt;&lt; *pr &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>最好避免直接使用迭代器，而尽量使用for_each()，和基于范围的for循环</p></li><li><p>有了迭代器算法才能通用，基于算法的要求，设计基本迭代器的特征和容器的特征</p></li></ol><h3 id="16-4-2-迭代器类型"><a href="#16-4-2-迭代器类型" class="headerlink" title="16.4.2 迭代器类型"></a>16.4.2 迭代器类型</h3><ol><li><p>不同的算法对迭代器的要求也不同，排序算法需要能够随机访问，可以通过定义+运算符来实现,迭代器也是一个类，含有构造函数</p></li><li><p>如果两个迭代器相同，则解除引用操作得到的值将相同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iter1 == iter2</span><br><span class="line">*iter1 == *iter2</span><br></pre></td></tr></table></figure></li><li><p>输出迭代器只能修改容器值，而不能读取，程序的输出就是容器的输入，输入和输出迭代器都是单通行，不能保证第二次遍历容器时，顺序不变，也不能保证其先前值仍然可以被解除引用</p></li><li><p>正向迭代器可以对前面的迭代器值解除引用，可以读取和修改数据，也可以只读取数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pirw;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *pirw;</span><br></pre></td></tr></table></figure></li><li><p>双向迭代器中，reverse函数可以交换第一个元素和最后一个元素，将指向第一个元素的指针加1，指向第一个元素的指针减1</p></li><li><p>sort()函数需要随机访问迭代器，所以只能用于支持这种迭代器的容器，随机访问迭代器实现为一个常规指针，正向迭代器实现为一个类</p></li><li><p>一种迭代器的类型是不一样的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator</span><br><span class="line">vector&lt;<span class="type">double</span>&gt;::iterator         <span class="comment">//两种类型的迭代器</span></span><br></pre></td></tr></table></figure></li><li><p>每个容器类都定义了一个类级typedef名称——iterator</p></li></ol><p>9.如果所设计的容器类需要迭代器，可考虑STL，它包含用于标准种类的迭代器模板</p><h3 id="16-4-4-概念，改进和模型"><a href="#16-4-4-概念，改进和模型" class="headerlink" title="16.4.4 概念，改进和模型"></a>16.4.4 概念，改进和模型</h3><ol><li><p>将指针用作迭代器，使得STL算法用于常规数组</p></li><li><p>将一个数组复制到一个矢量中copy()函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> casts[<span class="number">10</span>] = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; dice[<span class="number">10</span>];                                        <span class="comment">//copy()不能自动根据发送值调整目标容器的长度</span></span><br><span class="line"><span class="built_in">copy</span>(casts,casts+<span class="number">10</span>,dice.<span class="built_in">begin</span>())</span><br></pre></td></tr></table></figure><p>前两个参数必须是输入迭代器，最后一个必须是输出迭代器</p></li><li><p>输出流迭代器，STL为这种迭代器提供了ostream_iterator模板，是输出迭代器的一个模型，也是一个适配器——类或函数，可以将一些其他接口转换为STL使用的接口(使得cout可以在算法中使用)，迭代器就是STL的接口，要包含头文件iterator</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="function">ostream_iterator&lt;<span class="type">int</span>,<span class="type">char</span>&gt; <span class="title">out_iter</span><span class="params">(cout,<span class="string">&quot; &quot;</span>)</span></span>;    <span class="comment">//构造函数的第一个参数指出了要使用的输出流，第二个参数指出了要使用的分隔符</span></span><br><span class="line">out_iter++ = <span class="number">15</span>;</span><br></pre></td></tr></table></figure><p>out_iter才是迭代器，意味着将15和有空格组成的字符串发送到输出流中，并为下一个输出做准备</p></li><li><p>copy()函数的另一种用法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(dice.<span class="built_in">begin</span>(),dice.<span class="built_in">end</span>(),out_iter);</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(dice.<span class="built_in">begin</span>(),dice.<span class="built_in">end</span>(),<span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>,<span class="type">char</span>&gt;(cout,<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(<span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>,<span class="type">char</span>&gt;(cin),istream_iterator&lt;<span class="type">int</span>,<span class="type">char</span>&gt;,dice.<span class="built_in">begin</span>());</span><br></pre></td></tr></table></figure><p>将dice的内容复制到cout输出流中，即显示容器的内容</p></li><li><p>其他有用的迭代器(reverse_iterator,back_insert_iterator,frint_insert_iterator)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(dice.<span class="built_in">rbegin</span>(),dice.<span class="built_in">rend</span>(),out_iter);</span><br></pre></td></tr></table></figure><p>这样不必声明反向迭代器reverse_iterator，rbegin()和end()返回的值相同，但类型不同(reverse_iterator,iterator)</p></li><li><p>反向指针先通过递减，再解除引用来解决rbegin()的超尾的问题，rp指向位置6，则*rp将是位置5的值 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::reverse_iterator ri;</span><br><span class="line"><span class="keyword">for</span>(ri = dice.<span class="built_in">rbegin</span>();ri != dice.<span class="built_in">rend</span>();ri++)</span><br><span class="line">cout &lt;&lt; *ri &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>三种插入迭代器：back_insert_iterator,front_insert_iterator,insert_iterator</p></li><li><p>back_insert_iterator只能于允许在尾部快速插入的容器(快速插入指的是一个小时固定的算法)，vector满足，将容器类型作为模板参数，将实际的容器标识符作为构造函数参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">back_insert_iterator&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">back_iter</span>(dice);     </span><br></pre></td></tr></table></figure><p>构造函数将假设传递给它的类型有一个push_back()方法</p></li><li><p>front_insert_iterator，满足queue，不满足vector，完成任务很快</p></li><li><p>insert_iterator没有这些限制，还需要一个指示插入位置的构造函数参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert_iterator&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">insert_iter</span>(dice,dice.<span class="built_in">begin</span>());     </span><br></pre></td></tr></table></figure></li><li><p>二维数组也是同样的运用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s1[<span class="number">2</span>] = &#123;<span class="string">&quot;fsdaf&quot;</span>,<span class="string">&quot;ffsadfds&quot;</span>&#125;</span><br><span class="line">vector&lt;string&gt; <span class="built_in">s2</span>(<span class="number">4</span>);        </span><br><span class="line"><span class="built_in">copy</span>(s1,s1+<span class="number">2</span>,s2.<span class="built_in">begin</span>());                                      <span class="comment">//stirng没有迭代器</span></span><br></pre></td></tr></table></figure></li><li><p>可以用insert_iterator将复制数据的算法转换为插入数据的算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(s1,s1+<span class="number">2</span>,back_insert_iterator&lt;vector&lt;string&gt; &gt;(words));</span><br></pre></td></tr></table></figure></li><li><p>这些预定义迭代器增加了函数的功能，比如copy()函数</p></li></ol><h3 id="16-4-5-容器的种类"><a href="#16-4-5-容器的种类" class="headerlink" title="16.4.5 容器的种类"></a>16.4.5 容器的种类</h3><ol><li><p>STL具有容器概念和容器类型，容器类型是可用于创建具体容器对象的模板，有deque,list,queue,priority_queue,stack,vector,map,multimap,set,multiset,bitset</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;deque&quot;</span>: <span class="string">&quot;双端队列（double-ended queue），可以从中端和末端插入和删除元素，是可以随机访问的&quot;</span>,</span><br><span class="line"><span class="string">&quot;list&quot;</span>: <span class="string">&quot;链表（list）是一个双向链表，可以随时在任何位置插入或删除元素。&quot;</span>,</span><br><span class="line"><span class="string">&quot;queue&quot;</span>: <span class="string">&quot;队列（queue）是一种先进先出（FIFO）的数据结构，只能在末端添加元素，在前端删除元素。&quot;</span>,</span><br><span class="line"><span class="string">&quot;priority_queue&quot;</span>: <span class="string">&quot;优先队列（priority queue）是一种特殊的队列，每个元素都有一个优先级，优先级最高的元素最先出队。&quot;</span>,</span><br><span class="line"><span class="string">&quot;stack&quot;</span>: <span class="string">&quot;栈（stack）是一种后进先出（LIFO）的数据结构，只能在顶端添加或删除元素。&quot;</span>,</span><br><span class="line"><span class="string">&quot;vector&quot;</span>: <span class="string">&quot;向量（vector）是动态数组，可以动态地增加和减少元素，在尾部添加和删除元素的时间是固定的，但在头部或中间插入和删除元素为线性时间，还是一种反转容器&quot;</span>,</span><br><span class="line"><span class="string">&quot;map&quot;</span>: <span class="string">&quot;映射（map）是一种关联数组，它存储的是键值对（key-value pairs）。&quot;</span>,</span><br><span class="line"><span class="string">&quot;multimap&quot;</span>: <span class="string">&quot;多重映射（multimap）类似于映射，但允许存在多个相同的键。&quot;</span>,</span><br><span class="line"><span class="string">&quot;set&quot;</span>: <span class="string">&quot;集合（set）是一种不包含重复元素的无序集合。&quot;</span>,</span><br><span class="line"><span class="string">&quot;multiset&quot;</span>: <span class="string">&quot;多重集合（multiset）类似于集合，但允许存在重复的元素。&quot;</span>,</span><br><span class="line"><span class="string">&quot;bitset&quot;</span>: <span class="string">&quot;位集（bitset）是一种特殊的数组，它存储的是位（0或1）。&quot;</span></span><br></pre></td></tr></table></figure><p>C++11新增的容器类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::unordered_map：基于哈希表的关联容器，用于存储键值对，查找、插入和删除操作的平均时间复杂度为<span class="built_in">O</span>(<span class="number">1</span>)。</span><br><span class="line">std::unordered_set：基于哈希表的集合容器，用于存储唯一的键，查找、插入和删除操作的平均时间复杂度为<span class="built_in">O</span>(<span class="number">1</span>)。</span><br><span class="line">std::forward_list：单向链表容器，只支持正序遍历，插入和删除操作在链表头部和尾部速度很快。</span><br></pre></td></tr></table></figure></li><li><p>一些基本的容器特征</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X a;</span><br><span class="line">(&amp;a)-&gt;~<span class="built_in">X</span>();       <span class="comment">//线性时间</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">size</span>();         <span class="comment">//固定时间</span></span><br><span class="line"></span><br><span class="line">a.<span class="built_in">swap</span>();         <span class="comment">//固定时间</span></span><br></pre></td></tr></table></figure></li><li><p>“复杂度”，从快到慢：<br>1.编译时间，在编译时执行，指向时间为0<br>2.固定时间，在运行时执行，指向时间为O(1)，独立于对象中的元素数目<br>3.线性时间，时间与元素数目成正比，指向时间为O(n)</p></li><li><p>序列是基本的容器概念的改进，包括deque,list,vector,forward_list,queue,stack,priority_queue，要求是正向迭代器，保证了元素将按特定顺序排序，即除了第一和最后，每个元素前后都分别有一个元素</p></li><li><p>为list,deque定义了push_front，而没有为vector定义，是因为在矢量前插入一个元素，需要移动大量的元素，而list和deque的允许将元素添加到前端，而不移动其他元素，以固定时间来完成，所以vector没有必要定义push_front</p></li><li><p>deque和vector都对元素进行随机访问和在中部执行线性时间的插入和删除，但vector容器执行的更快，因为vector的内存是连续的，而deque的内存不是连续的，所以vector的访问速度更快，deque更复杂</p></li><li><p>双向链表可以双向遍历链表，可以从后面往前面遍历，也是反转容器 </p></li><li><p>list成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(list&lt;T,Alloc&gt;&amp;x)</span></span>;        <span class="comment">//将两个链表合并，两个链表必须是已经排序，合并后x为空，为线性时间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">const</span> T&amp;value)</span></span>;         <span class="comment">//删除所有值为value的元素，线性时间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unique</span><span class="params">()</span></span>;                      <span class="comment">//将连续的相同(即相邻的相同值)的元素压缩为单个元素，可以结合sort()来使用，线性时间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">()</span></span>;                        <span class="comment">//使用&lt;运算给发，将元素排序，线性时间为NlogN</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splice</span><span class="params">(iterator pos,list&lt;T,Alloc&gt; x)</span>     <span class="comment">//将x中的元素插入到pos之前，x将为空，为固定时间</span></span></span><br></pre></td></tr></table></figure><p>非成员函数sort()，需要随机访问迭代器，不能用于链表，所以只能使用类中的成员函数版本</p></li><li><p>list工具箱：list方法组成了一个方便的工具箱，例如有两个邮件列表要整理，则可以对每个列表进行排序，合并它们，然后使用unique()来删除重复的元素</p></li><li><p>C++11新增的forward_list，实现单链表，无反向迭代器，因为每个节点都只链接到下一个节点，而没有链接到前一个节点</p></li><li><p>queue模板类是一个适配器类，让底层类(deque)展示典型的队列接口，既不允许随机访问，也不允许遍历队列，只允许队列的基本操作，使用这个值与栈一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">push：在队列的末尾添加一个元素。</span><br><span class="line">pop：从队列的开头移除一个元素，并返回该元素。</span><br><span class="line">front：返回队列的第一个元素，但不移除该元素。</span><br><span class="line">back：返回队列的最后一个元素，但不移除该元素。</span><br><span class="line">empty：检查队列是否为空，如果为空则返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span><br><span class="line">size：返回队列中的元素个数。</span><br></pre></td></tr></table></figure></li><li><p>priority_queue是另一个适配器类，与queue操作相同，主要是priority_queue最大的元素被移到队首，底层类是vector，可以修改用于确定哪个元素放到队首的比较方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pq1;</span><br></pre></td></tr></table></figure><p>这用到了构造函数</p></li><li><p>stack模板类，与queue相同，也是适配器类，底层类是vector，给底层类提供了典型的栈接口，既不允许随机访问，也不允许遍历栈，只允许栈的基本操作：将压入推到栈顶，从栈顶弹出元素，查看栈顶的值，检查元素数目和测试栈是否为空</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span><span class="type">const</span>：判断栈是否为空，如果为空则返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span></span><br><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span><span class="type">const</span>：返回栈的元素个数。</span></span><br><span class="line"><span class="function">T&amp; <span class="title">top</span><span class="params">()</span>：返回栈顶元素，并弹出该元素。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> T&amp; x)</span>：将元素压入栈中。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span>：弹出栈顶元素。</span></span><br></pre></td></tr></table></figure><p>如果要使用栈值，必须首先使用top()来检索这个值，然后使用pop()将它从栈中删除</p></li><li><p>array模板类并非STL容器，因为其长度是固定的，没有定义调整容器大小的操作，如push_back()和insert()，可将标准STL算法用于array对象，如copy()和for_each()</p></li></ol><h3 id="16-4-6-关联容器"><a href="#16-4-6-关联容器" class="headerlink" title="16.4.6 关联容器"></a>16.4.6 关联容器</h3><ol><li><p>关联容器将值与键冠梁在一起，并使用键来查找值，优点在于它提供了对元素的快速访问，允许插入元素新元素，但不能指定元素的插入位置原因是关联容器通常有用于确定数据放置位置的算法，而不是使用迭代器，以便能够快速找到元素</p></li><li><p>关联容器通常是使用某种树实现的，4种关联容器：set，multiset,map,multimap，前两种是在头文件set中定义，后两种是在map中定义的</p></li><li><p>set其值类型与键相同，键是唯一的，不会有多个相同的键，multimap可能有多个值的键相同</p></li><li><p>map中，值与键的类型不同，键是唯一的，每个键只对应一个值，multimap可能有一个键可以与多个值关联</p></li><li><p>set模板类可反转，可排序，且键是唯一的，所以不能存储多个相同的值,第二个模板参数，可用于指示用来对键进行的比较函数对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set&lt;string&gt; A;</span><br><span class="line">set&lt;stirng less&lt;string&gt; &gt; A;</span><br><span class="line"></span><br><span class="line">cconst <span class="type">int</span> N = <span class="number">6</span>;</span><br><span class="line">string s1[N] = &#123;<span class="string">&quot;adsf&quot;</span>, <span class="string">&quot;bwe&quot;</span>, <span class="string">&quot;cfdsf&quot;</span>, <span class="string">&quot;dzv&quot;</span>, <span class="string">&quot;ev&quot;</span>, <span class="string">&quot;fbn&quot;</span>&#125;;</span><br><span class="line"><span class="function">set&lt;string&gt; <span class="title">A</span><span class="params">(s1, s1 + N)</span></span>;</span><br><span class="line"><span class="function">ostream_iterator&lt;string, <span class="type">char</span>&gt; <span class="title">out</span><span class="params">(cout, <span class="string">&quot; &quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">copy</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), out);</span><br></pre></td></tr></table></figure><p>set有一个将迭代器区间作为参数的构造函数，键是唯一的，所以”for”在数组两次出现，但在集合中只出现一次，且集合被排序</p></li><li><p>数学为集合定义了一些标准操作，如并集，交集，这些操作的算法，是通用函数，不是类方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set_union</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), B.<span class="built_in">begin</span>(), B.<span class="built_in">end</span>(), ostream_iterator&lt;string,<span class="type">char</span>&gt; <span class="built_in">out</span>(cout, <span class="string">&quot; &quot;</span>));</span><br></pre></td></tr></table></figure><p>显示集合A和B的并集，并进行了排序</p></li><li><p>multimap的模板参数指定键的类型和存储的值的类型，为将信息结合在一起，实际的值的类型将键类型与数据类型结合为一对，STL使用模板类pair&lt;class T,call U&gt;将两种值存储到一个对象中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multimap&lt;<span class="type">int</span>,string&gt; codes;</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="type">const</span> <span class="type">int</span>,string&gt;</span><br></pre></td></tr></table></figure><p>codes对象的值类型为pair&lt;const int,string&gt;</p></li><li><p>用区号作为键来存储城市名，这恰好与codes值类型一致</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;<span class="type">const</span> <span class="type">int</span>,string&gt; <span class="title">iteam</span><span class="params">(<span class="number">231</span>, <span class="string">&quot;New York&quot;</span>)</span></span>;</span><br><span class="line">codes.<span class="built_in">insert</span>(iteam);</span><br></pre></td></tr></table></figure><p>因为数据项是按键排序的，所以不需要指出插入位置</p></li></ol><h3 id="16-4-7-无序关联容器"><a href="#16-4-7-无序关联容器" class="headerlink" title="16.4.7 无序关联容器"></a>16.4.7 无序关联容器</h3><ol><li>无序关联容器也将值与键关联起来，并使用键来查找值，是基于哈希表，旨在提高添加和删除元素的速度以及查找算法的效率：unordered_set,unordered_multiset,unordered_map,unordered_multimap</li></ol><h2 id="16-5-函数对象"><a href="#16-5-函数对象" class="headerlink" title="16.5 函数对象"></a>16.5 函数对象</h2><ol><li>很多STL算法使用了函数对象，包括函数名，指向函数的指针和重载了()运算符的类对象(即定义了函数operator()()的类)<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Linear</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">double</span> slope;</span><br><span class="line"><span class="type">double</span> y0;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">double</span> x)</span>  </span>&#123;<span class="keyword">return</span> y0+slope*x;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Linear f1;</span><br><span class="line"><span class="type">double</span> y1 = <span class="built_in">f1</span>(<span class="number">2.0</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="16-5-1-函数符概念"><a href="#16-5-1-函数符概念" class="headerlink" title="16.5.1 函数符概念"></a>16.5.1 函数符概念</h3><ol><li><p>生成器是不用参数就可以调用的函数符，一元函数是用一个参数就可以调用的函数符，例如，for_each()是一元函数，因为它每次用于一个容器元素，返回bool值的一元函数是谓词</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">WorseThan</span><span class="params">(<span class="type">const</span> Review&amp; r1, <span class="type">const</span> Review&amp; r2)</span></span>;</span><br><span class="line"><span class="built_in">sort</span>(books.<span class="built_in">begin</span>(),books.<span class="built_in">end</span>(),WorseThan);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">tooBig</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;<span class="keyword">return</span> n &gt; <span class="number">100</span>;&#125;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; scores;</span><br><span class="line">scores.<span class="built_in">remove_if</span>(tooBig);      <span class="comment">//删除链表中所有大于100的元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">tooBig2</span><span class="params">(<span class="type">const</span> T &amp; val,<span class="type">const</span> T &amp; lim)</span>         <span class="comment">//可以将两个参数的模板函数转换为单个参数的函数对象</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val &gt; lim;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tempalte&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TooBig</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T cutoff;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TooBig</span>(<span class="type">const</span> T &amp; t) : <span class="built_in">cutoff</span>(t) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> &amp; v)</span></span>&#123;<span class="keyword">return</span> v &gt; cutoff;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TooBig&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">scores.<span class="built_in">remove_if</span>(p);                  <span class="comment">//直接使用类对象</span></span><br></pre></td></tr></table></figure><p>n的值来自链表中，设计一个TooBing类，来控制大于多少的元素将被删除</p></li><li><p>函数对象是一种适配器，使函数或类成员函数能够满足不同的接口(接口就是函数或类成员函数)</p></li></ol><h3 id="16-5-2-预定义的函数符"><a href="#16-5-2-预定义的函数符" class="headerlink" title="16.5.2 预定义的函数符"></a>16.5.2 预定义的函数符</h3><ol><li><p>STL定义了多个基本函数符，它们执行诸如将两个值相加，比较两个值是否相等操作，transform()有两个版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">transform</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v.<span class="built_in">begin</span>(),sqrt);         <span class="comment">//计算每个元素的平方根</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">transform</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v1.<span class="built_in">begin</span>(),v.<span class="built_in">begin</span>(),mean);      <span class="comment">//计算v所有元素和v1的第一个元素的平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">transform</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v1.<span class="built_in">begin</span>(),v.<span class="built_in">begin</span>(),<span class="built_in">plus</span>&lt;<span class="type">double</span>&gt;());     <span class="comment">//()可有可无，函数对象不会带参数的</span></span><br></pre></td></tr></table></figure><p>头文件functional定义了多个模板类函数对象，其中包括plus类</p></li><li><p>对于所有内置的算术运算符，关系运算符和逻辑运算符，STL都提供了函数对象，例如，+ plus<int>()和 - minus<int>()是两个函数对象</p></li></ol><h3 id="16-5-3-自适应函数符和函数适配器"><a href="#16-5-3-自适应函数符和函数适配器" class="headerlink" title="16.5.3 自适应函数符和函数适配器"></a>16.5.3 自适应函数符和函数适配器</h3><ol><li><p>表16.12列出的预定义函数符都是自适应的，函数符自适应性的意义在于：函数适配器对象可以使用函数对象，使函数能匹配不同的接口</p></li><li><p>函数适配器将接受两个参数的函数符转换为接受1个参数的函数符，前面的TooBig2示例提供了一种方法，但STL使用binder1st和binder2nd类自动完成这个过程，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">binder1st</span>(f2,val) f1;     <span class="comment">//f2是一个自适应二元函数</span></span><br></pre></td></tr></table></figure><p>f1对象将与f2的第一个参数val相关联</p></li><li><p>函数binder1st()与binder1st类的作用相同，binder2st，只是将常数赋给第二个参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">transform</span>(gr8.<span class="built_in">begin</span>(),gr8.<span class="built_in">end</span>(),out,<span class="built_in">bind1st</span>(<span class="built_in">multiplies</span>&lt;<span class="type">int</span>&gt;(),<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>将二元函数multiplies()转换为将参数乘以2的一元函数</p></li></ol><h2 id="16-6-算法"><a href="#16-6-算法" class="headerlink" title="16.6 算法"></a>16.6 算法</h2><ol><li><p>STL的非成员函数：sort(),copy(),find(),random_shuffle(),set_union(),set_intersection(),set_difference(),transform()，有些函数接受一个函数对象</p></li><li><p>统一的容器设计使得不同类型的容器之间具有明显的关系，例如可以使用copy()将vector对象中的值复制到list对象中，用&#x3D;&#x3D;来比较不同类型的容器，如deque和vector，之所以能这样做是容器都使用迭代器来提供访问容器中的数据</p></li></ol><h3 id="16-6-1-算法组"><a href="#16-6-1-算法组" class="headerlink" title="16.6.1 算法组"></a>16.6.1 算法组</h3><ol><li>通用数字运算的算法在头文件numeric中定义，vector最有可能使用这些操作的容器</li></ol><h3 id="16-6-2-算法的通用特征"><a href="#16-6-2-算法的通用特征" class="headerlink" title="16.6.2 算法的通用特征"></a>16.6.2 算法的通用特征</h3><ol><li><p>sort()的结果被存放在原始数据的位置上，copy()将结果发送到另一个位置，transform()可以以这两种方式完成工作</p></li><li><p>copy()的原型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">InputIterator</span>,<span class="keyword">class</span> <span class="title class_">OutputIterator</span>&gt;</span><br><span class="line"><span class="function">OutputIterator <span class="title">copy</span><span class="params">(InputIterator first,InputIterator last,OutputIterator result)</span></span>;</span><br></pre></td></tr></table></figure><p>这包含了两种迭代器</p></li><li><p>有些算法有两个版本：就地版本和复制版本，复制版本的名称将以_copy()结尾，将接受一个多的输出迭代器参数</p></li></ol><h1 id="第17章-泛型编程注意的事项"><a href="#第17章-泛型编程注意的事项" class="headerlink" title="第17章 泛型编程注意的事项"></a>第17章 泛型编程注意的事项</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Review</span> &#123;</span><br><span class="line">string title;</span><br><span class="line"><span class="type">int</span> rating;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FillReview</span><span class="params">(Review&amp; rr)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowReview</span><span class="params">(<span class="type">const</span> Review&amp; rr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;Review&gt; books;</span><br><span class="line">Review temp;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">FillReview</span>(temp))                                                 <span class="comment">//FillReview()函数的返回值为true或false</span></span><br><span class="line">books.<span class="built_in">push_back</span>(temp);                                               <span class="comment">//添加在后面</span></span><br><span class="line"><span class="type">int</span> num = books.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (num &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;You enter the following:\n&quot;</span> &lt;&lt; <span class="string">&quot;Rating Book\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line"><span class="built_in">ShowReview</span>(books[i]);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Reprising:\n&quot;</span> &lt;&lt; <span class="string">&quot;Rating book&quot;</span> &lt;&lt; endl;</span><br><span class="line">vector&lt;Review&gt;::iterator pr;</span><br><span class="line"><span class="keyword">for</span> (pr = books.<span class="built_in">begin</span>(); pr != books.<span class="built_in">end</span>(); pr++)</span><br><span class="line"><span class="built_in">ShowReview</span>(*pr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FillReview</span><span class="params">(Review&amp; rr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Enter book title: &quot;</span>;</span><br><span class="line"><span class="built_in">getline</span>(cin, rr.title);</span><br><span class="line"><span class="keyword">if</span> (rr.title == <span class="string">&quot;quit&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Enter book rating: &quot;</span>;</span><br><span class="line">cin &gt;&gt; rr.rating;</span><br><span class="line"><span class="keyword">if</span> (!cin)                                                                <span class="comment">//判断是否输入了</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">cin.<span class="built_in">get</span>();                                                               <span class="comment">//在连续输入时要考虑&quot;\n&quot;的存在</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowReview</span><span class="params">(<span class="type">const</span> Review&amp; rr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; rr.rating &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; rr.title &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>string对象初始化<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string s1[<span class="number">2</span>] = &#123;<span class="string">&quot;fsdaf&quot;</span>,<span class="string">&quot;ffsadfds&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">s2</span><span class="params">(<span class="number">4</span>)</span></span>;                                <span class="comment">//两个不同表示数组大小的方式</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> STL中的类，对象和通常函数都要处理空间名称</span><br><span class="line">```c++</span><br><span class="line"><span class="function">std::set&lt;std::string&gt; <span class="title">B</span><span class="params">(s2,s2+N)</span></span>;</span><br><span class="line"><span class="function">std::ostream_iterator&lt;std::string,<span class="type">char</span>&gt; <span class="title">out</span><span class="params">(std::cout,<span class="string">&quot; &quot;</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">copy</span>(B.<span class="built_in">begin</span>(),B.<span class="built_in">end</span>(),out);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2023/08/18/7/"/>
      <url>/2023/08/18/7/</url>
      
        <content type="html"><![CDATA[<p>#各种代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSons</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> data[MaxSize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    ElemType d;</span><br><span class="line">&#125; TupNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> tag;</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        ElemType data;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">lnode</span> *<span class="title">next</span>;</span></span><br><span class="line">    &#125; val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; GLNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> rows;</span><br><span class="line">    <span class="type">int</span> cols;</span><br><span class="line">    <span class="type">int</span> nums;</span><br><span class="line">    TupNode data[MaxSize];</span><br><span class="line">&#125; TSMatrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">linknode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">linknode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LinkStNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">snode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">snode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LinkStrNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> top1, top2;</span><br><span class="line">&#125; DStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">qnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">qnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; DataNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="type">int</span> parent;</span><br><span class="line">&#125; PTree[MaxSize];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataNode *front;</span><br><span class="line">    DataNode *rear;</span><br><span class="line">&#125; LinkQuNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125; BTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front, count;</span><br><span class="line">&#125; QuType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BTNode* data[MaxSize];</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">sons</span>[<span class="title">MaxSons</span>];</span></span><br><span class="line">&#125; TSonNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">hp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tnode</span> *<span class="title">vp</span>;</span></span><br><span class="line">&#125; TSBNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; DLinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node1</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; DList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> Row, Col;</span><br><span class="line">    ;</span><br><span class="line">    DList *next;</span><br><span class="line">&#125; HList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序表基本运算的实现</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList *L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatList</span><span class="params">(SqList *L, <span class="type">int</span> n, ElemType a[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(SqList *L)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListEmpty</span><span class="params">(SqList *L)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">GetList</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType *e)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SqList *L, ElemType e)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType e)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType *e)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delnodel</span><span class="params">(SqList *L, ElemType e)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delnode2</span><span class="params">(SqList *L, ElemType x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">partition1</span><span class="params">(SqList *L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">move2</span><span class="params">(SqList *l)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList *L)</span> <span class="comment">// 初始化线性表</span></span><br><span class="line">&#123;</span><br><span class="line">    L = (SqList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatList</span><span class="params">(SqList *L, <span class="type">int</span> n, ElemType a[])</span> <span class="comment">// 创建顺序表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    L = (SqList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[k] = a[i];</span><br><span class="line">        k++;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(SqList *L)</span> <span class="comment">// 销毁线性表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListEmpty</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (L-&gt;length == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">GetList</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType *e)</span> <span class="comment">// i是序号，按序号求线性表中的元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    *e = L-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SqList *L, ElemType e)</span> <span class="comment">// 按元素值查找</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; L-&gt;length &amp;&amp; L-&gt;data[i] != e)</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= L-&gt;length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType e)</span> <span class="comment">// 插入数据元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span> || L-&gt;length &gt;= MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = L-&gt;length; j &gt; i; j--)</span><br><span class="line">        L-&gt;data[j] = L-&gt;data[j - <span class="number">1</span>];</span><br><span class="line">    L-&gt;data[i - <span class="number">1</span>] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType *e)</span> <span class="comment">// 删除数据元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    *e = L-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &lt; L-&gt;length - <span class="number">1</span>; j++)</span><br><span class="line">        L-&gt;data[j] = L-&gt;data[j + <span class="number">1</span>];</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delnodel</span><span class="params">(SqList *L, ElemType e)</span> <span class="comment">// 删除L中所有值等于x的元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;data[i] != e)</span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[k] = L-&gt;data[i];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delnode2</span><span class="params">(SqList *L, ElemType x)</span> <span class="comment">// 删除L中所有值等于x的元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;data[i] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            L-&gt;data[i - k] = L-&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length = L-&gt;length - k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">partition1</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = L-&gt;length - <span class="number">1</span>;</span><br><span class="line">    ElemType base = L-&gt;data[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; L-&gt;data[j] &gt; base)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; L-&gt;data[i] &lt;= base)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            swap(L-&gt;data[i], L-&gt;data[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(L-&gt;data[<span class="number">0</span>], L-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">move2</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">-1</span>, j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; L-&gt;length; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;data[j] % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (i != j)</span><br><span class="line">                swap(L-&gt;data[i], L-&gt;data[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> no;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> depno;</span><br><span class="line">    <span class="type">float</span> salary;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line">Node *head = <span class="literal">NULL</span>; <span class="comment">// 链表的头节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件中读取职工记录并构建链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">buildList</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename)</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!file)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件 %s\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node *node = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fscanf</span>(file, <span class="string">&quot;%d %s %d %f&quot;</span>, &amp;node-&gt;no, node-&gt;name, &amp;node-&gt;depno, &amp;node-&gt;salary) == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        node-&gt;next = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(file);</span><br><span class="line">    node-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 添加一个尾节点作为链表的结束标志</span></span><br><span class="line">    head = node;       <span class="comment">// 设置头节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示所有职工记录</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayList</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *current = head;</span><br><span class="line">    <span class="keyword">while</span> (current)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;编号：%d，姓名：%s，部门号：%d，工资：%.2f\n&quot;</span>, current-&gt;no, current-&gt;name, current-&gt;depno, current-&gt;salary);</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按编号递增排序职工记录</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortByNo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *i, *j;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = head; i != <span class="literal">NULL</span> &amp;&amp; i-&gt;next != <span class="literal">NULL</span>; i = i-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i-&gt;next; j != <span class="literal">NULL</span> &amp;&amp; j-&gt;next != <span class="literal">NULL</span>; j = j-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i-&gt;no &gt; j-&gt;no)</span><br><span class="line">            &#123; <span class="comment">// 如果 i 的编号大于 j 的编号，交换 i 和 j 的位置</span></span><br><span class="line">                temp = i-&gt;no;</span><br><span class="line">                i-&gt;no = j-&gt;no;</span><br><span class="line">                j-&gt;no = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyList</span><span class="params">(LinkNode *L)</span> <span class="comment">// 销毁线性表</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *pre = L, *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pre);</span><br><span class="line">        pre = p;</span><br><span class="line">        p = pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pre);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListEmpty</span><span class="params">(LinkNode *L)</span> <span class="comment">// 求线性表的长度</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (L-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    LinkNode *p = L;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        n++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayList</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">GetElem</span><span class="params">(LinkNode *L, <span class="type">int</span> i, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkNode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(LinkNode *L, ElemType e)</span> <span class="comment">// 按元素值查找</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    LinkNode *p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkNode *L, <span class="type">int</span> i, ElemType e)</span> <span class="comment">// 插入数据元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkNode *p = L, *s;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(LinkNode *L, <span class="type">int</span> i, ElemType *e)</span> <span class="comment">// 删除数据元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    LinkNode *p = L, *q;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        e = q-&gt;data;</span><br><span class="line">        p-&gt;next = q-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">split</span><span class="params">(LinkNode *L, LinkNode *L1, LinkNode *L2)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *p = L-&gt;next, *q, *rl;</span><br><span class="line">    L1 = L;</span><br><span class="line">    rl = L1;</span><br><span class="line">    L2 = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    L2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rl-&gt;next = p;</span><br><span class="line">        rl = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        p-&gt;next = L2-&gt;next;</span><br><span class="line">        L2-&gt;next = p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    rl-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delmaxnode</span><span class="params">(LinkNode *L)</span> <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *p = L-&gt;next, *pre = L, *maxp = p, *maxpre = pre;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (maxp-&gt;data &lt; p-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            maxp = p;</span><br><span class="line">            maxpre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    maxpre-&gt;next = maxp-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(maxp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *p, *pre, *q;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    L-&gt;next-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        pre = L;</span><br><span class="line">        <span class="keyword">while</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;data &lt; p-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = pre-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = pre-&gt;next;</span><br><span class="line">        pre-&gt;next = p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatListF</span><span class="params">(DLinkNode *L, ElemType a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    DLinkNode *s;</span><br><span class="line">    L = (DLinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkNode));</span><br><span class="line">    L-&gt;prior = L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (DLinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkNode));</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        s-&gt;next = L-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            L-&gt;next-&gt;prior = s;</span><br><span class="line">        L-&gt;next = s;</span><br><span class="line">        s-&gt;prior = L;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatListR</span><span class="params">(DLinkNode *L, ElemType a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    DLinkNode *s, *r;</span><br><span class="line">    L = (DLinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkNode));</span><br><span class="line">    r = L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (DLinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkNode));</span><br><span class="line">        s-&gt;data = a[i];</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        s-&gt;prior = r;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(DLinkNode *L, <span class="type">int</span> i, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    DLinkNode *p, *s;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = (DLinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            p-&gt;next-&gt;prior = s;</span><br><span class="line">        p-&gt;next = s;</span><br><span class="line">        s-&gt;prior = p;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(DLinkNode *L, <span class="type">int</span> i, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    DLinkNode *p, *q;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        *e = q-&gt;data;</span><br><span class="line">        p-&gt;next = q-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            q-&gt;next-&gt;prior = p;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Symm</span><span class="params">(DLinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> same = <span class="number">1</span>;</span><br><span class="line">    DLinkNode *p = L-&gt;next;</span><br><span class="line">    DLinkNode *q = L-&gt;prior;</span><br><span class="line">    <span class="keyword">while</span> (same)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data != q-&gt;data)</span><br><span class="line">            same = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p = q-&gt;prior || p == q)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            q = q-&gt;prior;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> same;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatTable</span><span class="params">(HList *h)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    DList *r, *s;</span><br><span class="line">    h = (HList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HList));</span><br><span class="line">    h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;表的行数，列数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;h-&gt;Row, &amp;h-&gt;Col);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; h-&gt;Row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d行:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        s = (DList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DList));</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; h-&gt;Col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s-&gt;data[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            h-&gt;next = s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;next = s;</span><br><span class="line">        &#125;</span><br><span class="line">        r = s;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyTable</span><span class="params">(HList *h)</span></span><br><span class="line">&#123;</span><br><span class="line">    DList *pre = h-&gt;next, *p = pre-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pre);</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pre);</span><br><span class="line">    <span class="built_in">free</span>(h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(SqList *L, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; L-&gt;length &amp;&amp; L-&gt;data[i] &lt; e)</span><br><span class="line">        i++;</span><br><span class="line">    <span class="keyword">for</span> (j = L-&gt;length; j &gt; i; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[j] = L-&gt;data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data[i] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(LinkNode *L, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *pre = L, *p;</span><br><span class="line">    <span class="keyword">while</span> (pre-&gt;next != <span class="literal">NULL</span> &amp;&amp; pre-&gt;next-&gt;data &gt; e)</span><br><span class="line">        pre = pre-&gt;next;</span><br><span class="line">    p = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = pre-&gt;next;</span><br><span class="line">    pre-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UnionList</span><span class="params">(SqList *LA, SqList *LB, SqList *LC)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    LC = (SqList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqList));</span><br><span class="line">    LC-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; LA-&gt;length &amp;&amp; j &lt; LB-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (LA-&gt;data[i] &lt; LB-&gt;data[j])</span><br><span class="line">        &#123;</span><br><span class="line">            LC-&gt;data[k] = LA-&gt;data[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            LC-&gt;data[k] = LB-&gt;data[j];</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; LA-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        LC-&gt;data[k] = LA-&gt;data[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; LB-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        LC-&gt;data[k] = LB-&gt;data[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    LC-&gt;length = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Commnode</span><span class="params">(LinkNode *LA, LinkNode *LB, LinkNode *LC)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *pa = LA-&gt;next, *pb = LB-&gt;next, *pc = LC-&gt;next, *r, *q;</span><br><span class="line">    LA-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    r = LA;</span><br><span class="line">    <span class="keyword">while</span> (pa != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (pb != <span class="literal">NULL</span> &amp;&amp; pb-&gt;data &gt; pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (pc != <span class="literal">NULL</span> &amp;&amp; pc-&gt;data &gt; pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            pc = pc-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pb != <span class="literal">NULL</span> &amp;&amp; pc != <span class="literal">NULL</span> &amp;&amp; pb-&gt;data == pa-&gt;data &amp;&amp; pc-&gt;data == pa-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            r-&gt;next = pa;</span><br><span class="line">            r = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dels</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *p = L-&gt;next, *q;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;data == p-&gt;next-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            q = p-&gt;next;</span><br><span class="line">            p = q-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    s = (SqStack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqStack));</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Destory</span><span class="params">(SqStack *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">StackEmpty</span><span class="params">(SqStack *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (s-&gt;top == <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack *s, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;top == MaxSize - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s-&gt;top++;</span><br><span class="line">    s-&gt;data[s-&gt;top] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack *s, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    *e = s-&gt;data[s-&gt;top];</span><br><span class="line">    s-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">GetTop</span><span class="params">(SqStack *s, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    *e = s-&gt;data[s-&gt;top];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">symmetry</span><span class="params">(ElemType str[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    SqStack *s;</span><br><span class="line">    InitStack(s);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(s, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Pop(s, &amp;e);</span><br><span class="line">        <span class="keyword">if</span> (e != str[i])</span><br><span class="line">        &#123;</span><br><span class="line">            DestoryStack(s);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DestoryStack(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(LinkStNode *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    s = (LinkStNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkStNode));</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyStack</span><span class="params">(LinkStNode *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkStNode *pre = s, *p = pre-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(pre);</span><br><span class="line">        pre = p;</span><br><span class="line">        p = pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(pre);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(LinkStNode *s, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkStNode *p;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    p = s-&gt;next;</span><br><span class="line">    *e = p-&gt;data;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Match</span><span class="params">(<span class="type">char</span> <span class="built_in">exp</span>[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> e;</span><br><span class="line">    <span class="type">bool</span> match = <span class="number">1</span>;</span><br><span class="line">    LinkStNode *st;</span><br><span class="line">    InitStack(st);</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n &amp;&amp; match)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">exp</span>[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            Push(st, <span class="built_in">exp</span>[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span>[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (GetTop(st, &amp;e) == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (e != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                    match = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    Pop(st, &amp;e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                match = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StackEmpty(st))</span><br><span class="line">        match = <span class="number">0</span>;</span><br><span class="line">    DestroyStack(st);</span><br><span class="line">    <span class="keyword">return</span> match;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    q = (SqQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqQueue));</span><br><span class="line">    q-&gt;front = q-&gt;rear = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyQueue</span><span class="params">(SqQueue *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">QueueEmpty</span><span class="params">(SqQueue *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> q-&gt;front == q-&gt;rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">enQueue</span><span class="params">(SqQueue *q, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;rear == MaxSize - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;rear++;</span><br><span class="line">    q-&gt;data[q-&gt;rear] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">deQueue</span><span class="params">(SqQueue *q, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front == q-&gt;rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;front++;</span><br><span class="line">    e = q-&gt;data[q-&gt;front];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    q = (SqQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqQueue));</span><br><span class="line">    q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">enQueue</span><span class="params">(SqQueue *q, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % MaxSize == q-&gt;front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    q-&gt;data[q-&gt;rear] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">deQueue</span><span class="params">(SqQueue *q, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front == q-&gt;rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    *e = q-&gt;data[q-&gt;front];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Count</span><span class="params">(SqQueue *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (q-&gt;rear - q-&gt;front + MaxSize) % MaxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">enQueue</span><span class="params">(QuType *qu, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rear;</span><br><span class="line">    <span class="keyword">if</span> (qu-&gt;count == MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    rear = (qu-&gt;front + qu-&gt;count) % MaxSize;</span><br><span class="line">    qu-&gt;data[rear] = e;</span><br><span class="line">    qu-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeQueue</span><span class="params">(QuType *qu, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (qu-&gt;count == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        qu-&gt;front = (qu-&gt;front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">        *e = qu-&gt;data[qu-&gt;front];</span><br><span class="line">        qu-&gt;count--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQuNode *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    q = (LinkQuNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQuNode));</span><br><span class="line">    q-&gt;front = q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DestroyQueue</span><span class="params">(LinkQuNode *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataNode *pre = q-&gt;front, *p = pre-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (pre != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">free</span>(pre);</span><br><span class="line">            pre = p;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(pre);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">QueueEmpty</span><span class="params">(LinkQuNode *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (q-&gt;rear == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">enQueue</span><span class="params">(LinkQuNode *q, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataNode *p;</span><br><span class="line">    p = (DataNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DataNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;rear = <span class="literal">NULL</span>)</span><br><span class="line">        q-&gt;front = q-&gt;rear = p;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;rear-&gt;next = p;</span><br><span class="line">        q-&gt;rear = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deQueue</span><span class="params">(LinkQuNode *q, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataNode *t;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;rear == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    t = q-&gt;front;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front == q-&gt;rear)</span><br><span class="line">        q-&gt;front = q-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;front = q-&gt;front-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    e = t-&gt;data;</span><br><span class="line">    <span class="built_in">free</span>(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initQueue</span><span class="params">(LinkNode *rear)</span></span><br><span class="line">&#123;</span><br><span class="line">    rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">enQueue</span><span class="params">(LinkNode *rear, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *p;</span><br><span class="line">    p = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    <span class="keyword">if</span> (rear == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;next = p;</span><br><span class="line">        rear = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;next = rear-&gt;next;</span><br><span class="line">        rear-&gt;next = p;</span><br><span class="line">        rear = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">deQueue</span><span class="params">(LinkNode *rear, ElemType *e)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkNode *t;</span><br><span class="line">    <span class="keyword">if</span> (rear == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rear-&gt;next = rear)</span><br><span class="line">    &#123;</span><br><span class="line">        e = rear-&gt;data;</span><br><span class="line">        <span class="built_in">free</span>(rear);</span><br><span class="line">        rear = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        t = rear-&gt;next;</span><br><span class="line">        e = t-&gt;data;</span><br><span class="line">        rear-&gt;next = t-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">queueEmpty</span><span class="params">(LinkNode *rear)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (rear == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">number</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    SqQueue *q;</span><br><span class="line">    InitQueue(q);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        enQueue(q, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;报数出列顺序：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (!QueueEmpty(q))</span><br><span class="line">    &#123;</span><br><span class="line">        deQueue(q, e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, &amp;e);</span><br><span class="line">        <span class="keyword">if</span> (!QueueEmpty(q))</span><br><span class="line">        &#123;</span><br><span class="line">            deQueue(q, e);</span><br><span class="line">            enQueue(q, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    DestroyQueue(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">deQueue1</span><span class="params">(SqQueue *q, ElemType &amp;e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (q-&gt;front == q-&gt;rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    *e = q-&gt;data[q-&gt;rear];</span><br><span class="line">    q-&gt;rear = (q-&gt;rear - <span class="number">1</span> + MaxSize) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">enQueue</span><span class="params">(SqQueue *q, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % MaxSize == q-&gt;front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;data[q-&gt;front] = e;</span><br><span class="line">    q-&gt;front = (q-&gt;front - <span class="number">1</span> + MaxSize) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SqString <span class="title function_">InsStr</span><span class="params">(SqString s1, SqString s2, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    SqString str;</span><br><span class="line">    str.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; str.length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++)</span><br><span class="line">        str.data[j] = s1.data[j];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; s2.length - <span class="number">1</span>; j++)</span><br><span class="line">        str.data[i - <span class="number">1</span> + j] = s2.data[j];</span><br><span class="line">    <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &lt; s1.length)</span><br><span class="line">        str.data[s2.length + j] = s1.data[j];</span><br><span class="line">    str.length = s1.length + s2.length;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Strcmp</span><span class="params">(SqString s, SqString t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, comlen;</span><br><span class="line">    <span class="keyword">if</span> (s.length &gt; t.length)</span><br><span class="line">        comlen = t.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        comlen = s.length;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; comlen - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.data[i] &gt; t.data[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.data[i] &lt; t.data[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.length == t.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (s.length &gt; t.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LongestString</span><span class="params">(SqString s, <span class="type">int</span> &amp;maxlen, <span class="type">int</span> &amp;index)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> length, i = <span class="number">1</span>, start;</span><br><span class="line">    <span class="type">int</span> *index = <span class="number">0</span>, *maxlen = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length)</span><br><span class="line">    &#123;</span><br><span class="line">        start = i - <span class="number">1</span>;</span><br><span class="line">        length = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length &amp;&amp; s.data[i] == s.data[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxlen &lt; length)</span><br><span class="line">        &#123;</span><br><span class="line">            maxlen = length;</span><br><span class="line">            index = start;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkStrNode *<span class="title function_">SubStr</span><span class="params">(LinkStrNode *s, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    LinkStrNode *str, *p = s-&gt;next, *q, *r;</span><br><span class="line">    str = (LinkStrNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkStrNode));</span><br><span class="line">    str-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">    r = str;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">0</span> || i &gt; StrLength(s) || j &lt;= <span class="number">0</span> || i + j - <span class="number">1</span> &gt; StrLength(s))</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; i; k++)</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= j; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        q = (LinkStrNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkStrNode));</span><br><span class="line">        q-&gt;data = p-&gt;data;</span><br><span class="line">        r-&gt;next = q;</span><br><span class="line">        r = q;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">BF</span><span class="params">(SqString s, SqString t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length &amp;&amp; j &lt; t.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.data[i] == t.data[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = i - j + <span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt;= t.length)</span><br><span class="line">        <span class="keyword">return</span> (i - t.length);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Fib1</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> Fib1(n - <span class="number">1</span>) + Fib1(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sum</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (L-&gt;data + Sum(L-&gt;next));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Hanoil</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> X, <span class="type">char</span> Y, <span class="type">char</span> Z)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t将第%d个盘片从%c移动到%c\n&quot;</span>, n, X, Z);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Hanoil(n - <span class="number">1</span>, X, Z, Y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t将第%d个盘片从%c移动到%c\n&quot;</span>, n, X, Z);</span><br><span class="line">        Hanoil(n - <span class="number">1</span>, Y, X, Z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Min</span><span class="params">(<span class="type">double</span> A[], <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> min;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        min = Min(A, i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (min &gt; A[i])</span><br><span class="line">            <span class="keyword">return</span> A[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElemType <span class="title function_">Max1</span><span class="params">(SqList L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType max;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> L.data[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        max = Max1(L, i - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (max &gt; L.data[i])</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> L.data[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">release</span><span class="params">(LinkNode *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (L != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        release(L-&gt;next);</span><br><span class="line">        <span class="built_in">free</span>(L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">josephus</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p[MaxSize];</span><br><span class="line">    <span class="type">int</span> i, j, t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        p[i] = i + <span class="number">1</span>;</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;出列顺序：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        t = (t + m - <span class="number">1</span>) % i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p[t]);</span><br><span class="line">        <span class="keyword">for</span> (j = t + <span class="number">1</span>; j &lt;= i - <span class="number">1</span>; j++)</span><br><span class="line">            p[j - <span class="number">1</span>] = p[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatMat</span><span class="params">(TSMatrix *t, ElemType *A)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    t-&gt;rows = <span class="number">10</span>, t-&gt;cols = <span class="number">10</span>, t-&gt;nums = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                t-&gt;data[t-&gt;nums].r = i;</span><br><span class="line">                t-&gt;data[t-&gt;nums].c = j;</span><br><span class="line">                t-&gt;data[t-&gt;nums].d = A[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Value</span><span class="params">(TSMatrix &amp;t, ElemType x, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, k1;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= t.rows || j &gt;= t.cols)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; t.nums &amp;&amp; t.data[k].r &lt; i)</span><br><span class="line">        k++;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; t.nums &amp;&amp; t.data[k].c &lt; j &amp;&amp; t.data[k].r == i)</span><br><span class="line">        k++;</span><br><span class="line">    <span class="keyword">if</span> (t.data[k].r == i &amp;&amp; t.data[k].c == j)</span><br><span class="line">        t.data[k].d = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (k1 = t.nums - <span class="number">1</span>; k1 &gt;= k; k1--)</span><br><span class="line">        &#123;</span><br><span class="line">            t.data[k1 + <span class="number">1</span>].r = t.data[k1].r;</span><br><span class="line">            t.data[k1 + <span class="number">1</span>].c = t.data[k1].c;</span><br><span class="line">            t.data[k1 + <span class="number">1</span>].d = t.data[k1].d;</span><br><span class="line">        &#125;</span><br><span class="line">        t.data[k].d = x;</span><br><span class="line">        t.data[k].r = i;</span><br><span class="line">        t.data[k].c = j;</span><br><span class="line">        t.nums++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Assign</span><span class="params">(TSMatrix t, ElemType &amp;x,<span class="type">int</span> i,<span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=t.rows||j&gt;=t.cols)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(k&lt;t.nums&amp;&amp;i&gt;t.data[k].r)</span><br><span class="line">        k++;</span><br><span class="line">    <span class="keyword">while</span>(k&lt;t.nums&amp;&amp;i==t.data[k].r&amp;&amp;j&gt;t.data[k].c)</span><br><span class="line">        k++;</span><br><span class="line">    <span class="keyword">if</span>(t.data[k].r==i&amp;&amp;t.data[k].c==j)</span><br><span class="line">    &#123;</span><br><span class="line">        x = t.data[k].d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DispMat</span><span class="params">(TSMatrix t)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(t.nums&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t%d\t%d\t%d\n&quot;</span>, t.rows, t.cols, t.nums);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t----------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; t.nums;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%d\t%d\t%d\n&quot;</span>, t.data[k].r, t.data[k].c, t.data[k].d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TranTat</span><span class="params">(TSMatrix t,TSMatrix,&amp;tb)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> k, k1 = <span class="number">0</span>,v;</span><br><span class="line">    tb.nums = t.nums, tb.rows = t.cols, tb.cols = t.rows;</span><br><span class="line">    <span class="keyword">if</span>(t.nums!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (v = <span class="number">0</span>; v &lt; t.cols;v++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; t.nums;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(t.data[k].c==v)</span><br><span class="line">                &#123;</span><br><span class="line">                    tb.data[k1].r = t.data[k].c;</span><br><span class="line">                    tb.data[k1].c = t.data[k].r;</span><br><span class="line">                    tb.data[k1].d = t.data[k].d;</span><br><span class="line">                    k1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">TreeHeight1</span><span class="params">(TSonNode *t)</span></span><br><span class="line">&#123;</span><br><span class="line">    TSonNode *p;</span><br><span class="line">    <span class="type">int</span> i, h, maxh = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MaxSons;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p=t-&gt;sons[i];</span><br><span class="line">            <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                h = TreeHeight1(p);</span><br><span class="line">                <span class="keyword">if</span>(maxh&lt;h)</span><br><span class="line">                    maxh = h;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxh + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                                         </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">TreeHeight2</span><span class="params">(TSBNode *t)</span></span><br><span class="line">&#123;</span><br><span class="line">    TSBNode *p;</span><br><span class="line">    <span class="type">int</span> h, maxh=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;vp;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            h=TreeHeight2(p);</span><br><span class="line">            <span class="keyword">if</span>(h&gt;maxh)</span><br><span class="line">                maxh = h;</span><br><span class="line">            p = p-&gt;hp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (maxh+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatBTree</span><span class="params">(BTNode *&amp;b,<span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    BTNode *p, St[MaxSize];</span><br><span class="line">    <span class="type">int</span> top = <span class="number">-1</span>,k,j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    b = <span class="literal">NULL</span>;</span><br><span class="line">    ch=str[j];</span><br><span class="line">    <span class="keyword">while</span>(ch!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                top++;</span><br><span class="line">                St[top] = p;</span><br><span class="line">                k = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                top--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                k = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                p=(BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));</span><br><span class="line">                p-&gt;data = ch;</span><br><span class="line">                p-&gt;lchild = p-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">                <span class="keyword">if</span>(b==<span class="literal">NULL</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    b = p;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">switch</span>(k)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            St[top]-&gt;lchild = p;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            St[top]-&gt;rchild = p;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        ch = str[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DestroyBTree(BTNode *b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(b!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DestroyBTree(b-&gt;lchild);</span><br><span class="line">        DestroyBTree(b-&gt;rchild);</span><br><span class="line">        <span class="built_in">free</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTNode *<span class="title function_">FindNode</span><span class="params">(BTNode *b,ElemType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    BTNode *p;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b-&gt;data==x)</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=FindNode(b-&gt;lchild,x);</span><br><span class="line">        <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> FindNode(b-&gt;rchild,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">BTHeight</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> lchildh, rchildh;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        lchildh = BTHeight(b-&gt;lchild);</span><br><span class="line">        rchildh = BTHeight(b-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> (lchildh &gt; rchildh) ? (lchildh + <span class="number">1</span>) : (rchildh + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">DispBTree</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(b!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,b-&gt;data);</span><br><span class="line">        <span class="keyword">if</span> (b-&gt;lchild!=<span class="literal">NULL</span>||b-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            DispBTree(b-&gt;lchild);</span><br><span class="line">            <span class="keyword">if</span>(b-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            DispBTree(b-&gt;rchild);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(b!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,b-&gt;data);</span><br><span class="line">        PreOrder(b-&gt;lchild);</span><br><span class="line">        PreOrder(b-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrder</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(b!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inOrder(b-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, b-&gt;data);</span><br><span class="line">        inOrder(b-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(b!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrder(b -&gt; lchild);</span><br><span class="line">        PostOrder(b -&gt; rchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, b-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Nodes</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Nodes(b-&gt;lchild)+Nodes(b-&gt;rchild)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DispLeaf</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(b!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;b-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,b-&gt;data);</span><br><span class="line">        DispLeaf(b-&gt;lchild);</span><br><span class="line">        DispLeaf(b-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    BTNode *p;</span><br><span class="line">    SqQueue *qu;</span><br><span class="line">    InitQueue(qu);</span><br><span class="line">    enQueue(qu,b-&gt;data);</span><br><span class="line">    <span class="keyword">while</span>(!QueueEmpty(qu))</span><br><span class="line">    &#123;</span><br><span class="line">        deQueue(qu, p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">            enQueue(qu, p-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">            enQueue(qu,p-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">    DestroyQueue(qu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BTNode *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    BTNode *p;</span><br><span class="line">    SqQueue *qu;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LIBRARY IEEE;<br>USE</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown</title>
      <link href="/2023/08/17/8/"/>
      <url>/2023/08/17/8/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown总结"><a href="#Markdown总结" class="headerlink" title="Markdown总结"></a>Markdown总结</h1><h2 id="一、Markdown常用语法😀"><a href="#一、Markdown常用语法😀" class="headerlink" title="一、Markdown常用语法😀"></a>一、Markdown常用语法😀</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#文字样式</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line">&#123;% span red, 红色 %&#125;    #彩色文字</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;    #超大号文字</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">#本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">#在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">#表格</span></span><br><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br><span class="line"></span><br><span class="line"><span class="section">#键盘样式的文本</span></span><br><span class="line">&#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">#密码样式的文本</span></span><br><span class="line">&#123;% psw 这里没有验证码 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">#折叠框</span></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"><span class="bullet">-</span> 我</span><br><span class="line"><span class="bullet">-</span> 你</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">#分栏</span></span><br><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第二个Tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第三个Tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">#音频</span></span><br><span class="line">&#123;% audio 音频链接 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">#单张图片</span></span><br><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br><span class="line"><span class="section">#视频</span></span><br><span class="line">&#123;% video 视频链接 %&#125;</span><br><span class="line"><span class="section">#隐藏块</span></span><br><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><h2 id="二、分栏举例😂"><a href="#二、分栏举例😂" class="headerlink" title="二、分栏举例😂"></a>二、分栏举例😂</h2><ol><li>红框+链接<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">源码</button></li><li class="tab"><button type="button" data-href="#test1-2">演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><table><tr><td bgcolor=MistyRose><p><a href="https://www.baidu.com/">百度</a></p></td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div></li></ol><h2 id="三、应用实列😊"><a href="#三、应用实列😊" class="headerlink" title="三、应用实列😊"></a>三、应用实列😊</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><table><tr><td bgcolor=MistyRose>随着交通工具普及，道路交通事故频发，威胁人们的生命和财产安全。基于北斗的智慧行车安全预警系统是一种智能驾驶辅助系统，通过车联网和人工智能技术提供实时监测和预警服务，以降低道路交通事故发生率，提高行驶安全性和舒适度。</td></tr></table><h3 id="2-系统框架"><a href="#2-系统框架" class="headerlink" title="2. 系统框架"></a>2. 系统框架</h3><p><strong>基于北斗的智慧行车安全预警系统的框架包括以下部分：</strong></p><ol><li>车辆本身对车辆信息的监控：每辆车搭载北斗卫星定位设备，实时上传车辆位置、速度、状态等信息到平台。</li><li>车辆信息监控异常数据共享：平台共享车辆信息，识别异常数据，并通过车载终端及时提醒周边车辆。</li><li>预判前方突发情况提前预警：利用道路监控摄像头、雷达等设备获取前方道路情况和历史数据分析，提前判断可能发生的异常情况，并进行预警提示，如前方车道堵塞等。</li><li>预判周边车辆预警提示：通过北斗卫星精准定位周边车辆位置，预测周边车辆的行驶意向，提前提示可能发生的危险。</li><li>预判前后车辆密度情况：根据车辆行驶速度等数据，计算并预判周边车辆密度，及时调整车速、车道等策略，避免交通事故的发生。</li><li>紧急救援避让预警：发现救援车辆时，通知周边车辆避让，以便救援车辆快速应对事故现场。</li><li>紧急报警、位置同步、救援措施：当车辆遭遇紧急情况，如故障或被劫持，车载终端发出紧急报警信号，平台接收报警后查看车辆位置并采取救援措施。</li></ol><h3 id="3-应用场景与技术整合"><a href="#3-应用场景与技术整合" class="headerlink" title="3. 应用场景与技术整合"></a>3. 应用场景与技术整合</h3><p><strong>智慧行车安全预警系统可广泛应用于不同场景和车辆类型，并与其他先进技术整合，提高系统的智能水平和实用性。</strong></p><ul><li>城市交通：实时监测周边车辆信息，预判交通状况，提供安全驾驶建议，降低交通事故概率。</li><li>高速公路：通过监测车辆信息，预判前方道路状况，提醒驾驶员注意安全，避免追尾事故等。</li><li>乡村道路：根据实时道路信息，为驾驶员提供行驶建议，提高乡村道路行驶安全性。</li><li>不同类型车辆：适用于私家车、公交车、货车等各类型车辆，提供定制化的安全驾驶服务。</li><li>技术整合方面：<ul><li>自动驾驶：与自动驾驶技术结合，实现车辆的自主驾驶，提高安全性和舒适度。</li><li>车联网：通过车联网技术实现车辆之间的信息互联互通，提升道路交通智能化水平。</li><li>人工智能：利用人工智能技术分析车辆数据，为驾驶员提供精准的安全驾驶建议。</li></ul></li></ul><h3 id="4-用户体验与社会影响"><a href="#4-用户体验与社会影响" class="headerlink" title="4. 用户体验与社会影响"></a>4. 用户体验与社会影响</h3><ul><li>安全感：提高驾驶员的安全感，降低交通事故发生概率。</li><li>舒适度：通过实时监测和预警，提高驾驶员应对复杂道路状况的能力，提升行驶舒适度。</li><li>简化操作：系统提供实时建议，简化驾驶操作，使驾驶更轻松。</li><li>减少交通事故：通过实时监测和预警，降低交通事故发生率，确保行驶安全。</li><li>缓解交通拥堵：预判交通状况，引导驾驶员选择合适的路线，有效缓解交通拥堵。</li><li>降低能耗和排放：提供合理的行驶建议，帮助驾驶员更节能地驾驶，降低能耗和排放。</li></ul><h3 id="5-商业模"><a href="#5-商业模" class="headerlink" title="5. 商业模"></a>5. 商业模</h3><ul><li>合作伙伴：与汽车制造商、北斗卫星定位服务提供商、道路监控设备供应商建立合作关系，共同推广系统。</li><li>盈利模式：通过向汽车制造商提供系统集成服务、向车主提供增值服务等方式盈利。</li><li>市场推广：通过广告宣传、线上线下活动等提高系统的知名度和认可度。</li></ul><h3 id="6-结论"><a href="#6-结论" class="headerlink" title="6. 结论"></a>6. 结论</h3><p><strong>基于北斗的智慧行车安全预警系统具有重要它能够提高道路行驶的安全性和舒适度，通过实时监测和预警服务，有效降低道路交通事故发生率。</strong></p><h2 id="四、注意事项😁"><a href="#四、注意事项😁" class="headerlink" title="四、注意事项😁"></a>四、注意事项😁</h2><table><tr><td bgcolor=MistyRose>1. 前面多出来的的空格对文本没有影响。<br>2. 文本的符号要用中文。<br>3. 语法结合使用的时候注意使用空格。<br>4. markdown语法只能表示分支关系，无法表示合并与递进关系。</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode</title>
      <link href="/2023/08/15/3/"/>
      <url>/2023/08/15/3/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是本人在7个月刷了500道Leetcode题目并成功拿到几家北美Software Engineer Offer之后总结的Leetcode高频面试题目分类总结。这篇是高频题目的概述性总结，以后有时间打算单独给每个门类写一个详细的总结。希望对准备刷题面试的你有所帮助吧，谢谢！</p><p>这里还有一篇我写的关于码农算法面试的Q&amp;A:</p><p><a href="https://zhuanlan.zhihu.com/p/495605771">TimothyL：北美码农算法面试Q&amp;A56 赞同 · 7 评论文章</a></p><p>注：本文一共200多道题，算上一些附加的衍生题差不多有250+，基本上很少有easy题目，大部分都是medium，少部分hard，按照大多数人30% Easy，60% Medium， 10% Hard的刷题标准，刷好下面全部的题目相当于300题，足够应对大部分的算法面试了。如果你对<a href="https://zhida.zhihu.com/search?q=%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&zhida_source=entity&is_preview=1">算法与数据结构</a>基础知识掌握的不够的情况下，先按照上面链接提到的基础补好再开始刷对应门类的题目，不然很容易“一个人一包烟，一道题目刷一天”。</p><p>注：作者后来在北美各个大厂几乎全部面过，G家 A家 U家之类的大厂offer也都拿到过，可以确定刷好本文中的所有题以及掌握每道题对应知识点可以应对绝大多数的码农算法面试了。</p><p>如果题目&#x2F;答案看不懂又不喜欢看<a href="https://zhida.zhihu.com/search?q=discussion&zhida_source=entity&is_preview=1">discussion</a>的话，现在有很多视频资源可以看。个人比较喜欢花花酱的讲解（<a href="https://link.zhihu.com/?target=https://space.bilibili.com/9880352?spm_id_from=333.788.b_765f7570696e666f.1">花花酱的表世界的个人空间_哔哩哔哩_Bilibili</a>）， 墙外的同学们也可以看<a href="https://zhida.zhihu.com/search?q=%E5%85%B3%E7%A5%9E&zhida_source=entity&is_preview=1">关神</a>的视频讲解（<a href="https://link.zhihu.com/?target=https://www.youtube.com/channel/UCY5Z0of98W-YSdmPgAe1DaA">https://www.youtube.com/channel/UCY5Z0of98W-YSdmPgAe1DaA</a>）。</p><p><strong>不建议刷的题目类型：</strong></p><ul><li>非高频的hard题目，费时费力又很难在面试中遇到，性价比太低。</li><li><a href="https://zhida.zhihu.com/search?q=%E8%B4%AA%E5%BF%83%E6%B3%95&zhida_source=entity&is_preview=1">贪心法</a>题目，每道题都不一样，解法没有通用性。</li></ul><hr><p>以下8个门类是面试中最常考的算法与数据结构知识点。</p><h2 id="排序类（Sort）："><a href="#排序类（Sort）：" class="headerlink" title="排序类（Sort）："></a>排序类（Sort）：</h2><ul><li><p>基础知识：<a href="https://zhida.zhihu.com/search?q=%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&zhida_source=entity&is_preview=1">快速排序</a>（Quick Sort）， <a href="https://zhida.zhihu.com/search?q=%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F&zhida_source=entity&is_preview=1">归并排序</a>（Merge Sort）的原理与代码实现。需要能讲明白代码中每一行的目的。快速排序<a href="https://zhida.zhihu.com/search?q=%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&zhida_source=entity&is_preview=1">时间复杂度</a>平均状态下O（NlogN），空间复杂度O（1），归并排序最坏情况下时间复杂度O（NlogN），<a href="https://zhida.zhihu.com/search?q=%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&zhida_source=entity&is_preview=1">空间复杂度</a>O（N）</p></li><li><p>入门题目：</p></li><li><ul><li>Leetcode 148. Sort List<ul><li>Leetcode 56. Merge Intervals</li><li>Leetcode 27. Remove elements</li></ul></li></ul></li><li><p>进阶题目：</p></li><li><ul><li>Leetcode 179. Largest Number<ul><li>Leetcode 75. Sort Colors</li><li>Leetcode 215. Kth Largest Element （可以用堆的解法替代）</li><li>Leetcode 4. Median of Two Sorted Arrays</li></ul></li></ul></li></ul><p>注意：后两题是与快速排序非常相似的快速选择（Quick Select）算法，面试中很常考</p><h2 id="链表类（Linked-List）："><a href="#链表类（Linked-List）：" class="headerlink" title="链表类（Linked List）："></a>链表类（Linked List）：</h2><ul><li><p>基础知识：链表如何实现，如何遍历链表。链表可以保证头部尾部插入删除操作都是O（1），查找任意元素位置O（N）</p></li><li><p>基础题目：</p></li><li><ul><li>Leetcode 206. Reverse Linked List<ul><li>Leetcode 876. Middle of the Linked List</li></ul></li></ul></li></ul><p>注意：<a href="https://zhida.zhihu.com/search?q=%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88&zhida_source=entity&is_preview=1">快慢指针</a>和链表反转几乎是所有链表类问题的基础，尤其是<a href="https://zhida.zhihu.com/search?q=%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8&zhida_source=entity&is_preview=1">反转链表</a>，代码很短，建议直接背熟。</p><ul><li><p>进阶题目:</p></li><li><ul><li>Leetcode 160. Intersection of Two Linked Lists<ul><li>Leetcode 141. Linked List Cycle (Linked List Cycle II)</li><li>Leetcode 92. Reverse Linked List II</li><li>Leetcode 328. Odd Even Linked List</li></ul></li></ul></li></ul><h2 id="堆（Heap-or-Priority-Queue）、栈（Stack）、队列（Queue）、哈希表类（Hashmap、Hashset）："><a href="#堆（Heap-or-Priority-Queue）、栈（Stack）、队列（Queue）、哈希表类（Hashmap、Hashset）：" class="headerlink" title="堆（Heap or Priority Queue）、栈（Stack）、队列（Queue）、哈希表类（Hashmap、Hashset）："></a>堆（Heap or Priority Queue）、栈（Stack）、队列（Queue）、哈希表类（Hashmap、Hashset）：</h2><ul><li><p>基础知识：各个数据结构的基本原理，<a href="https://zhida.zhihu.com/search?q=%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9&zhida_source=entity&is_preview=1">增删查改</a>复杂度。</p></li><li><p>Queue题目：</p></li><li><ul><li>Leetcode 225. Implement Stack using Queues<ul><li>Leetcode 346. Moving Average from Data Stream</li><li>Leetcode 281. Zigzag Iterator</li><li>Leetcode 1429. First Unique Number</li><li>Leetcode 54. Spiral Matrix</li><li>Leetcode 362. Design Hit Counter</li></ul></li></ul></li><li><p>Stack题目：</p></li><li><ul><li>Leetcode 155. Min Stack (follow up Leetcode 716 Max Stack)<ul><li>Leetcode 232. Implement Queue using Stacks</li><li>Leetcode 150. Evaluate Reverse Polish Notation</li><li>Leetcode 224. Basic Calculator II (I, II, III, IV)</li><li>Leetcode 20. Valid Parentheses</li><li>Leetcode 1472. Design Browser History</li><li>Leetcode 1209. Remove All Adjacent Duplicates in String II</li><li>Leetcode 1249. Minimum Remove to Make Valid Parentheses</li><li>Leetcode 735. Asteroid Collision</li></ul></li></ul></li><li><p>Hashmap&#x2F; Hashset题目：</p></li><li><ul><li>Leetcode 1. Two Sum<ul><li>Leetcode 146. LRU Cache (Python中可以使用OrderedDict来代替)</li><li>Leetcode 128. Longest Consecutive Sequence</li><li>Leetcode 73. Set Matrix Zeroes</li><li>Leetcode 380. Insert Delete GetRandom O(1)</li><li>Leetcode 49. Group Anagrams</li><li>Leetcode 350. Intersection of Two Arrays II</li><li>Leetcode 299. Bulls and Cows</li><li>Leetcode 348 Design Tic-Tac-Toe</li></ul></li></ul></li><li><p>Heap／Priority Queue题目：</p></li><li><ul><li>Leetcode 973. K Closest Points<ul><li>Leetcode 347. Top k Largest Elements</li><li>Leetcode 23. Merge K Sorted Lists</li><li>Leetcode 264. Ugly Number II</li><li>Leetcode 1086. High Five</li><li>Leetcode 88. Merge Sorted Arrays</li><li>Leetcode 692. Top K Frequent Words</li><li>Leetcode 378. Kth Smallest Element in a Sorted Matrix</li><li>Leetcode 295. Find Median from Data Stream （标准解法是双<a href="https://zhida.zhihu.com/search?q=heap&zhida_source=entity&is_preview=1">heap</a>，但是SortedDict会非常容易）</li><li>Leetcode 767. Reorganize String</li><li>Leetcode 1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit (这个题用<a href="https://zhida.zhihu.com/search?q=%E5%8D%95%E8%B0%83%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97&zhida_source=entity&is_preview=1">单调双端队列</a>、TreeMap、双heap都可以)</li><li>Leetcode 895. Maximum Frequency Stack</li></ul></li></ul></li></ul><h2 id="二分法（Binary-Search）："><a href="#二分法（Binary-Search）：" class="headerlink" title="二分法（Binary Search）："></a>二分法（Binary Search）：</h2><ul><li><p>基础知识：二分法是用来解法基本模板，时间复杂度logN；常见的二分法题目可以分为两大类，显式与隐式，即是否能从字面上一眼看出二分法的特点：要查找的数据是否可以分为两部分，前半部分为X，后半部分为O</p></li><li><p><a href="https://zhida.zhihu.com/search?q=%E6%98%BE%E5%BC%8F%E4%BA%8C%E5%88%86%E6%B3%95&zhida_source=entity&is_preview=1">显式二分法</a>：</p></li><li><ul><li>Leetcode 34. Find First and Last Position of Element in Sorted Array<ul><li>Leetcode 33. Search in Rotated Sorted Array</li><li>Leetcode 1095. Find in Mountain Array</li><li>Leetcode 162. Find Peak Element</li><li>Leetcode 278. First Bad Version</li><li>Leetcode 74. Search a 2D Matrix</li><li>Leetcode 240. Search a 2D Matrix II</li></ul></li></ul></li><li><p><a href="https://zhida.zhihu.com/search?q=%E9%9A%90%E5%BC%8F%E4%BA%8C%E5%88%86%E6%B3%95&zhida_source=entity&is_preview=1">隐式二分法</a>：</p></li><li><ul><li>Leetcode 69. Sqrt(x)<ul><li>Leetcode 540. Single Element in a Sorted Array</li><li>Leetcode 644. Maximum Average Subarray II</li><li>Leetcode 528. Random Pick with Weight</li><li>Leetcode 1300. Sum of Mutated Array Closest to Target</li><li>Leetcode 1060. Missing Element in Sorted Array</li><li>Leetcode 1062. Longest Repeating Substring</li><li>Leetcode 1891. Cutting Ribbons</li><li>Leetcode 410. Split Array Largest Sum (与1891类似)</li></ul></li></ul></li></ul><h2 id="双指针（2-Pointer）："><a href="#双指针（2-Pointer）：" class="headerlink" title="双指针（2 Pointer）："></a>双指针（2 Pointer）：</h2><ul><li><p>基础知识：常见<a href="https://zhida.zhihu.com/search?q=%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95&zhida_source=entity&is_preview=1">双指针算法</a>分为三类，同向（即两个指针都相同一个方向移动），背向（两个指针从相同或者相邻的位置出发，背向移动直到其中一根指针到达边界为止），相向（两个指针从两边出发一起向中间移动直到两个指针相遇）</p></li><li><p><a href="https://zhida.zhihu.com/search?q=%E8%83%8C%E5%90%91%E5%8F%8C%E6%8C%87%E9%92%88&zhida_source=entity&is_preview=1">背向双指针</a>：(基本上全是回文串的题)</p></li><li><ul><li>Leetcode 409. Longest Palindrome<ul><li>Leetcode 125. Valid Palindrome (I、II)</li><li>Leetcode 5. Longest Palindromic Substring</li><li>Leetcode 647. Palindromic Substrings</li></ul></li></ul></li><li><p><a href="https://zhida.zhihu.com/search?q=%E7%9B%B8%E5%90%91%E5%8F%8C%E6%8C%87%E9%92%88&zhida_source=entity&is_preview=1">相向双指针</a>：(以two sum为基础的一系列题)</p></li><li><ul><li>Leetcode 1. Two Sum (这里使用的是先排序的双指针算法，不同于hashmap做法)<ul><li>Leetcode 167. Two Sum II - Input array is sorted</li><li>Leetcode 15. 3Sum</li><li>Leetcode 16. 3Sum Closest</li><li>Leetcode 18. 4Sum</li><li>Leetcode 454. 4Sum II</li><li>Leetcode 277. Find the Celebrity</li><li>Leetcode 11. Container With Most Water</li><li>Leetcode 186 Reverse Words in a String II</li></ul></li></ul></li><li><p>同向双指针：（个人觉得最难的一类题，可以参考下这里 <a href="https://zhuanlan.zhihu.com/p/390570255">TimothyL：Leetcode 同向双指针&#x2F;滑动窗口类代码模板</a>）</p></li><li><ul><li>Leetcode 283. Move Zeroes<ul><li>Leetcode 26. Remove Duplicate Numbers in Array</li><li>Leetcode 395. Longest Substring with At Least K Repeating Characters</li><li>Leetcode 340. Longest Substring with At Most K Distinct Characters</li><li>Leetcode 424. Longest Repeating Character Replacement</li><li>Leetcode 76. Minimum Window Substring</li><li>Leetcode 3. Longest Substring Without Repeating Characters</li><li>Leetcode 1004 Max Consecutive Ones III</li><li>Leetcode 1658 Minimum Operations to Reduce X to Zero</li></ul></li></ul></li></ul><h2 id="宽度优先搜索（BFS）：面试中最常考的"><a href="#宽度优先搜索（BFS）：面试中最常考的" class="headerlink" title="宽度优先搜索（BFS）：面试中最常考的"></a>宽度优先搜索（BFS）：面试中最常考的</h2><ul><li><p>基础知识：</p></li><li><ul><li>常见的BFS用来解决什么问题？(1) <a href="https://zhida.zhihu.com/search?q=%E7%AE%80%E5%8D%95%E5%9B%BE&zhida_source=entity&is_preview=1">简单图</a>（有向无向皆可）的最短路径长度，注意是长度而不是具体的路径（2）<a href="https://zhida.zhihu.com/search?q=%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F&zhida_source=entity&is_preview=1">拓扑排序</a> （3） 遍历一个图（或者树）</li></ul></li><li><p>BFS基本模板（需要记录层数或者不需要记录层数）</p></li><li><p>多数情况下时间复杂度空间复杂度都是O（N+M），N为节点个数，M为边的个数</p></li><li><p><a href="https://zhida.zhihu.com/search?q=%E5%9F%BA%E4%BA%8E%E6%A0%91&zhida_source=entity&is_preview=1">基于树</a>的BFS：不需要专门一个set来记录访问过的节点</p></li><li><ul><li>Leetcode 102 Binary Tree Level Order Traversal<ul><li>Leetcode 103 Binary Tree Zigzag Level Order Traversal</li><li>Leetcode 297 Serialize and Deserialize Binary Tree （很好的BFS和双指针结合的题）</li><li>Leetcode 314 Binary Tree Vertical Order Traversal</li></ul></li></ul></li><li><p>基于图的BFS：（一般需要一个set来记录访问过的节点）</p></li><li><ul><li>Leetcode 200. Number of Islands<ul><li>Leetcode 133. Clone Graph</li><li>Leetcode 127. Word Ladder</li><li>Leetcode 490. The Maze</li><li>Leetcode 323. Connected Component in Undirected Graph</li><li>Leetcode 130. Surrounded Regions</li><li>Leetcode 752. Open the Lock</li><li>Leetcode 815. Bus Routes</li><li>Leetcode 1091. Shortest Path in Binary Matrix</li><li>Leetcode 542. 01 Matrix</li><li>Leetcode 1293. Shortest Path in a Grid with Obstacles Elimination</li><li>Leetcode 417. Pacific Atlantic Water Flow</li></ul></li></ul></li><li><p>拓扑排序：（<a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F">https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F</a>）</p></li><li><ul><li>Leetcode 207 Course Schedule （I, II）<ul><li>Leetcode 444 Sequence Reconstruction</li><li>Leetcode 269 Alien Dictionary</li><li>Leetcode 310 Minimum Height Trees</li><li>Leetcode 366 Find Leaves of Binary Tree</li></ul></li></ul></li></ul><h2 id="深度优先搜索（DFS）：面试中最常考的（分类的稍微有点粗糙了，没有细分出回溯-x2F-分治来，准备找个时间给每个DFS的题标记下是哪种DFS）"><a href="#深度优先搜索（DFS）：面试中最常考的（分类的稍微有点粗糙了，没有细分出回溯-x2F-分治来，准备找个时间给每个DFS的题标记下是哪种DFS）" class="headerlink" title="深度优先搜索（DFS）：面试中最常考的（分类的稍微有点粗糙了，没有细分出回溯&#x2F;分治来，准备找个时间给每个DFS的题标记下是哪种DFS）"></a><a href="https://zhida.zhihu.com/search?q=%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2&zhida_source=entity&is_preview=1">深度优先搜索</a>（DFS）：面试中最常考的（分类的稍微有点粗糙了，没有细分出回溯&#x2F;分治来，准备找个时间给每个DFS的题标记下是哪种DFS）</h2><ul><li><p>基础知识：</p></li><li><ul><li>常见的DFS用来解决什么问题？(1) 图中（有向无向皆可）的符合某种特征（比如最长）的路径以及长度（2）排列组合（3） 遍历一个图（或者树）（4）找出图或者树中符合题目要求的全部方案<ul><li>DFS<a href="https://zhida.zhihu.com/search?q=%E5%9F%BA%E6%9C%AC%E6%A8%A1%E6%9D%BF&zhida_source=entity&is_preview=1">基本模板</a>（需要记录路径，不需要返回值 and 不需要记录路径，但需要记录某些特征的返回值）</li><li>除了<a href="https://zhida.zhihu.com/search?q=%E9%81%8D%E5%8E%86&zhida_source=entity&is_preview=1">遍历</a>之外多数情况下时间复杂度是指数级别，一般是O(<a href="https://zhida.zhihu.com/search?q=%E6%96%B9%E6%A1%88%E6%95%B0&zhida_source=entity&is_preview=1">方案数</a>×找到每个方案的时间复杂度)</li><li>递归题目都可以用<a href="https://zhida.zhihu.com/search?q=%E9%9D%9E%E9%80%92%E5%BD%92%E8%BF%AD%E4%BB%A3&zhida_source=entity&is_preview=1">非递归迭代</a>的方法写，但一般实现起来非常麻烦</li></ul></li></ul></li><li><p>基于树的DFS：需要记住<a href="https://zhida.zhihu.com/search?q=%E9%80%92%E5%BD%92&zhida_source=entity&is_preview=1">递归</a>写前序中序后序遍历<a href="https://zhida.zhihu.com/search?q=%E4%BA%8C%E5%8F%89%E6%A0%91&zhida_source=entity&is_preview=1">二叉树</a>的模板</p></li><li><ul><li>Leetcode 543 Diameter of Binary Tree (分治)<ul><li>Leetcode 124 Binary Tree Maximum Path Sum (分治)</li><li>Leetcode 226 Invert Binary Tree (分治)</li><li>Leetcode 101 Symmetric Tree (回溯 or 分治)</li><li>Leetcode 951 Flip Equivalent Binary Trees (分治)</li><li>Leetcode 236 Lowest Common Ancestor of a Binary Tree (相似题：235、1650) (回溯 or 分治)</li><li>Leetcode 105 Construct Binary Tree from Preorder and Inorder Traversal (分治)</li><li>Leetcode 104 Maximum Depth of Binary Tree (回溯 or 分治)</li><li>Leetcode 987 Vertical Order Traversal of a Binary Tree</li><li>Leetcode 1485 Clone Binary Tree With Random Pointer</li><li>Leetcode 572 Subtree of Another Tree (分治)</li><li>Leetcode 863 All Nodes Distance K in Binary Tree</li><li>Leetcode 1110 Delete Nodes And Return Forest (分治)</li></ul></li></ul></li><li><p><a href="https://zhida.zhihu.com/search?q=%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91&zhida_source=entity&is_preview=1">二叉搜索树</a>（BST）：BST特征：中序遍历为单调递增的二叉树，换句话说，<a href="https://zhida.zhihu.com/search?q=%E6%A0%B9%E8%8A%82%E7%82%B9&zhida_source=entity&is_preview=1">根节点</a>的值比左子树任意节点值都大，比右子树任意节点值都小，增删查改均为O（h）复杂度，h为树的高度；注意不是所有的BST题目都需要递归，有的题目只需要while循环即可</p></li><li><ul><li>Leetcode 230 Kth Smallest element in a BST<ul><li>Leetcode 98 Validate Binary Search Tree</li><li>Leetcode 270 Cloest Binary Search Tree Value</li><li>Leetcode 235 Lowest Common Ancestor of a Binary Search Tree</li><li>Leetcode 669 Trim a Binary Search Tree (分治)</li><li>Leetcode 700 Search in a Binary Search Tree</li><li>Leetcode 108 Convert Sorted Array to Binary Search Tree (分治)</li><li>Leetcode 333 Largest BST Subtree (与98类似) (分治)</li><li>Leetcode 285 Inorder Successor in BST (I, II)</li></ul></li></ul></li><li><p>基于图的DFS: 和BFS一样一般需要一个set来记录访问过的节点，避免重复访问造成死循环; Word XXX 系列面试中非常常见，例如word break，word ladder，word pattern，word search。</p></li><li><ul><li>Leetcode 341 Flatten Nested List Iterator (339 364)<ul><li>Leetcode 394 Decode String</li><li>Leetcode 51 N-Queens (I II基本相同)</li><li>Leetcode 291 Word Pattern II (I为简单的Hashmap题)</li><li>Leetcode 126 Word Ladder II （I为BFS题目）</li><li>Leetcode 93 Restore IP Addresses</li><li>Leetcode 22 Generate Parentheses</li><li>Leetcode 856 Score of Parentheses</li><li>Leetcode 301 Remove Invalid Parentheses</li><li>Leetcode 37 Sodoku Solver</li><li>Leetcode 212 Word Search II （I, II）</li><li>Leetcode 1087 Brace Expansion</li><li>Leetcode 399 Evaluate Division</li><li>Leetcode 1274 Number of Ships in a Rectangle</li><li>Leetcode 1376 Time Needed to Inform All Employees</li><li>Leetcode 694 Number of Distinct Islands</li><li>Leetcode 131 Palindrome Partitioning</li></ul></li></ul></li><li><p>基于排列组合的DFS: 其实与图类DFS方法一致，但是排列组合的特征更明显</p></li><li><ul><li>Leetcode 17 Letter Combinations of a Phone Number<ul><li>Leetcode 39 Combination Sum（I, II, III相似， IV为动态规划题目）</li><li>Leetcode 78 Subsets （I, II 重点在于如何去重）</li><li>Leetcode 46 Permutation (I, II 重点在于如何去重)</li><li>Leetcode 77 Combinations (I, II 重点在于如何去重)</li><li>Leetcode 698 Partition to K Equal Sum Subsets</li><li>Leetcode 526 Beautiful Arrangement (similar to 46)</li></ul></li></ul></li><li><p><a href="https://zhida.zhihu.com/search?q=%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2&zhida_source=entity&is_preview=1">记忆化搜索</a>（DFS + Memoization Search）：算是用递归的方式实现动态规划，递归每次返回时同时记录下已访问过的节点特征，避免重复访问同一个节点，可以有效的把指数级别的DFS时间复杂度降为<a href="https://zhida.zhihu.com/search?q=%E5%A4%9A%E9%A1%B9%E5%BC%8F&zhida_source=entity&is_preview=1">多项式</a>级别; 注意这一类的DFS必须在最后有返回值（<a href="https://zhida.zhihu.com/search?q=%E5%88%86%E6%B2%BB%E6%B3%95&zhida_source=entity&is_preview=1">分治法</a>），不可以用回溯法; for循环的dp题目都可以用记忆化搜索的方式写，但是不是所有的记忆化搜索题目都可以用for循环的dp方式写。</p></li><li><ul><li>Leetcode 139 Word Break II<ul><li>Leetcode 72 Edit Distance</li><li>Leetcode 377 Combination Sum IV</li><li>Leetcode 1235 <a href="https://link.zhihu.com/?target=https://leetcode.com/explore/item/3950">Maximum Profit in Job Scheduling</a></li><li>Leetcode 1335 Minimum Difficulty of a Job Schedule</li><li>Leetcode 1216 Valid Palindrome III</li><li>Leetcode 97 Interleaving String</li><li>Leetcode 472 Concatenated Words</li><li>Leetcode 403 Frog Jump</li><li>Leetcode 329 Longest Increasing Path in a Matrix</li></ul></li></ul></li></ul><h2 id="前缀和（Prefix-Sum）"><a href="#前缀和（Prefix-Sum）" class="headerlink" title="前缀和（Prefix Sum）"></a>前缀和（Prefix Sum）</h2><ul><li><p>基础知识：前缀和本质上是在一个list当中，用O（N）的时间提前算好从第0个数字到第i个数字之和，在后续使用中可以在O（1）时间内计算出第i到第j个数字之和，一般很少单独作为一道题出现，而是很多题目中的用到的一个小技巧</p></li><li><p>常见题目：</p></li><li><ul><li>Leetcode 53 Maximum Subarray<ul><li>Leetcode 1423 Maximum Points You Can Obtain from Cards</li><li>Leetcode 1031 Maximum Sum of Two Non-Overlapping Subarrays</li><li>Leetcode 523 Continuous Subarray Sum</li><li>Leetcode 304 Range Sum Query 2D - Immutable</li></ul></li></ul></li></ul><hr><p>以上内容皆为面试中高频的知识点，以下知识点和题目在面试中属于中等频率（大概面10道题会遇到一次），时间不足的情况下，请以准备上面的知识点为主。</p><h2 id="并查集（Union-Find）：把两个或者多个集合合并为一个集合"><a href="#并查集（Union-Find）：把两个或者多个集合合并为一个集合" class="headerlink" title="并查集（Union Find）：把两个或者多个集合合并为一个集合"></a><a href="https://zhida.zhihu.com/search?q=%E5%B9%B6%E6%9F%A5%E9%9B%86&zhida_source=entity&is_preview=1">并查集</a>（Union Find）：把两个或者多个集合合并为一个集合</h2><ul><li><p>基础知识：如果数据不是实时变化，本类问题可以用BFS或者DFS的方式遍历，如果数据实时变化（data stream）则并查集每次的时间复杂度可以视为O（1）；需要牢记合并与查找两个操作的模板</p></li><li><p>常见题目：</p></li><li><ul><li>Leetcode 721 Accounts Merge<ul><li>Leetcode 547 Number of Provinces</li><li>Leetcode 737 Sentence Similarity II</li><li>Leetcode 305 Number of Islands II</li></ul></li></ul></li></ul><p><strong>字典树（Trie）</strong></p><ul><li><p>基础知识：（<a href="https://link.zhihu.com/?target=https://zh.wikipedia.org/wiki/Trie">https://zh.wikipedia.org/wiki/Trie</a>）；多数情况下可以通过用一个set来记录所有单词的prefix来替代，时间复杂度不变，但空间复杂度略高</p></li><li><p>常见题目：</p></li><li><ul><li>Leetcode 208 Implement Trie (Prefix Tree)<ul><li>Leetcode 211 Design Add and Search Words Data Structure</li><li>Leetcode 1268 Search Suggestions System</li><li>Leetcode 212 Word Search II</li><li>Leetcode 1166 Design File System</li></ul></li></ul></li></ul><p><strong><a href="https://zhida.zhihu.com/search?q=%E5%8D%95%E8%B0%83%E6%A0%88&zhida_source=entity&is_preview=1">单调栈</a>与单调队列（Monotone Stack／Queue）</strong></p><ul><li><p>基础知识：单调栈一般用于解决数组中找出每个数字的第一个大于／小于该数字的位置或者数字；单调队列只见过一道题需要使用；不论单调栈还是单调队列，单调的意思是保留在栈或者队列中的数字是单调递增或者单调递减的</p></li><li><p>常见题目：</p></li><li><ul><li>Leetcode 85 Maximum Rectangle<ul><li>Leetcode 84 Largest Rectangle in Histogram</li><li>Leetcode 907 Sum of Subarray Minimums (与84类似)</li><li>Leetcode 739 Daily Temperatures</li><li>Leetcode 901 Online Stock Span</li><li>Leetcode 503 Next Greater Element II</li><li>Leetcode 239 Sliding Window Maximum （唯一的单调队列题）</li></ul></li></ul></li></ul><h2 id="扫描线算法（Sweep-Line）"><a href="#扫描线算法（Sweep-Line）" class="headerlink" title="扫描线算法（Sweep Line）"></a><a href="https://zhida.zhihu.com/search?q=%E6%89%AB%E6%8F%8F%E7%BA%BF&zhida_source=entity&is_preview=1">扫描线</a>算法（Sweep Line）</h2><ul><li><p>基础知识：一个很巧妙的解决时间安排冲突的算法，本身比较容易些也很容易理解</p></li><li><p>常见题目：</p></li><li><ul><li>Leetcode 253 Meeting Room II（Meeting Room I也可以使用）<ul><li>Leetcode 1094 Car Pooling</li><li>Leetcode 218 The Skyline Problem</li><li>Leetcode 759 Employee Free Time</li></ul></li></ul></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li>基础知识：基于红黑树（<a href="https://zhida.zhihu.com/search?q=%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91&zhida_source=entity&is_preview=1">平衡二叉搜索树</a>）的一种树状 hashmap，增删查改、找求大最小均为logN复杂度，Python当中可以使用SortedDict替代；SortedDict继承了普通的dict全部的方法，除此之外还可以peekitem(k)来找key里面第k大的元素，popitem(k)来删除掉第k大的元素，弥补了Python自带的heapq没法logN时间复杂度内删除某个元素的缺陷；最近又在刷一些hard题目时候突然发现TreeMap简直是个神技，很多用别的数据结构写起来非常麻烦的题目，TreeMap解决起来易如反掌。</li><li>常见题目：</li><li>Leetcode 729 My Calendar I</li><li>Leetcode 981 Time Based Key-Value Store</li><li>Leetcode 846 Hand of Straights</li><li>Leetcode 218 The Skyline Problem</li><li>Leetcode 480. Sliding Window Median (这个题用TreeMap超级方便)</li><li>Leetcode 318 Count of Smaller Numbers After Self (这个题<a href="https://zhida.zhihu.com/search?q=%E7%BA%BF%E6%AE%B5%E6%A0%91&zhida_source=entity&is_preview=1">线段树</a>、二分索引树、TreeMap都可以)</li></ul><h2 id="动态规划（Dynamic-Programming）"><a href="#动态规划（Dynamic-Programming）" class="headerlink" title="动态规划（Dynamic Programming）"></a>动态规划（Dynamic Programming）</h2><ul><li><p>基础知识：这里指的是用for循环方式的动态规划，非Memoization Search方式。DP可以在多项式时间复杂度内解决DFS需要指数级别的问题。常见的题目包括找最大最小，找可行性，找总方案数等，一般结果是一个Integer或者Boolean。动态规划有很多分支，暂时还没想好怎么去写这部分，后面想好了再具体写吧。</p></li><li><p>常见题目：</p></li><li><ul><li>Leetcode 674 Longest Continuous Increasing Subsequence (接龙型dp)<ul><li>Leetcode 62 Unique Paths II</li><li>Leetcode 70 Climbing Stairs</li><li>Leetcode 64 Minimum Path Sum</li><li>Leetcode 368 Largest Divisible Subset (接龙型dp)</li><li>Leetcode 300 Longest Increasing Subsequence (接龙型dp)</li><li>Leetcode 354 Russian Doll Envelopes (接龙型dp， 300的2D版)</li><li>Leetcode 256 Paint House</li><li>Leetcode 121 Best Time to Buy and Sell Stock</li><li>Leetcode 55 Jump Game</li><li>Leetcode 45 Jump Game II</li><li>Leetcode 132 Palindrome Partitioning II</li><li>Leetcode 312 Burst Balloons (区间型dp)</li><li>Leetcode 1143 Longest Common Subsequence (前缀型dp)</li><li>Leetcode 1062 Longest Repeating Substring (dp方法与longest common substring一致)</li><li>Leetcode 718 Maximum Length of Repeated Subarray (和1062本质上一样)</li><li>Leetcode 174 Dungeon Game</li><li>Leetcode 115 Distinct Subsequences</li><li>Leetcode 72 Edit Distance</li><li>Leetcode 91 Decode Ways</li><li>Leetcode 639 Decode Ways II</li><li>Leetcode 712 Minimum ASCII Delete Sum for Two Strings</li><li>Leetcode 221 Maximal Square</li><li>Leetcode 1277 Count Square Submatrices with All Ones (可以使用221一样的解法)</li><li>Leetcode 198 House Robber</li><li>Leetcode 213 House Robber II</li><li>Leetcode 740 Delete and Earn</li><li>Leetcode 87 Scramble String</li><li>Leetcode 1140 Stone Game II</li><li>Leetcode 322 Coin Change</li><li>Leetcode 518 Coin Change II (<a href="https://zhida.zhihu.com/search?q=01%E8%83%8C%E5%8C%85&zhida_source=entity&is_preview=1">01背包</a>型)</li><li>Leetcode 1048 Longest String Chain</li><li>Leetcode 44 <a href="https://link.zhihu.com/?target=https://leetcode.com/problems/wildcard-matching">Wildcard Matching</a></li><li>Leetcode 10 <a href="https://link.zhihu.com/?target=https://leetcode.com/problems/regular-expression-matching">Regular Expression Matching</a></li><li>Leetcode 32 Longest Valid Parentheses</li><li>Leetcode 1235 Maximum Profit in Job Scheduling (DP + binary search)</li><li>Leetcode 1043 Partition Array for Maximum Sum</li><li>Leetcode 926 Flip String to Monotone Increasing</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span red, <span class="number">1.</span> %&#125;<span class="keyword">if</span>-<span class="keyword">else</span> <span class="keyword">if</span>应当这样写</span><br><span class="line"><span class="keyword">if</span> (*s == <span class="string">&#x27;V&#x27;</span>)         sum += <span class="number">5</span>;     </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;L&#x27;</span>)    sum += <span class="number">50</span></span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">2.</span> %&#125;执行代码是检查语法错误，提交是检查算法错误,</span><br><span class="line"> <span class="number">1.</span>执行出错是有语法错误</span><br><span class="line">  (<span class="number">1</span>)可能是漏掉了了一个单词</span><br><span class="line">  (<span class="number">2</span>)也可以是少打了一个,就是没有检查出来</span><br><span class="line"> <span class="number">2.</span>给你指出错误来了,一定是自己搞错了,反向思考一下,适当修改一下</span><br><span class="line"> <span class="number">3.</span>考试的时候只能自己一个一个的检查出哪里有问题,不要怀疑自己的算法,不要考虑换算法,肯定是自己哪里错了,因为自己的语法知识并没有完全掌握,甚至&amp;&amp;会搞错成||</span><br><span class="line"> <span class="number">4.</span>有调试就调试,没有调试就写下一题,然后重新写</span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">3.</span> %&#125;C语言语法基本没有问题，C++可能有语法错误</span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">4.</span> %&#125;自己有代码错误可以用Chatgpt,不懂用Chatgpt,同时注意它的使用技巧,它会记住你之前对它问过的问题来重新会答你,还要结合Bing来写,首先使用chargpt</span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">5.</span> %&#125;注意多使用<span class="keyword">while</span>()在没有a[], a&gt;b?a:b的使用，输入一个值n,有一个长度为a数组，</span><br><span class="line">输出长度为n的新数组,n可能大于a,可能小于a,选择b=a&lt;n:a,b</span><br><span class="line">即遇到<span class="keyword">if</span>时可以使用?条件语句</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">  <span class="type">int</span> limit = i+k &gt;= numsSize? numsSize: i+k+<span class="number">1</span>;</span><br><span class="line">放在<span class="keyword">for</span>循环中有满足某个条件时一直等于munsSize</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">6.</span> %&#125;注意严谨的思维,在读完题以后,回想一下要完成的内容是什么,然后对比题目看遗漏了什么没有</span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">7.</span> %&#125;删除有序数组中的重复项</span><br><span class="line">设置两个指针分别为快指针和慢指针s[a],s[b],比起一个i的s[i]更好控制,先让两个指针指向同一个位置</span><br><span class="line">让后面的值先出现,使用！=,它的目的是空出空位来,在原数组中重新存放元素,而不设置新数组,nums[j]!=nums[j<span class="number">-1</span>]找出不是重复的元素,nums[i]用来存放</span><br><span class="line">双指针的好处是可以记忆元素和直接对数组操作不需要重新创建新的数组</span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">8.</span> %&#125;示例是对<span class="keyword">if</span>语句的形式的提示</span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">9.</span> %&#125;二分查找法是在数组中找到与指定目标值相同的下标,但必须是有序数组</span><br><span class="line"></span><br><span class="line">&#123;% span red, <span class="number">10.</span> %&#125;一般对字符串的处理函数是可以用的在leetcode</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>在leetcode用到的算法</span><br><span class="line">二分查找法 是在数组中用较少的时间找到要找的数(搜索插入位置),有搜索二字就代表了要二分查找,并且找到下标, <span class="keyword">while</span>(i&lt;=j)必修等于防止target在最后一个找到</span><br><span class="line">两个指针分别为快指针和慢指针或者更多的指针,指针可以是从数组的第二个元素开始,但一般是从第一个元素开始</span><br><span class="line">两个<span class="keyword">for</span>循环实现后面的数组元素前移并覆盖一个数组元素</span><br><span class="line">C中的算法</span><br><span class="line"><span class="keyword">while</span>()</span><br><span class="line">二进制进位法</span><br><span class="line">累加和sum</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>在一个函数中返回一个字符数组的地址,并且需要在该函数中建立一个数组,需使用动态分配,并且不需要<span class="built_in">free</span>(),注意动态分配的是数组</span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> nums1[j--]=nums2[j--]这个代表的是赋值以后要减一 j--</span><br><span class="line"></span><br><span class="line"><span class="number">14.</span>c语言注意&amp;&amp; || 的综合运用</span><br><span class="line"> <span class="number">1.</span><span class="keyword">if</span>((flowerbed[i]==<span class="number">0</span>) &amp;&amp; (i==<span class="number">0</span> || flowerbed[i<span class="number">-1</span>]==<span class="number">0</span>) &amp;&amp; (i==flowerbedSize<span class="number">-1</span> || flowerbed[i+<span class="number">1</span>]==<span class="number">0</span>));</span><br><span class="line"> 与山顶元素一样的在特殊位置与一般位置的分析情况少一点,都是一排过去(||)中有一个是为真的,但要把特殊情况放在里面</span><br><span class="line"></span><br><span class="line"><span class="number">15.</span>在一个简单的题目中也要分步骤进行思考例如</span><br><span class="line"> <span class="number">1.</span>先排序</span><br><span class="line"> <span class="number">2.</span>再找出第三大的数</span><br><span class="line"></span><br><span class="line"><span class="number">16.</span> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; nums1Size; i++)      <span class="comment">//遍历数组1，记录出现的元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        count[nums1[i] = <span class="number">1</span>;            <span class="comment">//这里置1，而不++，以便后面操作</span></span><br><span class="line">    &#125;</span><br><span class="line">这样count[]会把nums1中出现过的数字记录下来,并且还会记录下重复出现的次数，可作用于重复的数字</span><br><span class="line"></span><br><span class="line"><span class="number">17.</span><span class="type">int</span>* returnSize中returnSize是指针,但也是这样用的 ret[(*returnSize)] = nums2[i]; *returnSize++;</span><br><span class="line"></span><br><span class="line"><span class="number">18.</span>快速排序</span><br><span class="line">函数声明</span><br><span class="line"><span class="type">int</span> <span class="title function_">Cmp_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* p1, <span class="type">const</span> <span class="type">void</span>* p2)</span>     是一个自定义的比较函数</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (*(<span class="type">int</span>*)p1 - *(<span class="type">int</span>*)p2);</span><br><span class="line">&#125;</span><br><span class="line">注意快速排序是对无序的数组进行的,对从小到大还是从大到小都是无操作的</span><br><span class="line"></span><br><span class="line">qsort(nums1, nums1Size, <span class="keyword">sizeof</span>(<span class="type">int</span>), Cmp_int);</span><br><span class="line"></span><br><span class="line"><span class="number">19.</span><span class="type">int</span>* returnSize,作为参数</span><br><span class="line"><span class="number">1.</span>传递过来时对它取值增时要注意(*returnSize)++,而不是这样的 *returnSize++</span><br><span class="line"><span class="number">2.</span>对它赋值时同时也应该注意是*returnSize=<span class="number">0</span>,而不是<span class="type">int</span> *returnSize=<span class="number">0</span></span><br><span class="line"><span class="number">3.</span>看到它要记住对它的处理,但不返回它的值,我们是通过地址来改变它在主函数里的值</span><br><span class="line"></span><br><span class="line"><span class="number">20.</span>选择排序</span><br><span class="line"><span class="type">int</span> temp</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;numsSize<span class="number">-1</span>;k++)&#123;</span><br><span class="line">        index=k;</span><br><span class="line">        <span class="keyword">for</span>(i=k+<span class="number">1</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[index])&#123;</span><br><span class="line">                index=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp=a[index];</span><br><span class="line">        a[index]=a[k];</span><br><span class="line">        a[k]=temp;</span><br><span class="line">   &#125;</span><br><span class="line">要使用下标来表示最小值,而不是一个值,还有就是在交换时不是使用i,其实i要比index大</span><br><span class="line"></span><br><span class="line"><span class="number">21.</span>在内部创建的字符串数组结束以后记得加上a[i]=<span class="string">&#x27;\0&#x27;</span>,如果不返回这还要释放它， <span class="type">char</span>* ch=(<span class="type">char</span>*)<span class="built_in">malloc</span>(size+<span class="number">1</span>)，<span class="built_in">free</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">22.</span> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((s[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;z&#x27;</span>)||(s[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;9&#x27;</span>))&#123;</span><br><span class="line">        ch[j]=s[i];</span><br><span class="line">        j++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">        ch[j]=s[i]-<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">j++以后是要比当前大一些的加<span class="number">1</span>后并没有使用,所以在后面的使用要减<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">23.</span><span class="type">char</span> a[<span class="number">0</span>]=<span class="string">&#x27;/0&#x27;</span>表示空字符串,strs[<span class="number">0</span>][<span class="number">0</span>]=<span class="string">&#x27;\0&#x27;</span>,<span class="keyword">return</span> strs[<span class="number">0</span>]表示返回空字符串,使用<span class="string">&#x27;\0&#x27;</span>,直接截断了字符串的长度</span><br><span class="line">    <span class="number">1.1</span> &lt;= strs.length &lt;= <span class="number">200</span>表示二维字符串strs = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>],<span class="string">&quot;flower&quot;</span>的长度</span><br><span class="line">    <span class="number">2.0</span> &lt;= strs[i].length &lt;= <span class="number">200</span>表示[<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]的长度</span><br><span class="line"></span><br><span class="line"><span class="number">24.</span><span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;strsSize;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[j][i]!=flag) <span class="keyword">break</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;strsSize) <span class="keyword">break</span>;      </span><br><span class="line">        flag=strs[<span class="number">0</span>][++i];</span><br><span class="line">    &#125;</span><br><span class="line">两次<span class="keyword">break</span>跳出循环</span><br><span class="line"></span><br><span class="line"><span class="number">25.</span> <span class="type">char</span> *c=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*length);</span><br><span class="line">    c[length<span class="number">-1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">在字符串动态内存分配以后,要立马给它a[size<span class="number">-1</span>]=<span class="string">&#x27;/0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">26.</span><span class="keyword">if</span>(*src==<span class="string">&#x27;\0&#x27;</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">有src[<span class="number">0</span>]=<span class="string">&#x27;\0&#x27;</span>可以返回<span class="literal">NULL</span>空字符</span><br><span class="line"></span><br><span class="line"><span class="number">27.</span>三数之和</span><br><span class="line">输出的顺序和三元组的顺序并不重要,一般要涉及到排序来解决,如果是和下标有关系的话就不能排序</span><br><span class="line"></span><br><span class="line"><span class="number">28.</span>三数之和</span><br><span class="line"><span class="number">1.f</span>or(j=i+<span class="number">1</span>;k&lt;numsSize<span class="number">-1</span>;j&lt;k;)&#123;j++;k++&#125;两个指针相向运动<span class="keyword">for</span>写的情况,只有排好序,为了才好逐个遍历,消重也可以用来控制有重复出现要输出时,输出第一种的情况,省略了++的情况</span><br><span class="line"><span class="number">2.</span>三个指针使用分布的情况,注意<span class="keyword">continue</span>的使用用来跳过当前循环</span><br><span class="line"><span class="number">3.f</span>or(i=<span class="number">0</span>;i&lt;(numsSize<span class="number">-2</span>);i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>((nums[i]+nums[i+<span class="number">1</span>]+nums[i+<span class="number">2</span>])&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">能够提升算法的效率,在该题中还用了除去相同的结果</span><br><span class="line"><span class="number">29.</span>二维数组的动态内存分配</span><br><span class="line"> <span class="number">1.</span>整个二维数组<span class="type">int</span> **res=(<span class="type">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span> *) * (numsSize + <span class="number">1</span>) * <span class="number">6</span>);</span><br><span class="line"> <span class="number">2.</span>对行指针的分配 res[*returnSize]=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">3</span>);</span><br><span class="line"> <span class="number">3.</span>对列指针的分配 *returnColumnSizes=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*(*returnSize));</span><br><span class="line"> <span class="number">4.</span>申请内存，此时不确定合并之后的数组大小，只能按照intervalSize进行申请</span><br><span class="line">   <span class="type">int</span> **target = (<span class="type">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span> *)*intervalsSize);</span><br><span class="line">   *returnColumnSizes = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * intervalsSize);</span><br><span class="line"> <span class="number">4.</span><span class="type">int</span>** <span class="title function_">threeSum</span><span class="params">()</span> <span class="keyword">return</span> a返回的是一级指针</span><br><span class="line"></span><br><span class="line">30.自己创建一个数组来记录前面出现过的重复的数,主要是前面与后面比较</span><br><span class="line">最长子串的题都是用双指针来移动</span><br><span class="line"></span><br><span class="line">31.字符串转换整数</span><br><span class="line">看似只遍历了字符串的第一字符,但实则遍历了很多字符</span><br><span class="line"> 1.<span class="title function_">while</span><span class="params">(*str == <span class="string">&#x27; &#x27;</span>)</span><span class="comment">//删除空格 </span></span><br><span class="line">++str;</span><br><span class="line"> 对空格多次遍历</span><br><span class="line"> <span class="number">2.</span><span class="keyword">if</span>(*str == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line">++str;</span><br><span class="line"> 对<span class="string">&#x27;-&#x27;</span>遍历了一次</span><br><span class="line"> <span class="number">3.</span><span class="keyword">while</span>(*str&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; *str&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">temp = *str-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(res&lt;div || (res==div&amp;&amp;temp&lt;<span class="number">8</span>))&#123;</span><br><span class="line">res = res*<span class="number">10</span> + temp;</span><br><span class="line">++str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> (flag==<span class="number">1</span>?INT_MAX:INT_MIN);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res*flag;</span><br><span class="line"> 对数字遍历了多次</span><br><span class="line"> <span class="number">4.</span><span class="keyword">return</span> res*flag;</span><br><span class="line"> 并且遇到英文字符时就结束</span><br><span class="line"> <span class="number">5.</span><span class="type">int</span> div = INT_MAX/<span class="number">10</span>;</span><br><span class="line">   temp = *str-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span>(res&lt;div||(res==div&amp;&amp;temp&lt;<span class="number">8</span>))</span><br><span class="line"> 确保不会超出整数的范围</span><br><span class="line"></span><br><span class="line"><span class="number">32.</span>如何将找到的元素存放到数组中</span><br><span class="line"></span><br><span class="line"><span class="number">33.</span>在找出字符串中第一个匹配项的下标中</span><br><span class="line"> <span class="number">1.f</span>or(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(haystack);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="built_in">strlen</span>(needle)&gt;<span class="built_in">strlen</span>(haystack))&#123;</span><br><span class="line"> 也是用来提升效率的</span><br><span class="line"> <span class="number">2.f</span>or(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(haystack);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i+<span class="built_in">strlen</span>(needle)&gt;<span class="built_in">strlen</span>(haystack))&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(needle);j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(haystack[i+j]!=needle[j])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="built_in">strlen</span>(needle)<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> 使得能找准对的下标位置来比较</span><br><span class="line"></span><br><span class="line"><span class="number">34</span> <span class="number">1.</span>reverse函数来对字符串反转,直接使用库函数</span><br><span class="line">   <span class="number">2.</span>split函数,就给它拆成一个个独立的单词了</span><br><span class="line">   <span class="number">3.</span>erase函数就能在字符串里删除字符   </span><br><span class="line"></span><br><span class="line"><span class="number">35.</span>空间复杂度是o(<span class="number">1</span>)的不能去申请一个新的字符串,做字符串的一般都有申请新的字符串,移除数组,移除多余空格都需要双指针来操作,并且是原地移除</span><br><span class="line"></span><br><span class="line"><span class="number">36.1</span> &lt;= num &lt;= <span class="number">3999</span></span><br><span class="line"><span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>)有时候是要自己计算来分配多少内存的</span><br><span class="line"></span><br><span class="line"><span class="number">37.</span> <span class="built_in">memcpy</span>(result + strIndex, rom[numIndex], <span class="built_in">strlen</span>(rom[numIndex]));将字符串放到字符数组中的函数</span><br><span class="line"></span><br><span class="line"><span class="number">38.</span><span class="type">char</span>* result = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">20</span>)</span><br><span class="line">*(result + strIndex) = <span class="string">&#x27;\0&#x27;</span>;在申请内存中最后还不知道为多少时,要在后面加上<span class="string">&#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">39.</span> 在排序数组中查找元素的第一个和最后一个位置   记得有查找二字一定用二分查找法</span><br><span class="line"></span><br><span class="line"><span class="number">40.</span>在i进行了一次<span class="keyword">for</span>循环后,注意i的值要比原先大</span><br><span class="line"> <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s[j]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">0</span>&amp;&amp;i!=<span class="number">0</span>)&#123;</span><br><span class="line">                s[i++]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s[i++]=s[j];</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=<span class="number">1</span>&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        s[i<span class="number">-1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">41.</span>移除元素的本质是利用双指针来覆盖不要的元素</span><br><span class="line"></span><br><span class="line"><span class="number">42.</span>将字符串反转时必需有i&lt; j不能i&lt;=j,不然会进入死循环</span><br><span class="line"> <span class="comment">//将整个字符串反转</span></span><br><span class="line">    len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    i=<span class="number">0</span>,j=len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="type">char</span> temp=s[i];</span><br><span class="line">        s[i++]=s[j];</span><br><span class="line">        s[j--]=temp; </span><br><span class="line"></span><br><span class="line"><span class="number">43.</span>使用了二维数组的动态内存分配的题目有</span><br><span class="line">三数之和</span><br><span class="line">合并区间</span><br><span class="line"></span><br><span class="line"><span class="number">44.</span>交换数组中元素可以使用直接赋值</span><br><span class="line"> <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            nums[j++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">45.</span>在<span class="keyword">for</span>循环中i--是重新查看该位置的元素</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=k;i++)&#123;</span><br><span class="line">    i--;</span><br><span class="line"></span><br><span class="line"><span class="number">46.</span>哈希法</span><br><span class="line">哈希表的数据结构有三种   数组 <span class="built_in">set</span> <span class="built_in">map</span></span><br><span class="line"><span class="number">1.</span>在哈希值比较小的情况下,而且范围也比较小,长度可控,用数组  <span class="number">1</span> &lt;= nums1.length, nums2.length &lt;= <span class="number">1000</span>   <span class="number">0</span> &lt;= nums1[i], nums2[i] &lt;= <span class="number">1000</span> 就是自定义一个数组不是动态内存分配</span><br><span class="line"><span class="number">2.</span>如果数值很大的话,我们就用<span class="built_in">set</span>     值是二的次方  unorderset其实它就是一个可以无限存装的一个数组,可以去重,做映射和取值的效率是很高的,在unorderset result中放入<span class="number">100</span>个<span class="number">2</span>最终也会存入一个<span class="number">2</span></span><br><span class="line"><span class="number">3.</span>如果这个k对应的value的话,我们就用<span class="built_in">map</span></span><br><span class="line"><span class="number">4.</span>哈希表最擅长的是解决就是给你一个元素,判断在这个集合里是否出现过</span><br><span class="line"></span><br><span class="line"><span class="number">47.</span>既可以对数字数组做计数也可以对字符串数组做计数</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lens;i++)&#123;</span><br><span class="line">        flags[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">记录的是字符串的差值而不是ASCLL码值</span><br><span class="line">如果数字数组的值太大就不好计数了</span><br><span class="line"></span><br><span class="line"><span class="number">48.</span>在不需要返回自己创建的数组的时候可以直接定义数组</span><br><span class="line"> <span class="type">int</span> flags[<span class="number">26</span>]=<span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> flagt[<span class="number">26</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">49.</span>有这种关键词就要想到二分查找法</span><br><span class="line"><span class="number">1.</span>在数组中找到目标值</span><br><span class="line"><span class="number">2.</span>搜索</span><br><span class="line"><span class="number">3.</span>在连续的数组中查找</span><br><span class="line"><span class="number">4.</span>在不连续的但是有排序得到数组中查找</span><br><span class="line"><span class="number">5.</span><span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;这个也是找到中间值的方法,并且能缩小时间复杂度  <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>也可以找到中间值</span><br><span class="line"><span class="number">6.</span> <span class="keyword">if</span>(mid*mid&lt;=x)&#123;</span><br><span class="line">           a=mid;</span><br><span class="line">           left=mid+<span class="number">1</span>;</span><br><span class="line">重复赋值获得比mid小的最大数</span><br><span class="line"><span class="number">7.</span>二分查找的本质是二段性，二分查找的过程本质是对可行区间的压缩。</span><br><span class="line"><span class="number">8.</span>中等题的二分查找法都不满足有序不重复的数组,有序重复的数组是可以用二分查找法</span><br><span class="line"></span><br><span class="line"><span class="number">50.l</span>ong <span class="type">long</span> mid;</span><br><span class="line"><span class="number">0</span> &lt;= x &lt;= <span class="number">2</span>的<span class="number">31</span>次方 - <span class="number">1</span></span><br><span class="line">mid*mid&lt;=x</span><br><span class="line">可以防止整数的溢出<span class="type">long</span> <span class="type">long</span></span><br><span class="line">* / + - 要考虑发生有溢出</span><br><span class="line"><span class="number">-104</span> &lt;= nums[i] &lt;= <span class="number">104</span> 还是很小的</span><br><span class="line"></span><br><span class="line"><span class="number">51.</span>模拟一个旋转圆,把螺旋矩阵的过程模拟出来了</span><br><span class="line"></span><br><span class="line"><span class="number">52.</span>滑动窗口的最重要的一个思路</span><br><span class="line"><span class="number">1.</span>是用了一个<span class="keyword">for</span>循环来做两个<span class="keyword">for</span>循环的事情</span><br><span class="line"><span class="number">2.</span>如何移动起始位置</span><br><span class="line"><span class="number">3.</span>动态的去调整我们的起始位置</span><br><span class="line"><span class="number">4.</span>i表示起始位置,j表示终止位置</span><br><span class="line"><span class="number">5.</span>用于求解子数组的问题</span><br><span class="line"><span class="number">6.</span>两个指针却包括了很大的空间</span><br><span class="line"></span><br><span class="line"><span class="number">53.</span>前缀和是某个数的前面的元素</span><br><span class="line"></span><br><span class="line"><span class="number">54.</span>有时候还得想一些暴力解法比如两个元素进行比较看是否有重复的元素出现,并且<span class="keyword">if</span>语句中使用&amp;&amp;可解决问题</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; *boardColSize; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j != k &amp;&amp; board[i][j] == board[i][k])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">55.</span>二维数组中是这样用列数的,最好使用数组的方式来表示元素,但长度使用的是指针表示的</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;boardSize;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;*boardcloSize;j++)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span><span class="type">int</span> size = matrixSize*(*matrixColSize);二维矩阵的长度是这样计算的</span><br><span class="line"><span class="number">3.</span><span class="type">int</span> rows = matrixSize, columns = matrixColSize[<span class="number">0</span>];列的长度也可以这样表示</span><br><span class="line"><span class="number">4.</span>螺旋矩阵要保持好循环不变量</span><br><span class="line"><span class="number">5.</span>二维数组中一定要用双重<span class="keyword">for</span>循环</span><br><span class="line"></span><br><span class="line"><span class="number">56.</span>用于把二维数组分块并进行遍历每一个子块的方法</span><br><span class="line"><span class="comment">//查找每个子块</span></span><br><span class="line"><span class="type">int</span> x = i / <span class="number">3</span> * <span class="number">3</span>;<span class="comment">//每个字块中的x开端</span></span><br><span class="line"><span class="type">int</span> y = j / <span class="number">3</span> * <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">0</span>; m &lt; <span class="number">3</span>; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; <span class="number">3</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x + m != i &amp;&amp; y + n != j &amp;&amp; board[x + m][y + n] == board[i][j])<span class="comment">//**</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">57.</span>一维数组的下标转换成二维数组的下标</span><br><span class="line">a为一位数组的下标,n为列的长度</span><br><span class="line"><span class="type">int</span> x = matrix[a / n][a % n];</span><br><span class="line"></span><br><span class="line"><span class="number">58.</span><span class="type">int</span>* <span class="title function_">runningSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> *runningSum=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*numsSize);</span><br><span class="line">    runningSum[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        runningSum[i]=nums[i]+runningSum[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize=numsSize;</span><br><span class="line">    <span class="keyword">return</span> runningSum;</span><br><span class="line">&#125;</span><br><span class="line">是一个指针值函数,但返回的却是指针地址</span><br><span class="line"></span><br><span class="line"><span class="number">59.</span>为了在 O(<span class="number">1</span>) 的时间内得到每个子数组的和，可以使用前缀和</span><br><span class="line"></span><br><span class="line"><span class="number">60.f</span>or(<span class="type">int</span> j=i+<span class="number">1</span>,k=numsSize<span class="number">-1</span>;j&lt;k) 两个指针相向运动结束的判断条件</span><br><span class="line"></span><br><span class="line"><span class="number">61</span>res[*returnSize][<span class="number">0</span>]=nums[i];</span><br><span class="line">                res[*returnSize][<span class="number">1</span>]=nums[j];</span><br><span class="line">                res[*returnSize][<span class="number">2</span>]=nums[k];</span><br><span class="line">                (*returnSize)++;</span><br><span class="line">这是一种往二维数组存放元素的方式</span><br><span class="line"></span><br><span class="line"><span class="number">61.</span>s=nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[<span class="number">2</span>]-target用来得到与目标值最接近的元素</span><br><span class="line">m=<span class="built_in">abs</span>(k);n=<span class="built_in">abs</span>(s)用来取绝对值的函数</span><br><span class="line"></span><br><span class="line"><span class="number">62.</span>对矩阵的快速排序</span><br><span class="line"><span class="type">int</span> cmp(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)&#123;</span><br><span class="line">    <span class="type">int</span>* aa = *(<span class="type">int</span>**)a;</span><br><span class="line">    <span class="type">int</span>* bb = *(<span class="type">int</span>**)b;</span><br><span class="line">    <span class="keyword">return</span> aa[<span class="number">0</span>] - bb[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">qsort(intervals, intervalsSize, <span class="keyword">sizeof</span>(<span class="type">int</span>*), cmp);</span><br><span class="line"></span><br><span class="line"><span class="number">62.</span></span><br><span class="line"><span class="type">int</span>** <span class="title function_">merge</span><span class="params">(<span class="type">int</span>** intervals, <span class="type">int</span> intervalsSize, <span class="type">int</span>* intervalsColSize, <span class="type">int</span>* returnSize, <span class="type">int</span>** returnColumnSizes)</span>&#123;</span><br><span class="line">    *returnColumnSizes = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * intervalsSize);</span><br><span class="line">    <span class="type">int</span>** res = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*) * intervalsSize);</span><br><span class="line">    赋值给二维数组时注意点,<span class="number">2</span>表示列的长度</span><br><span class="line">    (*returnColumnSizes)[(*returnSize)] = <span class="number">2</span>;</span><br><span class="line">    res[(*returnSize)] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">    res[(*returnSize)][<span class="number">0</span>] = left;</span><br><span class="line">    res[(*returnSize)][<span class="number">1</span>] = right;</span><br><span class="line">    (*returnSize)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">63.</span>字符串题要看由什么字符组成</span><br><span class="line">s 由英文字母、数字、符号和空格组成</span><br><span class="line"></span><br><span class="line"><span class="number">64.</span>新建一个数组用来记录出现的元素,并且可以发现重复出现的个数</span><br><span class="line"></span><br><span class="line"><span class="number">65.</span>无重复字符的最长子串</span><br><span class="line">左指针移动是因为右指针找到了重复的元素</span><br><span class="line"></span><br><span class="line"><span class="number">66.f</span>or循环必须这样写</span><br><span class="line"><span class="keyword">for</span> (; i &lt; maxlen; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = s[start++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">67.</span>负数总是用flag=<span class="number">-1</span>与乘法来表示的<span class="keyword">return</span> res*flag;</span><br><span class="line"></span><br><span class="line"><span class="number">68.</span>div=INT_MAX是整数的最大值的取法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note: The returned array must be malloced, assume caller calls free().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span>* rowAndMaximumOnes(<span class="type">int</span>** mat, <span class="type">int</span> matSize, <span class="type">int</span>* matColSize, <span class="type">int</span>* returnSize)&#123;</span><br><span class="line">    <span class="type">int</span> col = matColSize[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> row = matSize;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxNum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *res = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mat[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxNum &lt; cnt) &#123;</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">        maxNum = fmax(maxNum, cnt);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line">    res[<span class="number">0</span>] = index;</span><br><span class="line">    res[<span class="number">1</span>] = maxNum;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxDivScore</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* divisors, <span class="type">int</span> divisorsSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; divisorsSize; k++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m = k + <span class="number">1</span>; m &lt; divisorsSize; m++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(divisors[k] &gt; divisors[m])&#123;</span><br><span class="line">                <span class="type">int</span> temp = divisors[m];</span><br><span class="line">                divisors[m] = divisors[k];</span><br><span class="line">                divisors[k] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; divisorsSize; i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] % divisors[i] == <span class="number">0</span>)</span><br><span class="line">                temp++;</span><br><span class="line">                    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; max)&#123;</span><br><span class="line">            max = temp;</span><br><span class="line">            max1 = divisors[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(max1 == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> divisors[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> max1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">addMinimum</span><span class="params">(<span class="type">char</span> * word)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>, len = <span class="built_in">strlen</span>(word);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; count++, i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(count % <span class="number">3</span> != word[i] - <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(count % <span class="number">3</span> != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count - len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(i * i &lt;= x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">diagonalPrime</span><span class="params">(<span class="type">int</span>** nums, <span class="type">int</span> numsSize, <span class="type">int</span>* numsColSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(nums[i][i]))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = fmax(ans, nums[i][i]); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isPrime(nums[i][numsSize-i<span class="number">-1</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = fmax(ans, nums[i][numsSize-i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># C++部分</span><br><span class="line"><span class="number">1.</span> 常用的类</span><br><span class="line">```c++</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;  <span class="comment">//strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;&gt;  <span class="comment">//&#123;[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;3&quot;,&quot;4&quot;,&quot;1&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]&#125;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">char</span>&gt;  <span class="comment">//[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>常用的类成员</li></ol><p>reverse(nums.begin() + i + 1, nums.end())  &#x2F;&#x2F;将从索引 i + 1 到数组末尾的元素进行反转</p><p>swap(nums[i], nums[j]) &#x2F;&#x2F;用于交换两个值的内容</p><p>vector&lt;vector<int>&gt; ans<br>ans.push_back({nums[first], nums[second], nums[third]})  &#x2F;&#x2F;将一个包含三个整数的向量添加到二维向量</p><p>memset(rows,0,sizeof(rows))  &#x2F;&#x2F;于将指定的内存区域的每个字节都设置为特定的值。在这个特定的上下文中，它被用来将数组 rows 中的每个元素都设置为 0。</p><ol start="3"><li>常用的函数</li></ol><p>sort(nums1.begin(), nums1.end())  &#x2F;&#x2F;排序函数</p><ol start="4"><li>这是一种初始化列表语法，它允许你在返回语句中用一个花括号括起来的列表来初始化一个对象，这里是一个 vector</li></ol><p>class Solution {<br>public:<br>    vector<int> twoSum(vector<int>&amp; nums, int target) {<br>        int n &#x3D; nums.size();<br>        for (int i &#x3D; 0; i &lt; n; ++i) {<br>            for (int j &#x3D; i + 1; j &lt; n; ++j) {<br>                if (nums[i] + nums[j] &#x3D;&#x3D; target) {<br>                    return {i, j};      &#x2F;&#x2F;这里有问题，这样就不用再分配一个数组了<br>                }<br>            }<br>        }<br>        return {};<br>    }<br>};</p><p>或者这样</p><p>return vector<int>{i, j}; </p><ol start="5"><li>计算行和列数</li></ol><p>matrix.size()<br>matrix[0].size()<br>&#96;&#96;&#96;</p>]]></content>
      
      
      <categories>
          
          <category> 分享随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32</title>
      <link href="/2023/07/19/10/"/>
      <url>/2023/07/19/10/</url>
      
        <content type="html"><![CDATA[<h1 id="前言的前言"><a href="#前言的前言" class="headerlink" title="前言的前言"></a>前言的前言</h1><p>文章的原标题是【Stm32学习笔记】，但是在这个浮躁的时代，不当个标题狗是不会有人点进来的。而既然是发布出来了，那肯定是想要别人点个赞，点个收藏关注一下的，所以在发布的时候还是换了一个浮夸点的标题了。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文章主要记录本人在学习stm32过程中的笔记，也插入了不少的例程代码，方便到时候CV。绝大多数内容为本人手写，小部分来自stm32官方的中文参考手册以及网上其他文章；代码部分大多来自江科大和正点原子的例程，注释是我自己添加；配图来自江科大&#x2F;正点原子&#x2F;中文参考手册。</p><p>笔记内容都是平时自己一点点添加，不知不觉都已经这么长了。其实每一个标题其实都可以发一篇，但是这样搞太琐碎了，所以还是就这样吧。</p><p>喜欢的话，就点赞收藏关注一下~</p><p>本人技术有限，如有错误，欢迎在评论区或者私信指点。</p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>本笔记内容以 Stm32F103xx 型号为研究对象。</p><h2 id="Stm32-三种开发方式的区别"><a href="#Stm32-三种开发方式的区别" class="headerlink" title="Stm32 三种开发方式的区别"></a>Stm32 三种开发方式的区别</h2><p>寄存器模式：最底层的开发，运行速度最快。实际上也是使用了固件库，但是不是使用固件库的函数，而是使用了固件库的定义，包括宏定义，结构体定义。和51的开发差不多，但因为32的寄存器太多，实际开发手动配置大量寄存器极其耗费时间，同时在没有注释的情况下可读性差，所以较少使用。<br>标准库模式：基于寄存器进行了函数的封装，而由于函数封装以及内部大量的检查参数有效性的代码，运行速度相对于寄存器模式较慢。封装之后可以根据函数名字就能明白代码作用，容易记忆，使用方便，所以较多人使用。<br>HAL库模式：全称是Hardware Abstraction Layer（抽象印象层），相比于标准库更加深入的封装，有句柄、回调函数等概念（ps:有点类似Windows开发），因此相对于标准库模式有更好的可移植性（可在不同芯片的移植），但代价就是更多的性能损失。<br>说明：运行速度，性能损失的问题，都只是相对问题，实际上大多数情况下都可以忽略。</p><h2 id="为什么Stm32初始化外设都需要先打开时钟"><a href="#为什么Stm32初始化外设都需要先打开时钟" class="headerlink" title="为什么Stm32初始化外设都需要先打开时钟"></a>为什么Stm32初始化外设都需要先打开时钟</h2><p>每个外设都有独立时钟，如果不打开时钟外设就不能用，原因就是为了低功耗节省用电，不用的外设可以不打开时钟<br>开启外设时钟的方法：</p><p>&#x2F;*<br>    AHB外设总线：<br>    DMA1,DMA2,SRAM,FLITF,CRC,FSMC,SDIO<br>*&#x2F;<br>RCC_AHBPeriphClockCmd(RCC_AHBPeriph_CRC,ENABLE);<br>RCC_AHBPeriphClockCmd(RCC_AHBPeriph_CRC,DISABLE);</p><p>&#x2F;*<br>    APB1外设总线：<br>    TIM2,TIM3,TIM4,TIM5,TIM6,TIM7,TIM12,TIM13,TIM14,WWDG<br>    SPI2,SPI3,USART2,USART3,UART4,UART5,I2C1,I2C2,USB,CAN1,CAN2,BKP,PWR,DAC,CEC,<br>*&#x2F;<br>RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);<br>RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,DISABLE);</p><p>&#x2F;*<br>    APB2外设总线：<br>    AFIO,GPIOA,GPIOB,GPIOC,GPIOD,GPIOE,GPIOF,GPIOG,ADC1,ADC2<br>    TIM1,SPI1,TIM8,USART1,ADC3,TIM15,TIM16,TIM17,TIM9,TIM10,TIM11<br>*&#x2F;<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, DISABLE);</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22</p><h2 id="GPIO八种模式"><a href="#GPIO八种模式" class="headerlink" title="GPIO八种模式"></a>GPIO八种模式</h2><p>模式介绍<br>浮空输入GPIO_Mode_IN_FLOATING若引脚悬空，则电平不确定<br>上拉输入GPIO_Mode_IPU内部连接上拉电阻，悬空时默认高电平<br>下拉输入GPIO_Mode_IPD内部连接下拉电阻，悬空时默认低电平<br>模拟输入GPIO_Mode_AINGPIO无效，引脚直接接入内部ADC<br>开漏输出GPIO_Mode_Out_OD高电平为高阻态，低电平接VSS（负极）<br>推挽输出GPIO_Mode_Out_PP高电平接VDD，低电平接VSS<br>复用开漏输出GPIO_Mode_AF_OD由片上外设控制，高电平为高阻态，低电平接VSS<br>复用推挽输出GPIO_Mode_AF_PP由片上外设控制，高电平接VDD，低电平接VSS<br>高阻态是一个数字电路里常见的术语，指的是电路的一种输出状态，既不是高电平也不是低电平，如果高阻态再输入下一级电路的话，对下级电路无任何影响，和没接一样，如果用万用表测的话有可能是高电平也有可能是低电平，随它后面接的东西定的。</p><p>电路分析时高阻态可做开路理解。你可以把它看作输出（输入）电阻非常大。它的极限状态可以认为悬空（开路）。也就是说理论上高阻态不是悬空，它是对地或对电源电阻极大的状态。而实际应用上与引脚的悬空几乎是一样的。</p><p>开漏输出和推挽输出的区别主要是开漏输出只可以输出强低电平，高电平得靠外部电阻拉高。输出端相当于三极管的集电极，适合于做电流型的驱动，其吸收电流的能力相对强(一般20ma以内)；推挽输出可以输出强高、低电平，连接数字器件。</p><p>建议看：推挽 开漏 高阻 这都是谁想出来的词？？</p><p>更加详细请看：GPIO口8种模式详解</p><h2 id="Stm32寄存器映射"><a href="#Stm32寄存器映射" class="headerlink" title="Stm32寄存器映射"></a>Stm32寄存器映射</h2><p>以最简单的GPIO讲，将 GPIOA 相关的固件库代码拿出来变很容易明白。</p><p>#define PERIPH_BASE           ((uint32_t)0x40000000)&#x2F;&#x2F;外设基地址<br>#define APB2PERIPH_BASE       (PERIPH_BASE + 0x10000)&#x2F;&#x2F;APB2总线基地址<br>#define GPIOA_BASE            (APB2PERIPH_BASE + 0x0800)&#x2F;&#x2F;GPIOA 基地址</p><p>typedef struct<br>{<br>  __IO uint32_t CRL;<br>  __IO uint32_t CRH;<br>  __IO uint32_t IDR;<br>  __IO uint32_t ODR;<br>  __IO uint32_t BSRR;<br>  __IO uint32_t BRR;<br>  __IO uint32_t LCKR;<br>} GPIO_TypeDef;</p><p>#define GPIOA               ((GPIO_TypeDef *) GPIOA_BASE)&#x2F;&#x2F;GPIOA结构</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>很明显可以看出来，固件库代码的条理非常清晰，而且非常巧妙。除了第一个外设基地址是固定值，其他的基地址都是通过 上一级基地址+偏移 计算出来的，最后GPIOA是一个 指定地址强制转换结构。</p><p>这样我们如果想要操作寄存器，则可以用</p><p>GPIOA-&gt;CRL&amp;&#x3D;0xFF0FFFFF; &#x2F;&#x2F;将寄存器 20<del>23位 置0<br>GPIOA-&gt;CRL|&#x3D;0x00300000; &#x2F;&#x2F;设置寄存器 20</del>23位，实际作用是设置PA5为推挽输出<br>GPIOA-&gt;ODR|&#x3D;1&lt;&lt;5;    &#x2F;&#x2F;PA5 输出高电平<br>1<br>2<br>3<br>另外可以注意到，所有地址都是使用了#define定义常量值，这是因为编译器在进行项目编译的时候，对于常量间的计算，是能直接优化成常量值。如：</p><p>GPIOA-&gt;CRL&amp;&#x3D;0xFF0FFFFF;<br>&#x2F;&#x2F;进行预编译处理之后为:<br>((GPIO_TypeDef *) ((((uint32_t)0x40000000) + 0x10000) + 0x0800))&amp;&#x3D;0xFF0FFFFF;<br>&#x2F;&#x2F;然后优化为:<br>((GPIO_TypeDef *) ((uint32_t)0x40010800) &amp;&#x3D;0xFF0FFFFF;<br>1<br>2<br>3<br>4<br>5</p><h2 id="Stm32中的位段映射"><a href="#Stm32中的位段映射" class="headerlink" title="Stm32中的位段映射"></a>Stm32中的位段映射</h2><p>Cortex?-M3存储器映像包括两个位段 (bit-band) 区。这两个位段区将别名存储器区中的每个字映射到位段存储器区的一个位，在别名存储区写入一个字具有对位段区的目标位执行读-改-写操作的相同效果。<br>在Stm32F10xxx里，外设寄存器和SRAM都被映射到一个位段区里，这允许执行单一的位段的写和读操作。<br>下面的映射公式给出了别名区中的每个字是如何对应位带区的相应位的：</p><p>bit_word_addr &#x3D; bit_band_base + (byte_offset×32) + (bit_number×4)</p><p>其中：</p><p>bit_word_addr 是别名存储器区中字的地址，它映射到某个目标位。<br>bit_band_base 是别名区的起始地址。<br>byte_offset 是包含目标位的字节在位段里的序号<br>bit_number 是目标位所在位置(0-31)<br>例子： 下面的例子说明如何映射别名区中SRAM地址为 0x20000300 的字节中的 位2：</p><p>0x22006008 &#x3D; 0x22000000 + (0x300×32) + (2×4).</p><p>对 0x22006008 地址的写操作与对SRAM中地址 0x20000300 字节的 位2 执行读-改-写操作有着相 同的效果。<br>读 0x22006008 地址返回SRAM中地址 0x20000300 字节的 位2 的值(0x01 或 0x00)</p><p>本节内容摘抄至 Stm32F10xxx参考手册（中文）.pdf</p><h2 id="Stm32中的时钟系统"><a href="#Stm32中的时钟系统" class="headerlink" title="Stm32中的时钟系统"></a>Stm32中的时钟系统</h2><p>Stm32 有5个时钟源：HSI、 HSE、LSI、LSE、PLL</p><p>中文名称解释<br>HSI高速内部时钟RC振荡器，频率为8MHZ，精度不高。<br>HSE高速外部时钟可接石英&#x2F;陶瓷谐振器，或者接外部时钟源，频率范围为4MHZ<del>16MHz。<br>LSI低速内部时钟RC振荡器，频率为40kHz，提供低功耗时钟。一般用于看门狗(WDG)<br>担当一个低功耗时钟源的角色，它可以在停机和待机模式下保持运行，为独立看门狗和 自动唤醒单元提供时钟。<br>LSE低速外部时钟接频率为32.768kHz的石英晶体。一般用于实时时钟(RTC)<br>PLL锁相环倍频输出本质上与其他四个时钟源不一样，这个时钟源是将 时钟输入源 进行 倍频 再输出<br>时钟输入源可选择为HSI &#x2F; 2 、HSE或 HSE &#x2F; 2 。<br>倍频可选择为2</del>16倍，但是其输出频率最大不得超过72MHZ。<br>倍频器的原理：<a href="https://www.bilibili.com/video/BV1Mq4y1G77m">https://www.bilibili.com/video/BV1Mq4y1G77m</a></p><p>时钟安全系统(CSS)</p><p>Stm32中还有一个时钟安全系统(CSS)，在出现意外情况下还挺有用的。不过既然说是意外，就说明出现的概率并不大，因此这个功能没有什么存在感。</p><p>时钟安全系统可以通过软件被激活。一旦其被激活，时钟监测器将在HSE振荡器启动延迟后被使能，并在HSE时钟关闭后关闭。</p><p>如果HSE时钟发生故障，HSE振荡器将被自动关闭，时钟失效事件将被送到高级定时器(TIM1和 TIM8)的刹车输入端，并产生时钟安全中断CSSI，允许软件完成营救操作。此CSSI中断连接到 Cortex?-M3的NMI中断(不可屏蔽中断)。</p><p>如果HSE振荡器被直接或间接地作为系统时钟，(间接的意思是：它被作为PLL输入时钟，并且 PLL时钟被作为系统时钟)，时钟故障将导致系统时钟自动切换到HSI振荡器，同时外部HSE振荡 器被关闭。在时钟失效时，如果HSE振荡器时钟(被分频或未被分频)是用作系统时钟的PLL的输 入时钟，PLL也将被关闭。</p><p>——Stm32F10xxx参考手册（中文）.pdf</p><h2 id="Stm32外设"><a href="#Stm32外设" class="headerlink" title="Stm32外设"></a>Stm32外设</h2><p>AHB，是Advanced High performance Bus的缩写，高级高性能总线；<br>APB，是Advanced Peripheral Bus的缩写，高级外设总线。</p><p>从图中就可以看出，APB1、APB2都是AHB系统总线进行桥接出来的。另外APB1最高只有36MHz，APB2最高可以达到72MHz。</p><p>Stm32的各种外设：</p><p>IO口 (GPIO)<br>定时器 (TIM)<br>数模转换器 (DAC)<br>模数转换器 (ADC)<br>串口 (UART)<br>串行外设接口 (SPI)<br>集成电路总线 (I2C&#x2F;IIC)<br>集成电路内置音频总线 (IIS&#x2F;I2S)<br>外部中断&#x2F;事件控制器 (EXTI)<br>通用和复用功能IO (AFIO)<br>独立看门狗 (IWDG)<br>窗口看门狗 (WWDG)<br>备份寄存器 (BKP)<br>实时时钟 (RTC)<br>USB全速设备接口 (USB)<br>控制器局域网 (bxCAN)<br>内核外设：</p><p>嵌套中断向量控制器 (NVIC)</p><h2 id="Stm32的端口复用与重映射"><a href="#Stm32的端口复用与重映射" class="headerlink" title="Stm32的端口复用与重映射"></a>Stm32的端口复用与重映射</h2><p>Stm32有很多的IO口，同时有很多的外设。这些IO口默认是用来做普通的输出输入引脚，而配置为外设需要用到IO口，就叫IO口的复用。如：</p><p>管脚名称主功能 (复位后)默认复用功能重定义功能<br>PA9PA9USART1_TX无<br>PA10PA10USART1_RX无<br>&#x2F;*<br>    以下代码则是配置PA9、PA10为复用。<br>    其实PA10作为输入引脚，并不区分复用不复用的，因为输出只能有一个外设控制，但是输入可以多个外设读取，不冲突。<br>*&#x2F;</p><p>&#x2F;&#x2F;需要使能GPIO和复用外设的时钟，使用默认复用功能时，AFIO时钟不需要使能<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</p><p>&#x2F;&#x2F;初始化TX引脚 PA9 为复用推挽输出<br>GPIO_InitTypeDef GPIO_InitStructure;<br>GPIO_InitStructure.GPIO_Mode &#x3D; GPIO_Mode_AF_PP;&#x2F;&#x2F;复用推挽输出<br>GPIO_InitStructure.GPIO_Pin &#x3D; GPIO_Pin_9;<br>GPIO_InitStructure.GPIO_Speed &#x3D; GPIO_Speed_50MHz;<br>GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</p><p>&#x2F;&#x2F;初始化RX引脚 PA10 为上拉输入<br>GPIO_InitStructure.GPIO_Mode &#x3D; GPIO_Mode_IPU;<br>GPIO_InitStructure.GPIO_Pin &#x3D; GPIO_Pin_10;<br>GPIO_InitStructure.GPIO_Speed &#x3D; GPIO_Speed_50MHz;<br>GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>每个内置外设都有若干个输入输出引脚，一般这些引脚的输出端口都是固定不变的。但在实际使用中，为了让设计工程师可以更好地安排引脚的走向和功能，在Stm32中引入了外设引脚重映射的概念。即一个外设的引脚除了具有默认的端口外，还可以通过设置重映射寄存器的方式，把这个外设的引脚映射到其它的端口。</p><p>管脚名称主功能 (复位后)默认复用功能重定义功能<br>PB6PB61I2C1_SCL &#x2F; TIM4_CH1USART1_TX<br>PB7PB7I2C1_SDA &#x2F; FSMC_NADV &#x2F; TIM4_CH2USART1_RX<br>如 外设的 USART1_TX 引脚除了PA9外，还可以使用PB6。</p><p>&#x2F;&#x2F;使能重映射之后的GPIO时钟<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);<br>&#x2F;&#x2F;使能复用外设的时钟<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<br>&#x2F;&#x2F;重映射需要使能AFIO时钟，因为下一行代码是配置AFIO_MAPR寄存器<br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</p><p>&#x2F;&#x2F;实际上是对AFIO进行操作：重映射引脚<br>GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);</p><p>&#x2F;&#x2F;初始化PB6与PB7引脚，略<br>&#x2F;&#x2F;…<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>部分重映射&amp;完全重映射<br>部分重映射：功能外设的部分引脚重新映射，还有一部分引脚是原来的默认引脚<br>完全重映射：功能外设的所有引脚都重新映射</p><p>何时需要使能AFIO时钟？<br>根据手册说明：对寄存器AFIO_EVCR(事件控制寄存器)、AFIO_MAPR(复用重映射和调试I&#x2F;O配置寄存器)和AFIO_EXTICRX(外部中断配置寄存器) 进行读写操作前，应当首先打开AFIO 的时钟。</p><p>说人话就是在用到 外部中断 和 端口重映射 的时候要使能AFIO时钟</p><h2 id="Stm32中断"><a href="#Stm32中断" class="headerlink" title="Stm32中断"></a>Stm32中断</h2><p>Stm32F103xx 中有60个可编程外设中断。配置中断的代码如下：</p><p>抢占优先级：优先级高的能打断优先级低<br>响应优先级：当抢占优先级相同时，响应优先级高的先执行</p><p>注意：优先级的值越小，优先级越高(越先执行)</p><p>总结：抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，抢占优先级和响应优先级均相同的按中断号排队</p><p>可能有些朋友没办法理解响应优先级的优先排队的作用，那我再解释一下优先排队的概念：</p><p>假设一个[抢占优先级&#x3D;0]的中断①进行过程中，先触发了[抢占优先级&#x3D;1,响应优先级&#x3D;2]的中断②，再触发了[抢占优先级&#x3D;1,响应优先级&#x3D;1]的中断③</p><p>则中断①结束后，理论上应该按照先来后到先执行中断②，然后再执行中断③的，但实际上因为中断③响应优先级更高，因此中断③拥有优先排队(插队)的权限，因此最终是先执行中断③，再执行中断②</p><p>#define NVIC_PriorityGroup_0         ((uint32_t)0x700) &#x2F;&#x2F; 0位抢先优先级、4位响应优先级<br>#define NVIC_PriorityGroup_1         ((uint32_t)0x600) &#x2F;&#x2F; 1位抢先优先级、3位响应优先级<br>#define NVIC_PriorityGroup_2         ((uint32_t)0x500) &#x2F;&#x2F; 2位抢先优先级、2位响应优先级<br>#define NVIC_PriorityGroup_3         ((uint32_t)0x400) &#x2F;&#x2F; 3位抢先优先级、1位响应优先级<br>#define NVIC_PriorityGroup_4         ((uint32_t)0x300) &#x2F;&#x2F; 4位抢先优先级、0位响应优先级</p><p>NVIC_PriorityGroupConfig (NVIC_PriorityGroup_2);&#x2F;&#x2F;设置优先级分配配置</p><p>NVIC_InitTypeDef NVIC_InitStructure;<br>NVIC_InitStructure.NVIC_IRQChannel &#x3D; USART1_IRQn;&#x2F;&#x2F;设置中断通道类型<br>NVIC_InitStructure.NVIC_IRQChannelCmd &#x3D; ENABLE;&#x2F;&#x2F;设置中断使能<br>&#x2F;<em>优先级的值越小，优先级越高(越先执行)</em>&#x2F;<br>NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority &#x3D; 1; &#x2F;&#x2F;设置抢占优先级<br>NVIC_InitStructure.NVIC_IRQChannelSubPriority &#x3D; 1;&#x2F;&#x2F;设置响应优先级</p><p>NVIC_Init(&amp;NVIC_InitStructure);&#x2F;&#x2F;初始化中断通道</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16</p><h2 id="Stm32的USART使用"><a href="#Stm32的USART使用" class="headerlink" title="Stm32的USART使用"></a>Stm32的USART使用</h2><p>void Serial_Init(void)<br>{<br>    &#x2F;&#x2F;使用之前需要先启用外设 USART1,GPIOA<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</p><pre><code>//初始化TX引脚 PA9 为复用推挽输出 GPIO_InitTypeDef GPIO_InitStructure;GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化RX引脚 PA10 为上拉输入GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化 USART1 为波特率9600，无硬流控，需要收发，无校验，1位停止位USART_InitTypeDef USART_InitStructure;USART_InitStructure.USART_BaudRate = 9600;USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;USART_InitStructure.USART_Parity = USART_Parity_No;USART_InitStructure.USART_StopBits = USART_StopBits_1;USART_InitStructure.USART_WordLength = USART_WordLength_8b;USART_Init(USART1, &amp;USART_InitStructure);//开启RXNE标志位到NVIC的输出USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//设置优先级分配配置NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//配置 USART1 的中断NVIC_InitTypeDef NVIC_InitStructure;NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;NVIC_Init(&amp;NVIC_InitStructure);//最后使能 USART1USART_Cmd(USART1, ENABLE);</code></pre><p>}</p><p>void Serial_SendByte(uint8_t Byte)<br>{<br>    USART_SendData(USART1, Byte);&#x2F;&#x2F;填充数据至 USART1的DR寄存器</p><pre><code>//USART_FLAG_TXE: 发送寄存器为空标志位。对USART_DR的写操作时，将该位清零。while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);//等待发送完成</code></pre><p>}</p><p>&#x2F;&#x2F;USART1 中断函数<br>void USART1_IRQHandler(void)<br>{<br>    if (USART_GetITStatus(USART1, USART_IT_RXNE) &#x3D;&#x3D; SET)<br>    {<br>        uint8_t Serial_RxData &#x3D; USART_ReceiveData(USART1);&#x2F;&#x2F;读取 USART1 收到的字节</p><pre><code>    /*        USART_ClearITPendingBit(USART1, USART_IT_RXNE);        这里可以省略手动清除标志位，因为对USART_DR的读操作可以将该位清零。    */&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70</p><h2 id="Stm32的外部中断-EXTI"><a href="#Stm32的外部中断-EXTI" class="headerlink" title="Stm32的外部中断 (EXTI)"></a>Stm32的外部中断 (EXTI)</h2><p>&#x2F;*<br>    配置外部中断的示例代码<br>*&#x2F;<br>void EXTI(void)<br>{<br>    &#x2F;&#x2F;使能GPIOA时钟<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<br>    &#x2F;&#x2F;因为使用到了AFIO的中断引脚选择功能，所以要使能AFIO的时钟<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);</p><pre><code>GPIO_InitTypeDef GPIO_InitStructure;GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//实际上是对AFIO进行操作：将PA14信号输出至EXTI的14号线GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource14);//初始化EXTIEXTI_InitTypeDef EXTI_InitStructure;EXTI_InitStructure.EXTI_Line = EXTI_Line14;EXTI_InitStructure.EXTI_LineCmd = ENABLE;EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;//使用中断EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;//下降沿触发EXTI_Init(&amp;EXTI_InitStructure);//设置优先级分配配置NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//配置外部中断NVIC_InitTypeDef NVIC_InitStructure;NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;NVIC_Init(&amp;NVIC_InitStructure);</code></pre><p>}</p><p>&#x2F;&#x2F;中断函数<br>void EXTI15_10_IRQHandler(void)<br>{<br>    if (EXTI_GetITStatus(EXTI_Line14) &#x3D;&#x3D; SET)<br>    {</p><pre><code>     //清除中断标志位    EXTI_ClearITPendingBit(EXTI_Line14);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>Stm32库函数 EXTI_GetFlagStatus 和 EXTI_GetITStatus 区别<br>FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)<br>{<br>  FlagStatus bitstatus &#x3D; RESET;<br>  &#x2F;* Check the parameters *&#x2F;<br>  assert_param(IS_GET_EXTI_LINE(EXTI_Line));</p><p>  if ((EXTI-&gt;PR &amp; EXTI_Line) !&#x3D; (uint32_t)RESET)<br>  {<br>    bitstatus &#x3D; SET;<br>  }<br>  else<br>  {<br>    bitstatus &#x3D; RESET;<br>  }<br>  return bitstatus;<br>}</p><p>ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)<br>{<br>  ITStatus bitstatus &#x3D; RESET;<br>  uint32_t enablestatus &#x3D; 0;<br>  &#x2F;* Check the parameters *&#x2F;<br>  assert_param(IS_GET_EXTI_LINE(EXTI_Line));</p><p>  enablestatus &#x3D;  EXTI-&gt;IMR &amp; EXTI_Line;<br>  if (((EXTI-&gt;PR &amp; EXTI_Line) !&#x3D; (uint32_t)RESET) &amp;&amp; (enablestatus !&#x3D; (uint32_t)RESET))<br>  {<br>    bitstatus &#x3D; SET;<br>  }<br>  else<br>  {<br>    bitstatus &#x3D; RESET;<br>  }<br>  return bitstatus;<br>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>可以很容易看出来，代码上的区别在：</p><p>EXTI_GetFlagStatus 部分：<br>if ((EXTI-&gt;PR &amp; EXTI_Line) !&#x3D; (uint32_t)RESET)</p><p>EXTI_GetITStatus 部分：<br>enablestatus &#x3D;  EXTI-&gt;IMR &amp; EXTI_Line;<br>if (((EXTI-&gt;PR &amp; EXTI_Line) !&#x3D; (uint32_t)RESET) &amp;&amp; (enablestatus !&#x3D; (uint32_t)RESET))<br>1<br>2<br>3<br>4<br>5<br>6<br>即 EXTI_GetITStatus 的判断多了一个条件。</p><p>由手册可以知道：</p><p>EXTI-&gt;PR 是 挂起寄存器，0：没有发生触发请求；1：发生了选择的触发请求<br>EXTI-&gt;IMR 是 中断屏蔽寄存器，0：屏蔽来自线x上的中断请求； 1：开放来自线x上的中断请求。</p><p>因此，EXTI_GetFlagStatus 只是纯粹读取中断标志位的状态，但是实际上这并不准确，因为设置 EXTI_IMR 寄存器可以对该中断进行屏蔽；而 EXTI_GetITStatus 除了读取中断标志位，还查看 EXTI_IMR 寄存器是否对该中断进行屏蔽。</p><p>另外，EXTI_ClearFlag 和 EXTI_ClearITPendingBit 则是什么区别都没有，内部代码完全一样。</p><p>Stm32的电源控制 (PWR)<br>Stm32的工作电压(VDD)为2.0～3.6V。通过内置的电压调节器提供所需的1.8V电源。 当主电源VDD掉电后，通过VBAT脚为实时时钟(RTC)和备份寄存器提供电源。实际上，VBAT脚还可以为 LSE振荡器 和 PC13<del>PC15 端口供电，可以保证当主电源被切断时RTC能继续工作。但当使用VBAT供电时，PC13</del>PC15无法用作GPIO。</p><p>管脚名称主功能 (复位后默认)复用功能功能<br>PC13PC13TAMPER &#x2F; RTC用于侵入检测，RTC校准时钟、RTC闹钟或秒输出<br>PC14PC14OSC32_INLSE引脚<br>PC15PC15OSC32_OUTLSE引脚<br>一般来说，VBAT脚接一个纽扣电池供电，如正点原子的开发板。</p><p>从图中可以看出来，除了上面说到的之外，RCC_BDCR 寄存器也在后备供电区域内。但实际上，RCC_BDCR 寄存器只有 LSEON (外部低速振荡器使能)、LSEBYP (外部低速时钟振荡器旁路)、RTCSEL (RTC时钟源选择) 和 RTCEN (RTC时钟使能)位处于备份域。另外的 LSERDY (外部低速LSE就绪) 与 BDRST (备份域软件复位) 不处于备份域，因为没有必要。</p><p>Stm32中的备份寄存器 (BKP)<br>备份寄存器拥有以下特性</p><p>当VDD电源被切断，他们仍然由VBAT维持供电。<br>20字节数据后备寄存器(中容量和小容量产品)，或84字节(42*16 Bit)数据后备寄存器(大容量和互联型 产品)<br>当系统在待机模式下被唤醒，或系统复位或 电源复位时，他们也不会被复位。<br>BKP寄存器是16位的可寻址寄存器，可以用半字(16位)或字(32位)的方式操作这些外设寄存器。<br>备份寄存器的复位</p><p>软件复位，备份区域复位可由设置备份域控制寄存器 (RCC_BDCR)中的 BDRST位产生<br>在VDD和VBAT两者都掉电的情况下，VDD或VBAT上电将引发备份区域复位。<br>后备区域的保护</p><p>在复位之后，对 后备区域(备份寄存器和RTC) 的访问将被禁止，后备区域被保护以防止可能存在的意外的写操作。<br>需要执行以下操作可以使能对后备区域的访问。</p><p>通过设置寄存器 RCC_APB1ENR 的 PWREN 和 BKPEN 位来打开电源和后备接口的时钟<br>说人话就是使能 电源控制 (PWR) 与 备份寄存器 (BKP)的时钟<br>电源控制寄存器(PWR_CR)的DBP位来使能对后备寄存器和RTC的访问<br>&#x2F;*<br>    BKP寄存器基础操作示例<br>*&#x2F;</p><p>RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);&#x2F;&#x2F;使能PWR和BKP外设时钟</p><p>BKP_ReadBackupRegister(BKP_DR1)&#x2F;&#x2F;读取 BKP_DR1 寄存器，启用时钟后就可以读取了<br>BKP_DeInit()&#x2F;&#x2F;对备份寄存器进行软件复位</p><p>PWR_BackupAccessCmd(ENABLE);&#x2F;&#x2F;取消后备区域的写保护，但如果RTC的时钟是HSE&#x2F;128，无法进行写保护。<br>BKP_WriteBackupRegister(BKP_DR1, 0X5050); &#x2F;&#x2F;向 BKP_DR1 寄存器写 0x5050，写之前要取消写保护才可以</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>Stm32中的实时时钟 (RTC)</p><p>RTC的本质与定时器类似，就是一个计数器，每秒加一让其可以实现更新时间。</p><p>RTC的预分配系数最高为2的20次方<br>RTC的计数器是32位的<br>RTC的时钟源可以选择以下三种<br>RCC_RTCCLKSource_LSE：低速外部时钟<br>RCC_RTCCLKSource_LSI：低速内部时钟 (通常用这个作为时钟源，32.768 kHz 进行 32768 分配可以得到 1Hz 的时钟信号)<br>RCC_RTCCLKSource_HSE_Div128：高速外部时钟的128分频<br>RTC的3个可屏蔽中断<br>闹钟中断：用来产生一个软件可编程的闹钟中断<br>秒中断：用来产生一个可编程的周期性中断信号(最长可达1秒)<br>溢出中断：指示内部可编程计数器溢出并回转为0的状态<br>RTC的时钟源的配置是设置 备份域控制寄存器 (RCC_BDCR) 里的 RTCSEL[1:0] 位。因此，除非备份域复位，不然此选择不能被改变。</p><p>读RTC寄存器</p><p>RTC核完全独立于RTC APB1接口。软件通过APB1接口访问RTC的预分频值、计数器值和闹钟值。但是，相关的可读寄存器只在与 RTC APB1时钟进行重新同步的RTC时钟的上升沿被更新。(RTC标志也是如此的)</p><p>这意味着，如果APB1接口曾经被关闭，而读操作又是在刚刚重新开启APB1之后，则在第一次的内部寄存器更新之前，从APB1上读出的RTC寄存器数值可能被破坏了(通常读到0)。</p><p>下述几种情况下能够发生这种情形：</p><p>发生系统复位或电源复位<br>系统刚从待机模式唤醒<br>系统刚从停机模式唤醒<br>所有以上情况中，APB1接口被禁止时(复位、无时钟或断电)，RTC核仍保持运行状态。</p><p>因此，若在读取RTC寄存器时，RTC的APB1接口曾经处于禁止状态，则软件首先必须等待 RTC_CRL寄存器中的RSF位(寄存器同步标志)被硬件置’1’。</p><p>写RTC寄存器</p><p>必须设置RTC_CRL寄存器中的CNF位，使RTC进入配置模式后，才能写入 RTC_PRL(预分频装载寄存器) 、 RTC_CNT(计数器寄存器) 、 RTC_ALR(闹钟寄存器)。<br>另外，对RTC任何寄存器的写操作，都必须在前一次写操作结束后进行。可以通过查询 RTC_CR寄存器中的RTOFF状态位，判断RTC寄存器是否处于更新中。仅当RTOFF状态位是’1’ 时，才可以写入RTC寄存器。</p><p>配置过程：</p><p>查询RTOFF位，直到RTOFF的值变为’1’<br>置CNF值为1，进入配置模式<br>对一个或多个RTC寄存器进行写操作<br>清除CNF标志位，退出配置模式<br>查询RTOFF，直至RTOFF位变为’1’以确认写操作已经完成。<br>仅当CNF标志位被清除时，写操作才能进行，这个过程至少需要3个RTCCLK周期。</p><p>&#x2F;*<br>    RTC初始化与中断<br>*&#x2F;</p><p>u8 RTC_Init(void)<br>{<br>    u8 temp &#x3D; 0;<br>    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE); &#x2F;&#x2F; 使能PWR和BKP外设时钟<br>    PWR_BackupAccessCmd(ENABLE);&#x2F;&#x2F; 取消后备区域(RTC和后备寄存器)的写保护</p><pre><code>// 判断if (BKP_ReadBackupRegister(BKP_DR1) != 0x5050)&#123;    BKP_DeInit();//对备份寄存器进行软件复位    RCC_LSEConfig(RCC_LSE_ON); //使能 外设低速晶振        //检查指定的RCC标志位设置与否,等待低速晶振就绪    while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET &amp;&amp; temp &lt; 250)    &#123;        temp++;        delay_ms(10);    &#125;        if (temp &gt;= 250)        return 1;     //超时说明初始化时钟失败,晶振有问题        RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);    //设置 LSE 作为 RTC时钟源    RCC_RTCCLKCmd(ENABLE);  //使能RTC时钟，要先设置时钟源         RTC_WaitForSynchro();   // 等待RTC寄存器同步        RTC_WaitForLastTask();  // 等待最近一次对RTC寄存器的写操作完成    RTC_ITConfig(RTC_IT_SEC, ENABLE);   // 使能RTCf的秒中断        RTC_WaitForLastTask();  // 等待最近一次对RTC寄存器的写操作完成    RTC_SetPrescaler(32767);  // 设置RTC预分频的值        RTC_WaitForLastTask();  // 等待最近一次对RTC寄存器的写操作完成    RTC_SetCounter(123456);     // 设置计数值(时间戳)        /*        实际上用不上，因为库函数封装中已经包含，不需要自己手动额外写        RTC_EnterConfigMode();  // 允许配置        RTC_ExitConfigMode();  // 退出配置模式    */    BKP_WriteBackupRegister(BKP_DR1, 0X5050); // 向指定的后备寄存器中写入用户程序数据&#125;else // 系统继续计时&#123;    RTC_WaitForSynchro();  // 等待RTC寄存器同步    RTC_ITConfig(RTC_IT_SEC, ENABLE);  // 使能RTC秒中断    RTC_WaitForLastTask();  // 等待最近一次对RTC寄存器的写操作完成&#125;//初始化中断通道NVIC_InitTypeDef NVIC_InitStructure;NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;  // RTC全局中断NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // 先占优先级1位,从优先级3位NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;  // 先占优先级0位,从优先级4位NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;  // 使能该通道中断NVIC_Init(&amp;NVIC_InitStructure);return 0;</code></pre><p>}</p><p>void RTC_IRQHandler(void)<br>{<br>    if (RTC_GetITStatus(RTC_IT_SEC) !&#x3D; RESET) &#x2F;&#x2F; 秒钟中断<br>    {<br>        RTC_WaitForSynchro();&#x2F;&#x2F; 等待RTC寄存器同步,读取RTC寄存器前必须做<br>        RTC_GetCounter();    &#x2F;&#x2F; 获取当前计数值(时间戳)<br>    }<br>    if (RTC_GetITStatus(RTC_IT_ALR) !&#x3D; RESET) &#x2F;&#x2F; 闹钟中断<br>    {<br>        RTC_ClearITPendingBit(RTC_IT_ALR);&#x2F;&#x2F; 清闹钟中断</p><pre><code>&#125;RTC_ClearITPendingBit(RTC_IT_SEC | RTC_IT_OW); // 清秒中断与溢出中断RTC_WaitForLastTask();</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>Stm32的低功耗模式<br>Stm32F10xxx有三种低功耗模式：</p><p>WFI：等待中断，如果执行WFI指令进入睡眠模式，任意一个被嵌套向量中断控制器响应的外设中断都能将系统从 睡眠模式唤醒<br>WFE：等待事件，如果执行WFE指令进入睡眠模式，则一旦发生唤醒事件时，微处理器都将从睡眠模式退出</p><p>除了进行低功耗模式外，还可以在正常运行时使用下面方法降低功耗：</p><p>降低系统时钟<br>关闭APB和AHB总线上未被使用的外设时钟<br>睡眠模式：</p><p>在睡眠模式下，仅停止CPU运作，对于其他外设，将保持原本进入睡眠模式的状态。</p><p>有两种选项可用于选择睡眠模式进入机制</p><p>SLEEP-NOW：如果SLEEPONEXIT位被清除，当WRI或WFE被执行时，微控制器立即进入睡眠模式。<br>SLEEP-ON-EXIT：如果SLEEPONEXIT位被置位，系统从最低优先级的中断处理程序中退出时，微控制器就立即进入睡眠模式<br>区别就是在于是否处理完当前的中断再进入睡眠，因为一般来说，中断具有很高的实时性，不应该在中断中途进入睡眠。</p><p>停止模式：</p><p>在停止模式下，除了SRAM(内存)和寄存器内容被保留下来外，其他时钟将会被停止，所有的I&#x2F;O引脚都保持它们在运行模式时的状态。另外，</p><p>进入停止模式需要等待闪存编程与APB访问完成，不然会等待完成再进入。</p><p>当一个中断或唤醒事件导致退出停止模式时，HSI RC振荡器将被选为系统时钟。</p><p>为了进入停止模式，所有的外部中断的请求位(挂起寄存器(EXTI_PR))和RTC的闹钟标志都必须被清除，否则停止模式的进入流程将会被跳过，程序继续运行。</p><p>说人话就是要把中断标志清除，不然刚进入停止模式就会被唤醒，相对于没进</p><p>进入停止模式可以配置以下外设正常运行：</p><p>独立看门狗(IWDG)：可通过写入看门狗的键寄存器或硬件选择来启动IWDG。一旦启动了独立看门狗，除了系统复位，它不能再被停止</p><p>实时时钟(RTC)：通过备份域控制寄存器 (RCC_BDCR)的RTCEN位来设置</p><p>内部RC振荡器(LSI RC)：通过控制&#x2F;状态寄存器 (RCC_CSR)的LSION位来设置</p><p>外部32.768kHz振荡器(LSE)：通过备份域控制寄存器 (RCC_BDCR)的LSEON位设置</p><p>ADC与DAC：如果在进入该模式前ADC和DAC没有被关闭，那么这些外设仍然消耗电流。通过设置寄存器ADC_CR2 的 ADON 位和寄存器 DAC_CR 的 ENx 位为0可关闭这2个外设</p><p>电压调节器：可以通过配置电源控制寄存器(PWR_CR)的LPDS位使其运行在正常或低功耗模式。</p><p>若配置电压调节器为低功耗模式，当系统从停止模式退出时，将会有一段额外的启动延时(HSI RC唤醒时间 + 电压调节器从低功耗唤醒的时间)。</p><p>如果在停止模式期间保持内部调节器开启，则退出启动时间会缩短，但相应的功耗会增加。</p><p>待机模式：</p><p>待机模式可实现系统的最低功耗，待机模式下只有备份寄存器和待机电路维持供电。从待机唤醒后，差不多和复位一次差不多，除了电源控制&#x2F;状 态寄存器(PWR_CSR)，所有寄存器被复位。SRAM和寄存器内容全部丢失。</p><p>进入待机模式可以配置正常运行的外设只有停机模式的前四项。</p><p>在待机模式下，所有的I&#x2F;O引脚处于高阻态，除了以下的引脚： 复位引脚(始终有效)、当被设置为防侵入或校准输出时的TAMPER引脚、被使能的唤醒引脚</p><p>简单总结一下：</p><p>睡眠模式：仅CPU停止运行，GPIO保存进入睡眠之前状态。<br>停止模式：仅保留SRAM(内存)和寄存器的数据，GPIO保存进入睡眠之前状态。<br>待机模式：仅保留备份寄存器，GPIO保持高阻态</p><p>低功耗模式下的自动唤醒(AWU) ：</p><p>利用RTC可以实现定时唤醒低功耗模式，实际上是使用了RTC的闹钟中断。</p><p>若要实现低功耗模式下的自动唤醒，RTC的时钟源只能选择：低功耗32.768kHz外部晶振(LSE) 或者 低功耗内部RC振荡器(LSI RC)。</p><p>为了用RTC闹钟事件将系统从停止模式下唤醒，必须进行如下操作：</p><p>配置外部中断线17为上升沿触发 (若要从待机模式唤醒则不必配置)<br>配置RTC使其可产生RTC闹钟事件<br>&#x2F;*<br>    三种模式的进入代码示例<br>*&#x2F;</p><p>&#x2F;<em>进入睡眠模式</em>&#x2F;<br>&#x2F;*<br>    WFI与WFE属于ARM核心指令，库函数中是汇编指令。<br>    SLEEPONEXIT与_SLEEPONEXIT位属于ARM架构的寄存器，在Stm32手册中没有讲到寄存器地址，但是固件库也定义了相关的内容。<br>    进入睡眠模式库函数没有封装，因此只能自己动手丰衣足食。<br>*&#x2F;</p><p>&#x2F;&#x2F;理论上SLEEPDEEP位应该是不需要手动清除的，它默认为0，但是为了防止意外情况，就多写一行代码。<br>SCB-&gt;SCR &amp;&#x3D; (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);&#x2F;&#x2F;清除深睡眠(SLEEPDEEP)位</p><p>&#x2F;&#x2F;根据需要选择是否允许在中断过程中进入睡眠<br>SCB-&gt;SCR &amp;&#x3D; (uint32_t)~((uint32_t)SCB_SCR_SLEEPONEXIT);&#x2F;&#x2F;清除SCB_SCR_SLEEPONEXIT位，SLEEP-NOW<br>&#x2F;&#x2F;SCB-&gt;SCR |&#x3D; SCB_SCR_SLEEPONEXIT;   &#x2F;&#x2F;设置SCB_SCR_SLEEPONEXIT位，SLEEP-ON-EXIT</p><p>__WFI();&#x2F;&#x2F;进入等待中断的睡眠。与下面一行二选一即可</p><p>__WFE();&#x2F;&#x2F;进入等待事件的睡眠。</p><p>&#x2F;<em>进入停机模式</em>&#x2F;<br>RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);&#x2F;&#x2F;使能PWR外设时钟<br>PWR_EnterSTOPMode(PWR_Regulator_ON, PWR_STOPEntry_WFI);&#x2F;&#x2F;电压调节器开，等待中断模式</p><p>&#x2F;<em>进入待机模式</em>&#x2F;<br>RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);&#x2F;&#x2F;使能PWR外设时钟<br>PWR_WakeUpPinCmd(ENABLE);  &#x2F;&#x2F;使能PA0引脚的唤醒管脚功能，如果不需要使用WKUP引脚上升沿唤醒待机可以注释<br>PWR_EnterSTANDBYMode();   &#x2F;&#x2F;进入待命（STANDBY）模式</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31</p><h2 id="Stm32的模数转换-ADC"><a href="#Stm32的模数转换-ADC" class="headerlink" title="Stm32的模数转换(ADC)"></a>Stm32的模数转换(ADC)</h2><p>规则组：用于常规使用<br>注入组：用于突发情况使用ADC功能</p><p>规则组和注入组的关系有点类似主线程和中断的关系，若触发开始转换注入组可以 对 正在转换的规则组进行插队。</p><p>输入通道：</p><p>因为Stm32有双ADC模式(两个ADC配合工作)，因此ADC1和ADC2的通道对应的IO基本一样，除了ADC1多出来的温度传感器与内部参考电压通道。</p><p>通道ADC1ADC2ADC3<br>通道0PA0PA0PA0<br>通道1PA1PA1PA1<br>通道2PA2PA2PA2<br>通道3PA3PA3PA3<br>通道4PA4PA4PF6<br>通道5PA5PA5PF7<br>通道6PA6PA6PF8<br>通道7PA7PA7PF9<br>通道8PB0PB0PF10<br>通道9PB1PB1<br>通道10PC0PC0PC0<br>通道11PC1PC1PC1<br>通道12PC2PC2PC2<br>通道13PC3PC3PC3<br>通道14PC4PC4<br>通道15PC5PC5<br>通道16温度传感器<br>通道17内部参考电压<br>ADC配置：</p><p>扫描模式：当开始转换后，会根据ADC通道数量(ADC_InitTypeDef.ADC_NbrOfChannel) 按顺序进行N次转换，全部转换完成后设置 EOC(规则组转换结束) 标志位<br>非扫描模式：当开始转换后，仅会对规则组位置一的通道进行1次转换，转换完成设置 EOC 标志位</p><p>单次转换：在开始转换后，仅仅对规则组整组进行一次转换<br>连续转换：在开始转换后，会循环对规则组整组进行转换</p><p>间断模式：在开始转换后，进行 N 次转换后停下，并记录当前位置，当下次开始转换时按顺序下去。</p><p>需要使用 ADC_DiscModeChannelCountConfig 设置 N 的值，并使用 ADC_DiscModeCmd 使能模式。<br>举例： N&#x3D;3，被转换的通道有 0、1、2、3、6、7、9、10<br>第一次触发：转换的序列为 0、1、2<br>第二次触发：转换的序列为 3、6、7<br>第三次触发：转换的序列为 9、10，并产生EOC事件 (注意这里因为到尾了，所以只转换了两个通道)<br>第四次触发：转换的序列 0、1、2</p><p>总结一下：</p><p>如果将ADC转换比喻为使用音乐软件听歌的话</p><p>ADC_RegularChannelConfig 就是为歌单增加歌曲并设置歌曲的序列<br>ADC_InitTypeDef.ADC_NbrOfChannel 就是歌单中歌曲的数量</p><p>扫描模式 就是 播放整个歌单的全部歌曲<br>非扫描模式 就是只播放歌单的第一首歌曲</p><p>单次转换 就是只播放一次 歌单中全部歌曲(扫描模式) &#x2F; 歌单的第一首歌曲(非扫描模式)<br>连续转换 就是循环播放 歌单中全部歌曲(扫描模式) &#x2F; 歌单的第一首歌曲(非扫描模式)</p><p>扫描模式&amp;单次转换 &#x3D; 歌曲中全部歌曲按顺序全部播放一次<br>非扫描模式&amp;单次转换 &#x3D; 只播放一次歌单的第一首歌曲<br>扫描模式&amp;连续转换 &#x3D; 列表循环<br>非扫描模式&amp;连续转换 &#x3D; 单曲循环</p><p>间断模式 就是一次听 N 首歌曲，并记下听到第几首了，下次接着听下去，当歌单全部歌曲听完后再回到第一首</p><p>校准：</p><p>ADC有一个内置的校准模式，能大幅减少因内部电容器组的变化而造成的准精度误差。因此建议每次上电后都执行一次校准。</p><p>在 Stm32F10xxx参考手册(2009中文版本) 中ADC章节有这样一句话：</p><p>启动校准前，ADC必须处于关电状态(ADON&#x3D;’0’)超过至少两个ADC时钟周期</p><p>事实上，是ST公司的描写错误，而在官网中找到的 2021 版本中已经被更正为</p><p>原文：Before starting a calibration, the ADC must have been in power-on state (ADON bit &#x3D; ‘1’) for at least two ADC clock cycles.<br>翻译：在开始校准之前，ADC必须处于通电状态(ADON位&#x3D;“1”) 至少两个ADC时钟周期。</p><p>void AD_Init(void)<br>{<br>    &#x2F;&#x2F;使能时钟<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</p><pre><code>//配置ADC的时钟周期，RCC_PCLK2_Div6 为高速APB2时钟(PCLK2)的6分频RCC_ADCCLKConfig(RCC_PCLK2_Div6);//配置PA0为输入口，模式为模拟输入(GPIO_Mode_AIN)，该模式是ADC专用GPIO_InitTypeDef GPIO_InitStructure;GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//配置规则组，将通道0放在第一个位置，采样时间为55.5个周期(ADC_SampleTime_55Cycles5)ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_55Cycles5);//初始化ADC1ADC_InitTypeDef ADC_InitStructure;ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;    //工作在独立模式ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;//数据右对齐ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None; //外部触发源选择不使用外部触发ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;//是否启用连续模式ADC_InitStructure.ADC_ScanConvMode = DISABLE;    //是否启用扫描模式ADC_InitStructure.ADC_NbrOfChannel = 1;   //进行ADC的通道数量ADC_Init(ADC1, &amp;ADC_InitStructure);//使能ADC1ADC_Cmd(ADC1, ENABLE);//进行校准ADC_ResetCalibration(ADC1);//将校准复位while (ADC_GetResetCalibrationStatus(ADC1) == SET);  //等待校准复位完成ADC_StartCalibration(ADC1);//开始校准while (ADC_GetCalibrationStatus(ADC1) == SET);  //等待校准完成</code></pre><p>}</p><p>uint16_t AD_GetValue(void)<br>{<br>    ADC_SoftwareStartConvCmd(ADC1, ENABLE);&#x2F;&#x2F;软件触发开始转换<br>    while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) &#x3D;&#x3D; RESET);   &#x2F;&#x2F;等待转换完成<br>    return ADC_GetConversionValue(ADC1);&#x2F;&#x2F;返回转换得到的数值(0~4095)<br>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45</p><h2 id="Stm32中的直接存储器存取-DMA"><a href="#Stm32中的直接存储器存取-DMA" class="headerlink" title="Stm32中的直接存储器存取 (DMA)"></a>Stm32中的直接存储器存取 (DMA)</h2><p>DMA 全程 Direct Memory Access (直接存储器存取)，功能就是数据复制，优点就是能代替CPU负责数据复制，让CPU空出来处理其他任务。<br>另外，根据查资料得到，DMA的搬运速度没有CPU搬运的速度快的。详细可以看这里</p><p>数据复制方向支持：存储器到存储器、存储器到外设、外设到存储器。其中因为Flash一般为只读，所以存储器到存储器为 Flash到SRAM 、SRAM到SRAM。</p><p>数据宽度：<br>支持 字节(Byte，8位)、半字(HalfWord，16位)、字(Word，32位)，支持不同宽度的数据复制，复制对齐为低位对齐。例如：半字(0x1122)复制到字节，则会把低八位复制过去，结果为0x22；半字(0x1122)复制字，则会把半字复制到字的低位，结果为0x00001122。</p><p>地址自增：</p><p>模式：正常模式(复制完就停下)、循环模式(复制完重新开始，循环模式不可用于存储器到存储器)</p><p>DMA1的请求对应通道：</p><p>外设通道1通道2通道3通道4通道5通道6通道7<br>ADC1ADC1<br>SPI&#x2F;I2SSPI1_RXSPI1_TXSPI&#x2F;I2S2_RXSPI&#x2F;I2S2_TX<br>USARTUSART3_TXUSART3_RXUSART1_TXUSART1_RXUSART2_RXUSART2_TX<br>I2CI2C2_TXI2C2_RXI2C1_TXI2C1_RX<br>TIM1TIM1_CH1TIM1_CH2TIM1_TX4<br>TIM1_TRIG<br>TIM1_COMTIM1_UPTIM1_CH3<br>TIM2TIM2_CH3TIM2_UPTIM2_CH1TIM2_CH2<br>TIM2_CH4<br>TIM3TIM3_CH3TIM3_CH4<br>TIM3_UPTIM3_CH1<br>TIM3_TRIG<br>TIM4TIM4_CH1TIM4_CH2TIM4_CH3TIM4_UP<br>DMA2的请求对应通道：</p><p>外设通道1通道2通道3通道4通道5<br>ADC3ADC3<br>SPI &#x2F; I2S3SPI<br>I2S3_RXSPI<br>I2S3_TX<br>UART4UART4_RXUART4_TX<br>SDIOSDIO<br>TIM5TIM5_CH4TIM5_CH3<br>TIM5_UPTIM5_CH2TIM5_CH1<br>TIM6 &#x2F; DAC通道1TIM6_UP<br>DAC通道1<br>TIM7 &#x2F; DAC通道2TIM7_UP<br>DAC通道2<br>TIM8TIM8_CH3<br>TIM8_UPTIM8_CH4<br>TIM8_TRIG<br>TIM8_COMTIM8_CH1TIM8_CH2<br>中断与标志位：</p><p>中断事件事件标志位使能控制位y&#x3D;DMA，x&#x3D;通道<br>传输过半HTIFHTIEDMAy_FLAG_HTx<br>传输完成TCIFTCIEDMAy_FLAG_TCx<br>传输错误TEIFTEIEDMAy_FLAG_TEx<br>DMAy_FLAG_GLx：全局标志，一次性控制三个标志位。</p><p>&#x2F;*<br>    DMA 内存到内存 例子<br>*&#x2F;<br>uint16_t MyDMA_Size;&#x2F;&#x2F;用于二次开始的时候重置复制次数</p><p>void MyDMA_Init(uint32_t AddrA, uint32_t AddrB, uint16_t Size)<br>{<br>    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);&#x2F;&#x2F;使能DMA1的时钟</p><pre><code>MyDMA_Size = Size;//记录一下，开始复制的时候要设置DMA_InitTypeDef DMA_InitStructure;DMA_InitStructure.DMA_PeripheralBaseAddr = AddrA;//外设基地址，当用存储器到存储器时，可写存储器地址DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;//外设数据宽度DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Enable;    //外设地址自增DMA_InitStructure.DMA_MemoryBaseAddr = AddrB;  //存储器基地址DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;    //存储器数据宽度DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;   //存储器地址自增DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;//数据传输方向：SRC外设为源地址，DST外设为目标地址DMA_InitStructure.DMA_BufferSize = Size;//需要复制次数，总复制长度=数据宽度*复制次数DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;//模式：Normal正常模式，Circular循环模式DMA_InitStructure.DMA_M2M = DMA_M2M_Enable;//是否为存储器到存储器(如果是则只能软件触发开始)DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;//优先级:z&#39;jiDMA_Init(DMA1_Channel1, &amp;DMA_InitStructure);//配置DMA1的通道1，这里因为是存储器到存储器，所以通道可以随便选//因为还没有给DMA使能，因此没有开始转换</code></pre><p>}</p><p>void MyDMA_Transfer(void)<br>{<br>    DMA_Cmd(DMA1_Channel1, DISABLE);&#x2F;&#x2F;赋值复制次数之前要失能DMA<br>    DMA_SetCurrDataCounter(DMA1_Channel1, MyDMA_Size);&#x2F;&#x2F;赋值复制次数<br>    DMA_Cmd(DMA1_Channel1, ENABLE);&#x2F;&#x2F;使能DMA，开始转换</p><pre><code>while (DMA_GetFlagStatus(DMA1_FLAG_TC1) == RESET);//等待复制完成DMA_ClearFlag(DMA1_FLAG_TC1);//清除标志位</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>&#x2F;*<br>    DMA 外设到存储器 例子<br>    ADC多通道<br>*&#x2F;</p><p>uint16_t AD_Value[4];&#x2F;&#x2F;用于保存ADC转换完成的结果</p><p>void AD_Init(void)<br>{<br>    &#x2F;&#x2F;使能时钟<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<br>    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);</p><pre><code>//配置ADC时钟频率为APB2时钟的6分频RCC_ADCCLKConfig(RCC_PCLK2_Div6);//配置4个IO口GPIO_InitTypeDef GPIO_InitStructure;GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//配置规则组ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_55Cycles5);ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_55Cycles5);ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_55Cycles5);ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_55Cycles5);//初始化ADC为连续扫描模式ADC_InitTypeDef ADC_InitStructure;ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;ADC_InitStructure.ADC_ScanConvMode = ENABLE;ADC_InitStructure.ADC_NbrOfChannel = 4;ADC_Init(ADC1, &amp;ADC_InitStructure);//具体看上面存储器到存储器例子DMA_InitTypeDef DMA_InitStructure;DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&amp;ADC1-&gt;DR;//外设基地址为ADC1的DR寄存器DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)AD_Value;DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;DMA_InitStructure.DMA_BufferSize = 4;DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;//循环模式DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;DMA_Init(DMA1_Channel1, &amp;DMA_InitStructure);DMA_Cmd(DMA1_Channel1, ENABLE);//使能时钟，因为非存储器到存储器，所以要硬件请求才能触发开始复制ADC_DMACmd(ADC1, ENABLE);    //允许ADC1可以提交请求触发DMA的数据复制ADC_Cmd(ADC1, ENABLE);    //使能ADC//ADC校准ADC_ResetCalibration(ADC1);while (ADC_GetResetCalibrationStatus(ADC1) == SET);ADC_StartCalibration(ADC1);while (ADC_GetCalibrationStatus(ADC1) == SET);ADC_SoftwareStartConvCmd(ADC1, ENABLE);//软件触发开始转换//因为ADC为连续扫描模式、DMA为循环模式，所以只需要触发开始转换后，硬件就会不断得转换并把数据复制到AD_Value 数组</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>Stm32中的集成电路总线 (I2C&#x2F;IIC)<br>在Stm32中使用I2C有两种方案，一是软件模拟I2C，二是硬件I2C。两种方案各有各的优缺点，因此了解清楚才能选择适合的。</p><p>软件模拟I2C<br>优点：可以用在任何GPIO口；不会发生卡死(最多出错)<br>硬件I2C<br>优点：速度比软件模拟快；容易出现卡死的问题<br>关于硬件I2C卡死问题具体可以看</p><p>卡死原因分析：浅谈STM32硬件I2C<br>具体测试结论：STM32 硬件I2C 到底是不是个坑？<br>总结一下Stm32的硬件I2C问题：<br>1.当时钟频率太高时容易出问题，出问题的概率和时钟频率成正比。<br>2.当存在中断会打断硬件IIC工作时(中断会导致)，容易出现问题。</p><p>硬件I2C的发送流程图：</p><p>硬件I2C的接收流程图：</p><p>&#x2F;*<br>    Stm32 使用 硬件I2C 作为主机发送&#x2F;接收 示例代码<br>*&#x2F;</p><p>#define OLED_ADDRESS0x78&#x2F;&#x2F;定义一个OLED模块的从机地址</p><p>void I2C_Config(void)<br>{<br>    &#x2F;&#x2F;使能I2C与GPIO时钟<br>    RCC_APB1PeriphClockCmd (RCC_APB1ENR_I2C1EN, ENABLE);<br>      RCC_APB2PeriphClockCmd (RCC_APB2Periph_GPIOB, ENABLE);</p><pre><code>//初始化GPIO，配置PB6与PB7为复用开漏输出GPIO_InitTypeDef GPIO_InitStructure;GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;GPIO_Init (GPIOB, &amp;GPIO_InitStructure);//开始初始化I2CI2C_InitTypeDef I2C_InitStructure;//使用I2C模式，因为Stm32的I2C硬件外设支持扩展SMBus协议，因此要指定I2C模式I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;//七位从机地址I2C_InitStructure.I2C_OwnAddress1 = 0x11;//自己作为从机时的地址I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;//默认发送应答//配置时钟线(SCL)占空比为低高电平之比为2，仅在I2C的高速模式(100~400 kHz)下有效，标准模式下为1:1//原因是SCL低电平时需要变化SDA电平，因此需要更多时间 I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;//时钟频率，单位Hz，400000 =&gt; 400kHzI2C_InitStructure.I2C_ClockSpeed = 400000;I2C_Init (I2C1, &amp;I2C_InitStructure);I2C_Cmd (I2C1, ENABLE);</code></pre><p>}</p><p>&#x2F;&#x2F;封装一个函数用于等待标准事件，包含超时返回，避免卡死<br>void I2C_WaitEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)<br>{<br>    uint16_t t &#x3D; 10000;<br>    while(!I2C_CheckEvent(I2Cx, I2C_EVENT) &amp;&amp; t–&gt;0);<br>}</p><p>&#x2F;&#x2F;指定地址写<br>void I2C_WriteReg(uint8_t RegAddr, uint8_t Data)<br>{<br>    &#x2F;&#x2F;等待总线不繁忙<br>    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));</p><pre><code>//生成一个起始信号I2C_GenerateSTART (I2C1,ENABLE);I2C_WaitEvent (I2C1, I2C_EVENT_MASTER_MODE_SELECT);//等待EV5//发送七位从机地址(OLED_ADDRESS)进行寻找从机。I2C_Direction_Transmitter表示写，会自动设置最低位为1I2C_Send7bitAddress (I2C1, OLED_ADDRESS, I2C_Direction_Transmitter);I2C_WaitEvent (I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED);//等待EV6//发送一个字节(寄存器地址)I2C_SendData (I2C1, RegAddr);I2C_WaitEvent (I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING);//等待EV8//发送一个字节(数据)I2C_SendData(I2C1, Data);I2C_WaitEvent (I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED);//等待EV8_2//生成停止信号I2C_GenerateSTOP(I2C1, ENABLE);</code></pre><p>}</p><p>&#x2F;&#x2F;指定地址读<br>uint8_t I2C_ReadReg(uint8_t RegAddress)<br>{<br>    uint8_t Data;</p><pre><code>//等待总线不繁忙while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));//生成一个起始信号I2C_GenerateSTART(I2C2, ENABLE);MPU6050_WaitEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT);//等待EV5//发送七位从机地址(OLED_ADDRESS)进行寻找从机。I2C_Direction_Transmitter表示写，会自动设置最低位为1I2C_Send7bitAddress(I2C2, OLED_ADDRESS, I2C_Direction_Transmitter);I2C_WaitEvent(I2C2, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED);//发送一个字节(寄存器地址)I2C_SendData(I2C2, RegAddress);I2C_WaitEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED);//等待EV8_2//再次生成起始信号I2C_GenerateSTART(I2C2, ENABLE);I2C_WaitEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT);//等待EV5//发送七位从机地址(OLED_ADDRESS)进行寻找从机。I2C_Direction_Receiver表示读，会自动设置最低位为0I2C_Send7bitAddress(I2C2, OLED_ADDRESS, I2C_Direction_Receiver);I2C_WaitEvent(I2C2, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED);//等待EV6//需要在接收之前设置为非应答，因为硬件会在接收完后直接发送 应答/非应答，没有等待时间。I2C_AcknowledgeConfig(I2C2, DISABLE);//生成停止信号（但是会在当前字节传输或在当前起始条件发出后产生停止条件，因此可以提前给）I2C_GenerateSTOP(I2C2, ENABLE);I2C_WaitEvent(I2C2, I2C_EVENT_MASTER_BYTE_RECEIVED);//等待EV7Data = I2C_ReceiveData(I2C2);//读取接收到的数据I2C_AcknowledgeConfig(I2C2, ENABLE);//恢复为默认发送应答return Data;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>Stm32中的串行外设接口 (SPI)使用<br>&#x2F;*<br>    SPI使用的示例例子<br>*&#x2F;<br>void SPI2_Init(void)<br>{<br>    &#x2F;&#x2F;使能时钟<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE );<br>    RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,  ENABLE );</p><pre><code>//初始化GPIO，配置PB13、PB14、PB15为复用推挽输出GPIO_InitTypeDef GPIO_InitStructure;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;GPIO_Init(GPIOB, &amp;GPIO_InitStructure);GPIO_SetBits(GPIOB,GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);  //配置PB13、PB14、PB15为上拉//开始 初始化SPISPI_InitTypeDef SPI_InitStructure;//设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;//设置SPI工作模式:设置为主SPISPI_InitStructure.SPI_Mode = SPI_Mode_Master;//设置SPI的数据大小:SPI发送接收8位帧结构SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;//串行同步时钟的空闲状态为高电平SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;//串行同步时钟的第二个跳变沿数据被采样SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;//设置波特率预分频的值:波特率预分频值为256SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;//CRC值计算的多项式SPI_InitStructure.SPI_CRCPolynomial = 7;SPI_Init(SPI2, &amp;SPI_InitStructure);  SPI_Cmd(SPI2, ENABLE);//使能SPI外设SPI2_ReadWriteByte(0xFF);</code></pre><p>}   </p><p>&#x2F;&#x2F;设置 SPI 的波特率预分频值<br>void SPI2_SetSpeed(u8 BaudRatePrescaler)<br>{<br>    assert_param(IS_SPI_BAUDRATE_PRESCALER(BaudRatePrescaler));<br>    SPI2-&gt;CR1 &amp;&#x3D; 0XFFC7;&#x2F;&#x2F;清零位5:3<br>    SPI2-&gt;CR1 |&#x3D; BaudRatePrescaler;&#x2F;&#x2F;设置SPI2速度<br>    SPI_Cmd(SPI2, ENABLE);<br>} </p><p>&#x2F;&#x2F;发送一个数据并收回一个数据<br>u8 SPI2_ReadWriteByte(u8 TxData)<br>{<br>    u8 retry &#x3D; 0;<br>    &#x2F;&#x2F;检查指定的SPI标志位设置与否:发送缓存空标志位<br>    while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) &#x3D;&#x3D; RESET) {<br>        retry++;<br>        if(retry&gt;200)return 0;<br>    }<br>    SPI_I2S_SendData(SPI2, TxData); &#x2F;&#x2F;通过外设SPIx发送一个数据</p><pre><code>retry = 0;//检查指定的SPI标志位设置与否:接受缓存非空标志位while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)&#123;    retry++;    if(retry&gt;200)return 0;&#125;return SPI_I2S_ReceiveData(SPI2); //返回通过SPIx最近接收的数据    </code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82</p><h2 id="Stm32中的控制器局域网-bxCAN-使用"><a href="#Stm32中的控制器局域网-bxCAN-使用" class="headerlink" title="Stm32中的控制器局域网 (bxCAN)使用"></a>Stm32中的控制器局域网 (bxCAN)使用</h2><p>Stm32中的CAN架构：</p><p>设置</p><p>速率：CAN总线的速率常用的都是125k到500k（一般使用500k），尽管它的最大速率是1Mbps。但明显的是，最大值往往要求环境更加高，导致容易出现问题。<br>工作模式：初始化模式、正常模式、睡眠模式<br>测试模式：静默模式、回环模式、回环静默模式<br>调试模式：当MCU处于调试模式时，Cortex-M3核心处于暂停状态，提供配置，可以使bxCAN继续正常工作或停止工作（CAN是异步通讯，因此需要这个）<br>发送：</p><p>3个发送邮箱：可以配置发送优先级(按写入先后 &#x2F; 按标识符数值)<br>自动重传：发送失败则自动重新发送，直至成功<br>接收：</p><p>2个三级深度接收邮箱(FIFO)：共可以接收6个报文</p><p>注：FIFO是英文First In First Out 的缩写，是一种先进先出的数据缓存器</p><p>锁定模式：锁定状态下，接收溢出则丢弃；非锁定状态下，接收溢出则覆盖</p><p>过滤器：</p><p>14个位宽可配置的标识符过滤器组<br>一个位宽可配置为1个32位掩码模式&#x2F;2个32位标识符列表模式&#x2F;2个16位掩码模式&#x2F;4个16位标识符列表模式<br>过滤模式<br>标识符列表模式：丢弃掉非指定标识符的报文<br>掩码模式：可以指定标识符某些位是非必要的后进行比对<br>测试模式图解：</p><p>过滤器：</p><p>CAN_Mode_Init()<br>{<br>    &#x2F;&#x2F;使能时钟<br>    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<br>    RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);</p><pre><code>//初始化CAN_RX为上拉输入GPIO_InitTypeDef GPIO_InitStructure;GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化CAN_TX为复用推挽输出GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; GPIO_Init(GPIOA, &amp;GPIO_InitStructure);// CAN单元设置CAN_InitTypeDef CAN_InitStructure;CAN_InitStructure.CAN_TTCM = DISABLE;//非时间触发通信模式CAN_InitStructure.CAN_ABOM = DISABLE;//软件自动离线管理CAN_InitStructure.CAN_AWUM = DISABLE;//睡眠模式通过软件唤醒(清除CAN-&gt;MCR的SLEEP位)CAN_InitStructure.CAN_NART = ENABLE; //禁止报文自动传送CAN_InitStructure.CAN_RFLM = DISABLE;//报文不锁定,新的覆盖旧的CAN_InitStructure.CAN_TXFP = DISABLE;//优先级由报文标识符决定CAN_InitStructure.CAN_Mode = CAN_Mode_LoopBack;//模式设置： mode:0,普通模式;1,回环模式;// 设置波特率 500kMpsCAN_InitStructure.CAN_Prescaler = 4;//预分频系数CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;//重新同步跳跃宽度 CAN_SJW_1tq ~ CAN_SJW_4tqCAN_InitStructure.CAN_BS1 = CAN_BS1_9tq;//CAN_BS1_1tq ~CAN_BS1_16tqCAN_InitStructure.CAN_BS2 = CAN_BS2_8tq;//CAN_BS2_1tq ~CAN_BS2_8tqCAN_Init(CAN1, &amp;CAN_InitStructure);CAN_FilterInitTypeDef CAN_FilterInitStructure;CAN_FilterInitStructure.CAN_FilterNumber = 0; //过滤器0，可以为0~13CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;//掩码模式CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;//32位CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;//32位标识符CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000; //32位掩码，1:要求一致，0:不限制CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_Filter_FIFO0; // 关联到FIFO0CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;// 使能过滤器0CAN_FilterInit(&amp;CAN_FilterInitStructure); // 滤波器初始化</code></pre><p>&#x2F;* <br>    用于开启中断</p><pre><code>CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE); // FIFO0消息挂号中断允许NVIC_InitTypeDef NVIC_InitStructure;NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1; // 主优先级为1NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;  // 次优先级为0NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;NVIC_Init(&amp;NVIC_InitStructure);</code></pre><p>*&#x2F;<br>}</p><p>&#x2F;&#x2F;中断函数模板<br>void USB_LP_CAN1_RX0_IRQHandler(void)<br>{<br>    CanRxMsg RxMessage;<br>    int i &#x3D; 0;<br>    CAN_Receive(CAN1, 0, &amp;RxMessage);<br>    for (i &#x3D; 0; i &lt; 8; i++)<br>        printf(“rxbuf[%d]:%d\r\n”, i, RxMessage.Data[i]);<br>}</p><p>&#x2F;&#x2F;发送报文，返回0为成功，否则失败<br>u8 Can_Send_Msg(u8 *msg, u8 len)<br>{<br>    u8 mbox;<br>    u16 i &#x3D; 0;<br>    CanTxMsg TxMessage;<br>    TxMessage.StdId &#x3D; 0x12;&#x2F;&#x2F;标准标识符<br>    TxMessage.ExtId &#x3D; 0x12;&#x2F;&#x2F;设置扩展标示符<br>    TxMessage.IDE &#x3D; CAN_Id_Standard; &#x2F;&#x2F;表明为标准帧<br>    TxMessage.RTR &#x3D; CAN_RTR_Data; &#x2F;&#x2F;表明为数据帧<br>    TxMessage.DLC &#x3D; len;&#x2F;&#x2F;要发送的数据长度<br>    for (i &#x3D; 0; i &lt; len; i++) &#x2F;&#x2F;复制数据到结构体<br>        TxMessage.Data[i] &#x3D; msg[i];<br>    mbox &#x3D; CAN_Transmit(CAN1, &amp;TxMessage);&#x2F;&#x2F;填入发送邮箱，mbox为被填入的邮箱号<br>    i &#x3D; 0;<br>    while ((CAN_TransmitStatus(CAN1, mbox) &#x3D;&#x3D; CAN_TxStatus_Failed) &amp;&amp; (i &lt; 0XFFF))<br>        i++; &#x2F;&#x2F;等待发送结束<br>    if (i &#x3D;&#x3D; 0XFFF)<br>        return 1;&#x2F;&#x2F;超时<br>    return 0;<br>}</p><p>&#x2F;&#x2F;接收数据查询，成功返回数据长度，没有返回0<br>u8 Can_Receive_Msg(u8 *buf)<br>{<br>    u32 i;<br>    CanRxMsg RxMessage;<br>    if (CAN_MessagePending(CAN1, CAN_FIFO0) &#x3D;&#x3D; 0)&#x2F;&#x2F;查询邮箱有多少条数据<br>        return 0;<br>    CAN_Receive(CAN1, CAN_FIFO0, &amp;RxMessage); &#x2F;&#x2F;读取数据<br>    for (i &#x3D; 0; i &lt; 8; i++)<br>        buf[i] &#x3D; RxMessage.Data[i];<br>    return RxMessage.DLC;<br>}</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2023/07/16/5/"/>
      <url>/2023/07/16/5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>这是哪托针对老师的课件整理的复习笔记，基础入门，希望能对广大基础小白受用。内容如有错误的地方，劳请留言指正。</p><p>笔记所有代码使用Microsoft VS Code的 Python、Jupyter 插件编译。</p><h1 id="二、语言基础"><a href="#二、语言基础" class="headerlink" title="二、语言基础"></a>二、语言基础</h1><h2 id="2-1标识符"><a href="#2-1标识符" class="headerlink" title="2.1标识符"></a>2.1标识符</h2><h3 id="1-2-1标识符"><a href="#1-2-1标识符" class="headerlink" title="1.2.1标识符"></a>1.2.1标识符</h3><p>标识符可以包括英文、数字以及下划线，并且：</p><p> 开头必须是字母或下划线；</p><p> 不能以数字开头开头；</p><p> 区分大小写的；</p><p> 不能出现分隔符、标点符号或者运算符；</p><p> 不能使用关键字：def if for while class等</p><p> 最好不要使用内置模块名、类型名、函数名、已经导入的模块 及其成员名</p><p>合法的标识符：A、ABC、aBc、a1b2、ab_123、__（连续两个下画线）、_123 等<br>非法的标识符：6a2b、abc-123、hello world（中间用了空格）、for（关键字）等</p><h3 id="1-2-2关键字"><a href="#1-2-2关键字" class="headerlink" title="1.2.2关键字"></a>1.2.2关键字</h3><p>关键字None</p><p>None是一个特殊的Python对象，不是False，不是0，也不是空字符串、空列表等。<br>None有自己的数据类型NoneType，None和任何其他数据类型进行是否相等比较永远返回False。<br>可以将None赋值给任何变量，但是不能创建其他NoneType对象。</p><h3 id="2-1-3变量"><a href="#2-1-3变量" class="headerlink" title="2.1.3变量"></a>2.1.3变量</h3><p>变量： 与 C与Java语言相比</p><p>相同点：</p><p>用于储存计算结果或能表示值<br>可以通过变量名访问，变量值通常是可变的。<br>变量具有名字，不同变量是通过名字相互区分的。<br>不同点：</p><p>变量的数据类型：不需要声明<br>变量的数据类型：可以变化（Python是动态类型语言）。<br>变量使用之前：必须赋值。<br>常量：Python没有常量，即没有语法规则限制改变一个常量的值。</p><p>怎么办呢？<br>使用人为约定。通常用全大写字母表示常量，编程时不要修改它的值。</p><p>常量示例</p><p>TAX_RATE &#x3D; 0.17<br>PI &#x3D; 3.14<br>CUMTXHC &#x3D; “你喜欢我吗”<br>1<br>2<br>3<br>4<br>‘<br>运行运行</p><h2 id="2-2数据类型"><a href="#2-2数据类型" class="headerlink" title="2.2数据类型"></a>2.2数据类型</h2><h3 id="1-整型int"><a href="#1-整型int" class="headerlink" title="1.整型int"></a>1.整型int</h3><p>整数：没有小数部分的数值，分为正整数、0和负整数。</p><p>100、0、 -100</p><p>100#十进制<br>ob101#二进制<br>0o11#八进制<br>0x2F#十六进制<br>1<br>2<br>3<br>4</p><h3 id="2-浮点数float"><a href="#2-浮点数float" class="headerlink" title="2.浮点数float"></a>2.浮点数float</h3><p>浮点数：包含小数点的数。</p><p> 15.0、0.37、-11.2、2.3e2、3.14e-2</p><p>15.0<br>2.3e2#科学计数法<br>3.14e-2<br>1<br>2<br>3<br>‘<br>运行运行</p><h3 id="3-复数complex"><a href="#3-复数complex" class="headerlink" title="3.复数complex"></a>3.复数complex</h3><p>复数由两部分组成：实部和虚部。复数的形式为：实部+虚部j。</p><p> 2+3j、0.5-0.9j都是复数。</p><p>2+3j<br>z&#x3D;0.5-0.9j<br>z.real#复数的实部<br>z.imag#复数的虚部<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>两个注意点：</p><p>Python支持任意大的数字，仅受内存大小的限制（所以在使用时，不用考虑int、float的范围）<br>为了提高可读性，在数值中可以使用下画线</p><h3 id="4-布尔bool"><a href="#4-布尔bool" class="headerlink" title="4.布尔bool"></a>4.布尔bool</h3><p>布尔类型是用来表示逻辑“是”、“非”的一种类型，它只有两个值，True和False （首字母T和F是大写的）</p><p>Python将布尔值True实现为1（int类型），False实现为0，所以可以参与整型运算，但不建议这么做</p><h3 id="5-字符串str"><a href="#5-字符串str" class="headerlink" title="5.字符串str"></a>5.字符串str</h3><p>Python语言中的字符串是一种序列。字符串用单引号、双引号、三引号作为定界符。</p><p>“Python”、’ Hello,World ‘、“123”、’’’abcd8 ^ ‘’’等。</p><h3 id="6-列表-list"><a href="#6-列表-list" class="headerlink" title="6.列表 list"></a>6.列表 list</h3><p>列表也是一种序列类型。列表用方括号“［”和“］”将列表中的元素括起来。元素之间以逗号进行分隔。</p><p>［1,2,3,True］、［“one”,“two”,“three”,“four”］和［3,4.5, “abc”］</p><h3 id="7-元组-tuple"><a href="#7-元组-tuple" class="headerlink" title="7.元组 tuple"></a>7.元组 tuple</h3><p>元组也是一种序列。元组用“(”和“)”作为边界将元素括起来。元素之间以逗号分隔。</p><p>(1,2,3,True)、(“one”,“two”,“three”,“four”)和(3,4.5, “abc”)。</p><h3 id="8-字典-dict"><a href="#8-字典-dict" class="headerlink" title="8.字典 dict"></a>8.字典 dict</h3><p>字典是唯一内建的映射类型，可用来实现通过数据查找关联数据的功能。字典是键值对的无序集合。字典中的每一个元素都包含两部分：键和值。字典用大括号“{”和“}”来表示，每个元素的键和值用冒号分隔，元素之间用逗号分隔。</p><p>{‘1801’:‘张三’, ‘1802’:‘徐虎’, ‘1803’:‘张林’}</p><h3 id="9-集合-set"><a href="#9-集合-set" class="headerlink" title="9.集合 set"></a>9.集合 set</h3><p>集合是由各种不可变类型的元素组成，但元素之间无序，并且元素都不重复。</p><p>{‘car’, ‘ship’, ‘train’, ‘bus’}。</p><h2 id="2-3赋值语句、运算符"><a href="#2-3赋值语句、运算符" class="headerlink" title="2.3赋值语句、运算符"></a>2.3赋值语句、运算符</h2><h3 id="2-3-1赋值语句的格式"><a href="#2-3-1赋值语句的格式" class="headerlink" title="2.3.1赋值语句的格式"></a>2.3.1赋值语句的格式</h3><p>&lt;变量&gt;&#x3D;&lt;表达式&gt;</p><p>#常规：同java<br>#特殊：多变量赋值<br>x,y&#x3D;1,2<br>a &#x3D; b &#x3D; 3<br>#两变量的交换<br>x,y&#x3D;1,2<br>x,y&#x3D;y,x<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行</p><h3 id="2-3-2运算符"><a href="#2-3-2运算符" class="headerlink" title="2.3.2运算符"></a>2.3.2运算符</h3><h5 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1.算数运算符"></a>1.算数运算符</h5><p>在Python中，算术运算符有：+（加）、-（减）、*（乘）、&#x2F;（真除法）、&#x2F;&#x2F;（求整商）、%（取模）、**（幂）。</p><p>需要说明的几点：</p><p>（1） + 运算符不支持不同类型的对象之间的连接</p><p>3+”ab”#错误：不同类型<br>str(3)+”ab”#正确：通过类型转换函数str()将数字3转换成字符串’3’<br>1<br>2<br>（2） * 运算符可以用于列表、元组或字符串与整数的相乘，用于将这些序列重复整数所指定的次数。它不适用于字典和集合与整数的相乘。</p><p>[1,3,5] * 2         # 列表list<br>#[1, 3, 5, 1, 3, 5]<br>(‘a’,’b’,’c’) * 2   # 元组tuple<br>#(‘a’, ‘b’, ‘c’, ‘a’, ‘b’, ‘c’)<br>‘Hello’ * 2         # 字符串str<br>#’HelloHello’<br>{1801:’Lily’} * 2   # 字典dict：不可以。因为字典的键key不能重复。<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>（3）** 运算符：幂运算，与内置函数pow()相同</p><p>（4）&#x2F; 真除法 与 &#x2F;&#x2F;整数除法</p><p>5&#x2F;3         # 真除 1.6666666666666667<br>5&#x2F;&#x2F;3        # 取商的整数部分 1<br>7.4&#x2F;&#x2F;3      # 操作数为实数时，则取实数形式的整数（即*.0） 2.0<br>1<br>2<br>3<br>‘<br>运行运行</p><h4 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h4><p>六个：&lt;（小于）、&lt;&#x3D;（小于等于）、&gt;（大于）、&gt;&#x3D;（大于等于）、&#x3D;&#x3D;（等于）、!&#x3D;（不等于）。</p><p>结果：布尔值True或False</p><p>所有的字符串都是Unicode字符串；</p><p>单个字符：可以通过ord()函数获取该字符的Unicode码，<br>通过chr()函数把编码转换为对应的字符。<br>ord(‘a’)   #97<br>chr(97)  #得到对应的字符 a<br>ord(‘我’)  #25105<br>chr(25105)  #我<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>注意：字符串和数字属于不可比较大小的</p><p>列表比较大小：也是从左到右逐个元素的依次比较，类似 字符串之间的比较</p><p>列表中：字符串与数值也是不能比较的</p><p>[1,2,3]&gt;[‘a’,’b’]          # 出错<br>[‘ab’,’c’,6]&gt;[‘ab’,3,’a’]  # 出错<br>1<br>2<br>（5）关系运算符可以连用，等价于某几个用and连接起来的表达式。注意：C语言和Java语言均不可这么用。</p><p>3&lt;5&gt;2         #与 下式 含义相同 True<br>3&lt;5 and 5&gt;3#True<br>3&lt;5&#x3D;&#x3D;5        #与 下式 含义相同 True<br>3&lt;5 and 5&#x3D;&#x3D;5  #True<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>（6）因为精度问题可能导致实数运算有一定的误差</p><p>要尽可能地避免在实数之间进行相等性判断<br>0.4-0.3          # 有误差了<br>#0.10000000000000003<br>0.1&#x3D;&#x3D;0.4-0.3     # 误差 导致 不相等<br>#Flase<br>#解决方法：使用实数之间的差值的绝对值是否小于某一个很小的数来作为实数之间是否相等的判断。<br>abs(0.1-(0.4-0.3))&lt;0.00000000001    # True，表示 0.1 和 0.4-0.3是相等的<br>#True<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行</p><h4 id="3-测试运算符"><a href="#3-测试运算符" class="headerlink" title="3.测试运算符"></a>3.测试运算符</h4><p>四个：in、not in、is、is not。<br>结果：返回布尔值True或False</p><p>2 in [2,3,4]        # 列表 True<br>a &#x3D; 3<br>a in [2,3,4]        #True</p><p>b&#x3D;”abcedfg”        # 测试 字符串str<br>“ab” in b           #True</p><p>a &#x3D; (1,2,3)<br>b &#x3D; (1,2,3)<br>a is b              # False: 虽然a、b内容一样，但不是同一个对象。<br>a is not b          # True<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>‘<br>运行运行<br>（7）同一性测试运算符is和is not测试是否为同一个对象或内存地址是否相同，返回布尔值True和False。</p><p>x&#x3D;[1,3,5]<br>y&#x3D;[1,3,5]<br>x is y      #测试x、y是否为同一个对象：x，y相等，但不是同一个对象   Flase<br>x is not y  #True<br>x&#x3D;&#x3D;y        #测试x、y是否相等  True<br>1<br>2<br>3<br>4<br>5<br>‘<br>运行运行<br>注意：</p><p>是否相等&#x3D;&#x3D;：只是测试值是否相同，<br>是否为同一个对象is：指的是是否指向同一个对象（如果指向同一个对象，则内存地址应该相同，当然也相等）<br>内置函数id()返回对象的标识（内存地址）</p><p>id(x)       # 每个人运行得到的内存地址可能会不一样   3055563066432<br>z&#x3D;x         # 赋值语句z&#x3D;x，则z和x不仅值相等而且指向同一个对象，z、x的内存地址相同。<br>z is x  #True<br>1<br>2<br>3</p><h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h4><p>在Python中，逻辑运算符有：and（与）、or（或）、not（非）。通过逻辑运算符可以将任意表达式连接在一起。</p><p>哪些是False：False、None、数值类型中的0、空字符串’’、空元组()、空列表[]、空字典{}、空集合{}等</p><p>not False  #True<br>not True   #Flase<br>not 3           # 非零值为True  Flase<br>not 0           # 零值为false   True<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>（10）逻辑操作符and和or也称作短路操作符，具有惰性求值的特点：</p><p>短路运算：表达式从左向右解析，一旦结果可以确定就停止。<br>注意：逻辑运算符and、or不一定会返回布尔值True和False。<br>and(与运算)：结果不一定为True或False</p><p>当计算表达式exp1 and exp2时，<br>①先计算exp1的值，当exp1的值为True或非空值（非0、非None、值非空的其他数据类型），才计算并输出exp2的值；<br>②当exp1的值为False或空值（0、None、值为空的其他数据类型），直接输出exp1的值，不再计算exp2。</p><p>True and 3     # 第一个为True，则输出第二个的值（结果与第二个值有关）：下同   3<br>4 and False  #Flase<br>3&lt;4 and 4&gt;5           # 3&lt;4的值为True，则计算并输出4&gt;5的值False<br>False and 4    # 第一个为False，则不再计算第二个的值，直接输出第一个的值：下同<br>0 and ‘c’             # 直接输出0<br>() and ‘c’            # 直接输出()<br>1<br>2<br>3<br>4<br>5<br>6<br>‘<br>运行运行<br>or或运算：结果不一定为True或False</p><p>当计算表达式exp1 or exp2时：<br>①先计算exp1的值，当exp1的值为True或非空值（非0、非None、值非空的其他数据类型），直接输出exp1的值，不再计算exp2；<br>②当exp1的值为False或空值（0、None、值为空的其他数据类型），才计算并输出exp2的值。</p><p>True or 3    #第一个为True，则不再计算第二个的值，直接输出第一个的值：下同<br>3&lt;4 or 4&gt;5                   #3&lt;4的值为True，则直接输出True<br>False or 4    #第一个为False，则继续计算第二个的值，输出第二个的值：下同<br>0 or ‘c’<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>（11）赋值运算符（&#x3D;）、复合赋值运算符（+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、&#x2F;&#x2F;&#x3D;、%&#x3D;、**&#x3D;）、位运算符（&amp;、|、^等）等。<br>此处基本同C语言。</p><p>(12)特别注意： Python没有自加++与自减–</p><p>（13）优先级小括号（）最高</p><h2 id="2-4从控制台输入和输出"><a href="#2-4从控制台输入和输出" class="headerlink" title="2.4从控制台输入和输出"></a>2.4从控制台输入和输出</h2><h3 id="1-input-函数"><a href="#1-input-函数" class="headerlink" title="1. input()函数"></a>1. input()函数</h3><pre><code>用于输入数据，无论用户输入什么内容，该函数都返回字符串类型。</code></pre><p>其格式如下：</p><p>input(prompt&#x3D;None) # prompt&#x3D;None，表示提示语默认为空</p><p>x &#x3D; input(“请输入x值：”)    # 请输入x值：100<br>type(x)                     # 查看x的类型，为&lt;class ‘str’&gt;   #str<br>1<br>2<br>‘<br>运行运行</p><h3 id="2-类型转换函数"><a href="#2-类型转换函数" class="headerlink" title="2.类型转换函数"></a>2.类型转换函数</h3><p>1）int()函数<br>格式1：int([x])<br>功能：截取数字的整数部分或将字符串转换成一个整数；如果不给定参数则返回0。</p><p>int()           #1、没有参数时：0<br>int(23.74)      #2、浮点数：直接截取整数部分（不进行四舍五入）<br>int(-3.52)<br>int(‘4’)        #3、整数字符串<br>int(‘45.6’)     #4、浮点数字符串：错误  。<br>1<br>2<br>3<br>4<br>5<br>注意：int()函数不接受带小数的数字字符串</p><p>格式2 ：int(x, base&#x3D;10)<br>功能：把base进制的字符串x转换为十进制，base为基数(进制)，默认为十进制<br>base的有效值范围为0和2-36</p><p>int(‘1001001’,2)     #1、二进制的数1001001转换为十进制数    73<br>int(‘2ef’,16)        #2、十六进制的数2ef转换为十进制数   751<br>int(‘27’,8)          #3、八进制的数27转换为十进制数  23<br>int(‘101.001’,2)     #4、不允许二进制的小数（不接受带小数的数字）<br>int(‘0b110’, base&#x3D;0) #5、二进制的数110转换为十进制数  6</p><p>1<br>2<br>3<br>4<br>5<br>6<br>2)float()函数<br>格式：float(x&#x3D;0, &#x2F;)<br>功能：将一个数字或字符串转换成浮点数</p><p>float()         # 默认参数x为0<br>float(‘inf’)  #无穷大，inf不区分大小写<br>int(“3+5”)      # 错误<br>float(“3.5*2”)  # 错误<br>#int()、float()不能转换表达式字符串，所以引入eval()函数<br>1<br>2<br>3<br>4<br>5</p><ol start="3"><li>eval()函数<br> 格式 ：eval(source, globals&#x3D;None, locals&#x3D;None, &#x2F;)<br> 功能：将 source 字符串 当做一个python 表达式 进行解析和计算，返回计算结果。<br> 参数说明：<br> source是一个字符串，这个字符串能表示成Python表达式，或者是能够通过编译的代码；<br> globals是可选的参数，默认为None，如果设置属性不为None的话，就必须是dictionary对象；<br> locals也是可选的参数，默认为None，如果设置属性不为None的话，可以是任何map对象。</li></ol><p>字符串中是表达式：返回表达式的值；<br>字符串中是列表、元组或字典：得到真正的列表、元组或字典；<br>字符串中是能够通过编译的代码：执行代码。<br>x&#x3D;3<br>eval(‘x+1’)            # 表达式：x+1<br>eval(‘3+5’)            #8<br>eval(‘[1,2,3]’)        # 返回列表[1,2,3]<br>eval(‘{1:23,2:32}’)    # 返回字典{1:23,2:32}<br>eval(‘print(3<strong>2)’)     # 执行print(3</strong>2)语句  9<br>eval(“<strong>import</strong>(‘os’).getcwd()”) # 执行语句：获取当前目录<br>#####组合使用： int()、float()、eval()函数和input（）<br>x&#x3D;eval(input(“请输入x值：”))    #输入列表格式：[1,2,3]<br>x                              #获得列表<br>x&#x3D;eval(input(“请输入x值：”))    #输入字典格式：{‘a’:1,’b’:2}<br>x                              #获得字典<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12</p><h3 id="3-数据的输出"><a href="#3-数据的输出" class="headerlink" title="3.数据的输出"></a>3.数据的输出</h3><p>print()函数<br>格式如下:</p><p>print(value, …, sep&#x3D;’ ‘, end&#x3D;’\n’, file&#x3D;sys.stdout, flush&#x3D;False)</p><p>各参数的解释如下:</p><p>value：需要输出的对象，一次可以输出一个或者多个对象(其中…表示任意多个对象)，对象之间要用逗号(,)分隔<br>sep：对象之间的间隔符，默认用一个空格分隔；<br>end：以何字符结尾，默认值是换行符；<br>file：表示输出位置，可将输出到文件，file指定的对象要有“写”的方法，默认值是sys.stdout(标准输出，即控制台屏幕)；<br>flush：将缓存里面的内容是否强制刷新输出，默认值是False（一般不需要）。</p><p>print(‘1.hello’,’world’,’!’)          #一次输出三个对象，中间默认用空格隔开<br>print(‘2.hello’,’world’,’!’,sep&#x3D;’<em>‘)  #一次输出三个对象，中间用</em>隔开<br>print(‘3.hello’,’world’,’!’,sep&#x3D;’’)   #一次输出三个对象，中间无分隔，因为sep参数值被设置为空字符串了<br>print(‘4.hello’,’world’,’!’,end&#x3D;’!’)  #一次输出三个对象，以!结尾（不换行）<br>print(‘5.hello’,’world’,’!’,sep&#x3D;’,’, end&#x3D;’!’)  #一次输出三个对象，以，分隔，以！结尾<br>1<br>2<br>3<br>4<br>5<br>‘<br>运行运行<br>可以看出：print函数默认输出是换行的。如果要实现不换行，需要在变量末尾设置 end参数</p><h2 id="2-5内置函数"><a href="#2-5内置函数" class="headerlink" title="2.5内置函数"></a>2.5内置函数</h2><p>函数功能<br>abs(x)返回数字x的绝对值，如果给出复数，返回值就是该复数的模<br>bin(x)把整数x转换为二进制<br>divmod(x,y)函数返回整商和余数的元组<br>eval(s[,globals[,locals]])计算字符串中表达式的值并返回<br>help(obj)返回对象obj的帮助信息<br>id(obj)返回对象obj的标识（内存地址）<br>input(prompt&#x3D;None, &#x2F;)接受键盘输入，显示提示信息，返回字符串<br>len(obj)返回对象obj（列表、元组、字典、字符串、集合、range对象）的元素个数<br>map(func, *iterables)包含若干函数值的map对象，其中func表示函数，iterables表示迭代对象，将函数作用于迭代对象<br>max(x[,y,z…])、min(x[,y,z…])返回给定参数的最大值、最小值，参数可以为可迭代对象<br>pow(x,y[,z])pow()函数返回以x为底，y为指数的幂。如果给出z值，该函数就计算x的y次幂值被z取模的值<br>print(value, …, sep&#x3D;’ ‘, end&#x3D;’\n’, file&#x3D;sys.stdout, flush&#x3D;False)输出对象，默认输出到屏幕，相邻数据之间使用空格分隔，结尾以换行符结束<br>range([start,]end[,step])返回range对象，该对象包含按参数（[start,end)范围内，step为步长）生成的整数<br>round(x[,n])返回浮点数x的四舍五入值，若不给出n值，则返回整数；给出n值，则代表舍入到小数点后的位数<br>sorted(iterable, &#x2F;, *, key&#x3D;None, reverse&#x3D;False)返回排序后的列表，其中iterable表示要排序的序列或迭代对象，key表示排序规则，reverse表示升序或降序，默认升序<br>sum(iterable, start&#x3D;0, &#x2F;)返回序列iterable中所有元素之和，如果指定起始值start，则返回start+sum(iterable);如果iterable为空，则返回start<br>chr(i)返回Unicode编码为i所对应的字符，0 &lt;&#x3D; i &lt;&#x3D; 0x10ffff<br>complex(real[,imag])把字符串或数字转换为复数，如果第1个参数是字符串，不能使用第2个参数<br>float(x&#x3D;0, &#x2F;)把一个数字或字符串转换成浮点数<br>hex(x)把整数转换成十六进制串<br>int(x[,base])把数字和字符串转换成一个整数，或把base进制的字符串x转换为十进制，base为可选的基数，默认为十进制<br>list([x])、tuple([x])、dict([x])、set([x])将对象x转换成列表、元组、字典、集合，或生成空列表、空元组、空字典、空集合<br>oct(x)把给出的整数x转换成八进制串<br>ord(x)返回一个字符的Unicode编码</p><h1 id="三、流程控制"><a href="#三、流程控制" class="headerlink" title="三、流程控制"></a>三、流程控制</h1><h2 id="3-1分支结构"><a href="#3-1分支结构" class="headerlink" title="3.1分支结构"></a>3.1分支结构</h2><p>单分支if语句</p><p>双分支if&#x2F;else语句</p><p>多分支if&#x2F;elif&#x2F;else语句</p><p>选择结构的‘嵌套’</p><p>选择结构的三元运算</p><p>【注意】：Python没有switch语句</p><p>语法类似于java此处省略</p><h2 id="3-2循环结构"><a href="#3-2循环结构" class="headerlink" title="3.2循环结构"></a>3.2循环结构</h2><p>定义：</p><p>给定的判断条件为真（包括非零、非空）时，重复执行某些操作；<br>判断条件为假（包括零、空）时，结束循环。<br>循环分类：</p><p>while语句<br>for语句<br>循环中断:</p><p>break<br>continue<br>带else的循环语句（Python特有）</p><p>与java类似相关内容请参考java</p><h3 id="3-2-1for循环语句"><a href="#3-2-1for循环语句" class="headerlink" title="3.2.1for循环语句"></a>3.2.1for循环语句</h3><p>for语句通过遍历一个序列（字符串、列表、元组）或迭代器等可迭代对象中的每个元素来建立循环。<br>for语句的语法形式如下所示：</p><p>for  变量   in   序列或迭代器等可迭代对象:<br>    循环体<br>1<br>2<br>补充<br>range（）函数：返回可迭代对象。</p><p>语法格式如下：<br>range(start, stop[, step])</p><p>功能：<br>产生一个从start开始（包括start,默认为0），到stop结束（不包括stop），两个整数对象之间间隔step（默认为1）的可迭代对象。</p><p>可以用for循环直接遍历range函数产生的可迭代对象</p><p>for i in range(0,10):   # 默认step：1<br>    print(i,end&#x3D;’ ‘)<br>for i in range(3,15):<br>    print(i,end&#x3D;’ ‘)<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>range对象可以被转换成列表或元组，例如：</p><p>y&#x3D;list(x)   # range对象转换为list列表对象<br>z&#x3D;tuple(x)  # range对象转换为tuple元组对象<br>1<br>2</p><h3 id="3-2-2-break语句和continue语句"><a href="#3-2-2-break语句和continue语句" class="headerlink" title="3.2.2 break语句和continue语句"></a>3.2.2 break语句和continue语句</h3><p>详细解释：</p><p>break语句：可以用在while和for循环中。在循环进行过程中，如果某个条件被满足（一般通过if语句判断是否满足执行break语句的条件），则可以通过break语句立即终止本层循环。如果break语句在具有两层循环嵌套的内层循环中，则只终止内层循环，进入到外层循环的下一条语句继续执行。<br>continue语句：可以用在while和for循环中。在循环体执行过程中，如果遇到continue语句，程序会跳过本次循环的循环体剩余语句，回到循环开始的地方重新判断是否进入下一次循环。<br>精简：</p><p>break语句终止整个当前循环；<br>continue语句的执行不会终止整个当前循环，只是提前结束本次循环，跳过循环体中本次循环的剩余语句，提前进入到下一次循环。<br>再精简：</p><p>同C语言。</p><h3 id="3-2-3-带else的循环语句（与C语言不同，不建议用）"><a href="#3-2-3-带else的循环语句（与C语言不同，不建议用）" class="headerlink" title="3.2.3 带else的循环语句（与C语言不同，不建议用）"></a>3.2.3 带else的循环语句（与C语言不同，不建议用）</h3><p>Python中的while和for语句后面还可以带有else语句块。</p><p>语句语法如下：</p><p>while 条件表达式:<br>    循环体<br>else：<br>    else语句块<br>1<br>2<br>3<br>4<br>三种执行流程：</p><p>1）正常循环：当条件表达式为真（True、非空、非零）时，反复执行循环体。</p><p>2）执行一次else：当条件表达式为假（False、零、空）而导致循环终止（或无法进入循环），else语句块执行一次，然后结束该循环结构。</p><p>3）不执行else：如果该循环是因为执行了循环体中的break语句而导致循环终止，else语句块不会执行，直接结束该循环结构。</p><p>例：从键盘输入一个正整数n，用while循环找出小于等于该整数n且能被23整除的最大正整数。如果找到了，输出该整数；如果没有找到，则输出“未找到”</p><p>n&#x3D;int(input(‘请输入一个正整数：’))<br>i&#x3D;n<br>while i&gt;0:<br>    if i % 23 &#x3D;&#x3D; 0:<br>        print(“小于等于”,n,”且能被23整除的最大正整数是：”,i)<br>        break<br>    i &#x3D; i-1<br>else:<br>    print(“未找到。”)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>‘<br>运行运行<br>带else的for语句语法如下：</p><p>for 变量 in 序列或迭代器等可迭代对象:<br>    循环体<br>else:<br>    else语句块<br>1<br>2<br>3<br>4</p><h3 id="3-2-4循环嵌套"><a href="#3-2-4循环嵌套" class="headerlink" title="3.2.4循环嵌套"></a>3.2.4循环嵌套</h3><h1 id="四、常用数据结构"><a href="#四、常用数据结构" class="headerlink" title="四、常用数据结构"></a>四、常用数据结构</h1><h2 id="4-1-序列"><a href="#4-1-序列" class="headerlink" title="4.1 序列"></a>4.1 序列</h2><h3 id="4-1-1列表-list"><a href="#4-1-1列表-list" class="headerlink" title="4.1.1列表 list"></a>4.1.1列表 list</h3><p>列表是Python中最基本的数据结构，是最常用的数据类型。</p><p>列表的特点：</p><p>1.列表将由若干数据作为元素的序列放置在一对方括号中，元素之间以逗号分隔。</p><p>2.列表中的元素允许重复。</p><p>3.列表是可以修改的：增删改查。(以上类似数组)</p><p>4.列表元素可以由任意类型的数据构成。同一列表中各元素的类型可以各不相同。（不同于数组）</p><p>列表的操作汇总：</p><p>创建列表： [,]、list()</p><p>访问元素: list1[n]</p><p>更改元素值</p><p>切片: [::]形式</p><p>列表计算： 列表+列表，列表 * 整数</p><p>列表</p><p>方法<br>1<br>-查：.index()、.count()、<br>-增：.extend()、.insert()、.append()、<br>-删：.pop()、.remove()、.clear()<br>-序：.sort()、.reverse()）</p><p>序列函数（不仅仅用于列表）：len()、max()、min()、sorted()、reversed()</p><p>命令：del 列表</p><h3 id="1-列表的创建"><a href="#1-列表的创建" class="headerlink" title="1.列表的创建"></a>1.列表的创建</h3><p>创建 一维列表</p><p>list1 &#x3D; [3.14, 1.61, 0, -9, 6,3.14]  # 1.[,…,]方式: 普通列表<br>list2 &#x3D; [‘train’, ‘bus’, ‘car’, ‘ship’]<br>list3 &#x3D; [‘a’,200,’b’,150, ‘c’,100.5]<br>list4 &#x3D; []                           # 2.[]方式：创建空列表<br>list5&#x3D;list()                         # 3.list()函数</p><p>创建 二维列表</p><p>list_sample&#x3D;[[‘IBM’,’Apple’,’Lenovo’],[‘America’,’America’,’China’]]<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>‘<br>运行运行</p><h2 id="2-列表的元素访问"><a href="#2-列表的元素访问" class="headerlink" title="2.列表的元素访问"></a>2.列表的元素访问</h2><p>索引：列表中的每个元素被关联一个序号，即元素的位置。<br>索引值是从0开始，第二个则是 1，以此类推，从左向右逐渐变大；<br>列表也可以从后往前，索引值从-1开始，从右向左逐渐变小。<br>适用于所有序列类型的对象：列表、元组、字符串</p><h2 id="3-修改元素"><a href="#3-修改元素" class="headerlink" title="3.修改元素"></a>3.修改元素</h2><p>通过重新赋值来更改某个元素的值<br>注意合法索引范围，超过范围则会出错。</p><h2 id="4-列表切片"><a href="#4-列表切片" class="headerlink" title="4.列表切片"></a>4.列表切片</h2><p>在列表中，可以使用切片操作来选取指定位置上的元素组成新的列表。</p><p>简单的切片方式为（步长默认为1）：原列表名[start : end]</p><p>[start：end)：左封闭(能取到)，右开放(取不到)<br>左索引start为0时可缺省，右索引end为列表长度时可缺省。<br>vehicle &#x3D; [‘train’, ‘bus’, ‘car’, ‘ship’]<br>vehicle[0:3]<br>vehicle[0:1]    # 取第0号元素<br>vehicle[:3]     # start缺省：为 0<br>vehicle[3:]     # end缺省：为列表长度4（长度从1开始计算）<br>vehicle[:]      # start、end都缺省：全列表<br>vehicle[3:3]    # start等于end时：空列表<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行<br>也可以使用负数作索引</p><p>vehicle &#x3D; [‘train’,’bus’,’car’,’ship’]<br>vehicle[-3:-1]    # 索引为-3和-2位置上的元素:依然是从左往右取     [‘bus’, ‘car’]<br>vehicle[-2:]    # 索引从-2至列表末尾位置上的元素     [‘car’, ‘ship’]<br>1<br>2<br>3<br>‘<br>运行运行<br>切片步长：非零整数（即可正可负，但不能为0）（跳着切片）</p><p>原列表名[start : end : step]</p><p>步长为1时：参数可以省略。<br>步长不为1时：该参数不可省略。<br>n&#x3D;list(range(10))   # range()函数为0-9的可迭代对象，用list()函数转换为从0到9的列表n<br>n[0:10:2]    # 步长为2，索引值从0开始，每次增长2，但索引值必须小于10。    [0, 2, 4, 6, 8]<br>n[::3]              # [0,3,6,9]<br>n[7:2:-1]        # 步长为负数时，start不能小于end值。    [7, 6, 5, 4, 3]<br>n[11::-2]          # 11超过范围，实际索引从最后一个元素开始。不出错。     [9, 7, 5, 3, 1]<br>n[::-2]            # 这里步长为负数，表示在整个列表内，从后往前取值。     [9, 7, 5, 3, 1]<br>n[::-1]             # 作用：逆序   [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行<br>利用切片还可以更改元素值。有点类似多变量赋值的感觉。</p><p>n[2:4]&#x3D;[110,1]# 分别更改索引号为2和3的位置上元素值。<br>n[-5::2]&#x3D;[-1,-2,-3]# 分别更改索引号为-5、-3、-1三个位置上的元素值。<br>n[2:5]&#x3D;[10,11]      # 少给1个数呢？少的那个数，被删掉了<br>1<br>2<br>3</p><h3 id="5-del命令"><a href="#5-del命令" class="headerlink" title="5. del命令"></a>5. del命令</h3><pre><code>注意是命令，不是函数或方法。</code></pre><p>从列表中删除元素，也可以删除整个列表</p><p>vehicle &#x3D; [‘train’, ‘bus’, ‘car’, ‘ship’]<br>del vehicle[3]<br>vehicle             # 删除了’ship’<br>del vehicle         # 删除列表vehicle<br>vehicle             # 列表vehicle不存在了：再次使用出错<br>1<br>2<br>3<br>4<br>5<br>补充：方法、函数、命令的概念上的区别</p><p>命令：内置命令，没有括号<br>函数：是指内置函数（或用import导入的某模块的函数），直接可以使用，比如pow(2,3)<br>方法：是指某个对象的方法，格式为对象名.方法名()，比如list.sort()，是指列表list对象的sort()方法<br>6.列表运算<br>1)列表相加</p><p>通过列表相加的方法生成新列表<br>支持 复合赋值 +&#x3D;<br>vehicle1 &#x3D; [‘train’, ‘bus’, ‘car’, ‘ship’]<br>vehicle2 &#x3D; [‘subway’, ‘bicycle’]<br>vehicle2 + vehicle1         # 结果为新列表，原列表不变<br>vehicle+&#x3D;[‘bike’]           # 复合赋值语句<br>vehicle1-vehicle2           # 不支持 减 运算：出错<br>1<br>2<br>3<br>4<br>5<br>2)列表乘法</p><p>列表 * 整数n：生成一个新列表。<br>新列表：原来列表的元素重复n次。<br>vehicle1 &#x3D; [‘train’, ‘bus’]<br>vehicle1 * 3      #[‘train’, ‘bus’, ‘train’, ‘bus’, ‘train’, ‘bus’]<br>vehicle &#x3D; vehicle1 * 2  # 相乘语句<br>vehicle *&#x3D; 2            # 复合赋值语句，相当于重新定义了vehicle列表<br>1<br>2<br>3<br>4<br>‘<br>运行运行</p><h3 id="7-列表方法：类型本身的方法"><a href="#7-列表方法：类型本身的方法" class="headerlink" title="7.列表方法：类型本身的方法"></a>7.列表方法：类型本身的方法</h3><ol><li><p>index(value[,start&#x3D;0[,stop]])<br> 返回第一个value值元素索引位置。<br> start没指定：则从索引为0的位置开始查找，否则从索引为strat的位置开始查找。<br> stop没指定：可以查找到列表最后元素，否则在位于[start, stop)内的索引区间查找。<br> 如果找不到匹配项，就会引发异常。<br> vehicle &#x3D; [‘train’, ‘bus’, ‘car’, ‘subway’, ‘ship’, ‘bicycle’, ‘car’]<br> vehicle.index(‘car’)          # 整个列表范围内’car’第1次出现的索引位置是2<br> vehicle.index(‘car’, 3)       # 在从索引为3开始，’car’第1次出现的索引位置是<br> 1<br> 2<br> 3<br> ‘<br> 运行运行</p></li><li><p>count()<br> 统计某个元素在列表中出现的次数。</p></li><li><p>append()<br> 追加单个元素到列表的尾部，只接受<strong>一个</strong>元素<br> 元素可以是任何数据类型，被追加的元素在列表中保持着原结构类型。</p></li><li><p>extend()<br> 在列表的末尾一次性追加另一个列表中的多个值（只能有一个参数）<br> 应用：用新列表扩展原有的列表<br> insert()<br> 将一个元素插入到指定位置。<br> 两个参数：第一个参数是索引点，即插入的位置，第二个参数是插入的元素。<br> vehicle &#x3D; [‘train’, ‘bus’, ‘car’, ‘ship’]<br> vehicle.insert(3,’plane’)   # 插入后，在3位置<br> vehicle.insert(-2,’bike’)   # 注意插入后的位置，在-2位置的前面<br> 1<br> 2<br> 3<br> ‘<br> 运行运行</p></li><li><p>remove()<br> 用于移除列表中与某值匹配的第一个元素<br> 如果找不到匹配项，就会引发异常</p></li><li><p>pop()<br> 移除列表中的一个元素（默认为最后一个元素），并且返回该元素的值（出栈）<br> 可以指定索引位置<br> 当不在索引范围内或者是空列表中，均会触发异常</p></li><li><p>clear()<br> 删除列表中所有元素，但保留列表对象。<br> 请注意与del命令的区别：del命令删除整个列表时，列表对象不再保留</p></li><li><p>reverse()方法<br> 用于将列表中的元素位置反向存放。<br> 列表中可以有不同类型的元素，reverse()方法只是将位置反转</p></li><li><p>sort()<br> 元素排序：默认按<em><strong>升序</strong></em>排列。</p></li></ol><p>两个参数：</p><p>reverse参数：默认为False（升序），若等于True表示降序排序（如果包含的是字符串，按字符串排序规则）。<br>key参数：指定排序方式。<br>numbers&#x3D;[12,34,3.14,99,-10]<br>numbers.sort()              # 按数值大小升序<br>numbers.sort(reverse&#x3D;True)  # 降序<br>numbers.sort(key&#x3D;str)       # 按转换为字符串后的大小升序排列，ASCII码<br>nv&#x3D;[12,’bus’,99,’train’]    # 排序的元素必须是可比较大小（字符串和数值不能比较）<br>nv.sort()<br>1<br>2<br>3<br>4<br>5<br>6<br>8.列表函数：不单单用于列表的函数，也可用于其他数据结构</p><h3 id="9-列表遍历"><a href="#9-列表遍历" class="headerlink" title="9.列表遍历"></a>9.列表遍历</h3><p>通过for语句或者while语句循环遍历所有元素<br>vehicle&#x3D;[‘train’, ‘bus’, ‘car’, ‘subway’, ‘ship’, ‘bicycle’]<br>for i in vehicle:      #1.直接遍历每一个元素<br>    print(i,end&#x3D;’ ‘)<br>i&#x3D;0<br>while i&lt;len(vehicle):       #3.while循环：通过索引遍历每一个元素<br>    print(vehicle[i],end&#x3D;’ ‘)<br>    i+&#x3D;1<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行</p><h2 id="4-1-2元组"><a href="#4-1-2元组" class="headerlink" title="4.1.2元组"></a>4.1.2元组</h2><p>元组和列表十分相似，元组是用一对圆括号（）括起、用逗号分隔的多个元素的组合。</p><p>属于序列：有顺序，可以重复；<br>元组是不可更改的，是不可变对象：元组创建之后就不能修改、添加、删除成员。<br>元组的上述特点使得其在处理数据时效率较高，而且可以防止出现误修改操作。</p><h3 id="1-元组的创建"><a href="#1-元组的创建" class="headerlink" title="1.元组的创建"></a>1.元组的创建</h3><p>tuple1 &#x3D; (‘a’,200,’b’,150, ‘c’,100)  # 1.创建多个元素的元组<br>tuple3 &#x3D; (3,)  #创建单一元素的元组，后面的逗号不能省略(省略后，就变成字符串类型了<br>tuple4&#x3D;()            # 2.创建空元组<br>tuple5 &#x3D; tuple()     # 3.使用tuple函数，创建空元组<br>1<br>2<br>3<br>4<br>‘<br>运行运行</p><h3 id="2-元组的访问"><a href="#2-元组的访问" class="headerlink" title="2.元组的访问"></a>2.元组的访问</h3><p>和列表一样，可以通过索引(访问单个)、切片(访问多个)来访问元组的成员</p><p>vehicle&#x3D;(‘train’, ‘bus’, ‘car’, ‘ship’, ‘subway’, ‘bicycle’)<br>vehicle[-3]           # 索引方式<br>vehicle[0:3:2]        # 切片方式<br>vehicle[1]&#x3D;’bike’     #元组：不能更改元素值。不能赋值。 报错<br>1<br>2<br>3<br>4<br>3.元组的运算<br>1)元组相加<br>通过元组相加的方法生成新元组</p><p>vehicle1 &#x3D; (‘train’, ‘bus’, ‘car’, ‘ship’)<br>vehicle2 &#x3D; (‘subway’, ‘bicycle’)<br>vehicle1 &#x3D; vehicle1 + vehicle2  # 正确：重新定义了vehicle1<br>1<br>2<br>3<br>‘<br>运行运行<br>2)元组相乘<br>用数字n乘以一个元组，会生成一个新元组。<br>在新元组中原来的元组元素将依次被重复n次。<br>vehicle1 &#x3D; (‘train’, ‘bus’, ‘car’, ‘ship’)<br>vehicle1*2<br>1<br>2<br>‘<br>运行运行<br>3).元组的遍历<br>通过for语句或者while语句(同列表方法)</p><h3 id="4-1-3-列表与元组的转换"><a href="#4-1-3-列表与元组的转换" class="headerlink" title="4.1.3 列表与元组的转换"></a>4.1.3 列表与元组的转换</h3><h4 id="1-列表–-gt-元组"><a href="#1-列表–-gt-元组" class="headerlink" title="1.列表–&gt;元组"></a>1.列表–&gt;元组</h4><p>tuple()函数：接受一个列表，并返回一个包含同样元素的元组。<br>从结果上看，tuple()函数冻结了列表<br>vehicle &#x3D; [‘train’, ‘bus’, ‘car’, ‘ship’, ‘subway’, ‘bicycle’]  #list<br>tuple(vehicle) #元组<br>t &#x3D; tuple(vehicle)<br>1<br>2<br>3<br>‘<br>运行运行</p><h4 id="2-元组–-gt-列表"><a href="#2-元组–-gt-列表" class="headerlink" title="2.元组–&gt;列表"></a>2.元组–&gt;列表</h4><p>list()函数：接受一个元组，并返回一个包含同样元素的列表。<br>从结果上看， list()函数融化了元组<br>vehicle&#x3D;(‘train’,’bus’,’car’,’ship’,’subway’,’bicycle’)<br>list1 &#x3D; list(vehicle)<br>1<br>2<br>‘<br>运行运行</p><h2 id="4-2-字典"><a href="#4-2-字典" class="headerlink" title="4.2 字典"></a>4.2 字典</h2><p>字典是Python中唯一内建的映射类型<br>用一对花括号“{”和“}”作为边界，元素之间以逗号分隔：{123:“zhangsan”,456:“lisi”}</p><p>每个元素是一对键（key）和值（value），键和值之间用英文冒号分隔。<br>映射：可通过数据key查找关联数据value。<br>无序：字典的元素没有顺序，因此不能像序列那样通过位置索引来查找成员数据。但是每一个值都有一个对应的键。<br>不重复：字典的键是不重复的。<br>用法：通过键key来访问相应的值value（值value是可以重复的）。</p><h3 id="4-2-1-创建字典"><a href="#4-2-1-创建字典" class="headerlink" title="4.2.1 创建字典"></a>4.2.1 创建字典</h3><p>abbreviation &#x3D;{‘WAN’:’Wide Area Network’, ‘CU’:’Control Unit’, ‘LAN’:’Local Area Network’, ‘GUI’:’Graphical User Interface’} #1.{‘’:’’,’’:’’}创建<br>a&#x3D;dict(WAN&#x3D;’Wide Area Network’,CU&#x3D;’Control Unit’,LAN&#x3D;’Local Area Network’) #2.dict()创建,需注意：键外面不能加引号<br>keys&#x3D;[‘WAN’,’CU’,’LAN’]  #列表list<br>values&#x3D;(‘Wide Area Network’,’Control Unit’,’Local Area Network’) #元组<br>b&#x3D;dict(zip(keys,values))#3.由序列构建zip对象，由zip对象创建字典<br>c&#x3D;dict.fromkeys([‘WAN’,’CU’,’LAN’])#4.以给定序列(元组或者列表)为键，创建值为空的字典<br>d&#x3D;{}    #5-1.创建空字典<br>e&#x3D;dict()       #5-2.无参的dict函数<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>‘<br>运行运行<br>键key必须是不可修改类型的数据，如数值、字符串和元组等(列表是可变的，不能作为字典的键)<br>键对应的值value可以是任何类型的数据。<br>字典是无序集合，字典的显示次序由字典在内部的存储结构决定。</p><h3 id="4-2-2-字典操作"><a href="#4-2-2-字典操作" class="headerlink" title="4.2.2 字典操作"></a>4.2.2 字典操作</h3><h4 id="1-字典中“键-值”对的数量"><a href="#1-字典中“键-值”对的数量" class="headerlink" title="1.字典中“键-值”对的数量"></a>1.字典中“键-值”对的数量</h4><p>len()：返回字典中项（键-值对）的数量</p><p>abbreviation &#x3D;{‘WAN’:’Wide Area Network’, ‘CU’:’Control Unit’, ‘LAN’:’Local Area Network’, ‘GUI’:’Graphical User Interface’}<br>len(abbreviation)<br>1<br>2<br>‘<br>运行运行</p><h4 id="2-查找与特定键相关联的值：键—-gt-值"><a href="#2-查找与特定键相关联的值：键—-gt-值" class="headerlink" title="2.查找与特定键相关联的值：键—&gt;值"></a>2.查找与特定键相关联的值：键—&gt;值</h4><p>abbreviation &#x3D;{‘WAN’:’Wide Area Network’, ‘CU’:’Control Unit’, 1:’Local Area Network’, ‘GUI’:’Graphical User Interface’}<br>abbreviation[1]<br>1<br>2<br>‘<br>运行运行</p><h4 id="3-修改字典中的数据"><a href="#3-修改字典中的数据" class="headerlink" title="3.修改字典中的数据"></a>3.修改字典中的数据</h4><p>在字典中，某个键相关联的值可以通过赋值语句来修改.<br>如果指定的键不存在，则相当于向字典中添加新的键值对</p><p>abbreviation &#x3D;{‘WAN’:’Wide Area Network’, ‘CU’:’Control Unit’, ‘LAN’:’Local Area Network’, ‘GUI’:’Graphical User Interface’}<br>abbreviation[‘CU’]&#x3D;’control unit’   #有则修改<br>abbreviation[‘FTP’]&#x3D;’File Transfer Protocol’ #无则添加<br>1<br>2<br>3<br>‘<br>运行运行</p><h4 id="4-删除字典条目"><a href="#4-删除字典条目" class="headerlink" title="4.删除字典条目"></a>4.删除字典条目</h4><p>del 命令：用来删除字典条目或者整个字典</p><p>del abbreviation[‘CU’]      #键存在<br>del abbreviation             #删除整个<br>1<br>2<br>检查字典中是否含有某键的项<br>in命令：查找某键值是否在字典中。如果存在返回“True”，否则返回“False”</p><h3 id="4-2-3-字典方法"><a href="#4-2-3-字典方法" class="headerlink" title="4.2.3 字典方法"></a>4.2.3 字典方法</h3><h4 id="1-keys-、values"><a href="#1-keys-、values" class="headerlink" title="1.keys()、values()"></a>1.keys()、values()</h4><p>keys()方法将字典中的键以可迭代的dict_keys对象返回。values()方法将字典中的值以可迭代的dict_values对象形式返回</p><p>abbreviation &#x3D;{‘WAN’:’Wide Area Network’, ‘CU’:’Control Unit’, ‘LAN’:’Local Area Network’, ‘GUI’:’Graphical User Interface’}<br>abbreviation.keys()<br>#dict_keys([‘WAN’, ‘CU’, ‘LAN’, ‘GUI’])<br>list(abbreviation.values())   #转换成 列表<br>tuple(abbreviation.values())  #转换成 元组<br>1<br>2<br>3<br>4<br>5<br>‘<br>运行运行</p><h4 id="2-items"><a href="#2-items" class="headerlink" title="2.items()"></a>2.items()</h4><p>将字典中的所有键和值以可迭代的dict_items对象返回，每对键值对组成元组作为一个元素</p><p>abbreviation &#x3D;{‘WAN’:’Wide Area Network’, ‘CU’:’Control Unit’, ‘LAN’:’Local Area Network’, ‘GUI’:’Graphical User Interface’}<br>abbreviation.items()<br>#dict_items([(‘WAN’, ‘Wide Area Network’), (‘CU’, ‘Control Unit’), (‘LAN’, ‘Local Area Network’), (‘GUI’, ‘Graphical User Interface’)])<br>list(abbreviation.items())  #转换成 列表<br>tuple(abbreviation.items()) #转换成 元组<br>1<br>2<br>3<br>4<br>5<br>‘<br>运行运行</p><h4 id="3-setdefault"><a href="#3-setdefault" class="headerlink" title="3.setdefault()"></a>3.setdefault()</h4><p>使用dict.setdefault(key, default&#x3D;None)时，</p><p>如果字典中包含参数key对应的键，则返回该键对应的值；<br>否则以参数key的值为键，以参数default的值为该键对应的值，在字典中插入键-值对元素，并返回该元素的值部<br>abbreviation &#x3D;{‘WAN’:’Wide Area Network’, ‘CU’:’Control Unit’, ‘LAN’:’Local Area Network’, ‘GUI’:’Graphical User Interface’}<br>abbreviation.setdefault(‘CU’)             #1.存在这个键：返回对应的值value<br>abbreviation.setdefault(‘CU’,”控制单元”)   #2.存在这个键，默认值和原有的值不一样：返回对应的原值value<br>abbreviation[‘CU’]&#x3D;’control unit’   #有则修改<br>abbreviation.setdefault(‘FTP’,’File Transfer Protocol’)  #3.不存在这个键：插入新的键值对<br>abbreviation[‘FTP’]&#x3D;’File Transfer Protocol’ #和之前比较：无则添加<br>abbreviation.setdefault(‘cu’)              #4.不存在这个键，也未指定新值    ‘cu’: None<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行</p><h4 id="4-update"><a href="#4-update" class="headerlink" title="4.update()"></a>4.update()</h4><p>将另一个字典中的所有键值对一次性地添加到当前字典中<br>如果两个字典中存在有相同的键，则以另一个字典中的值更新当前字典</p><h4 id="5-clear"><a href="#5-clear" class="headerlink" title="5.clear()"></a>5.clear()</h4><p>clear()方法将字典中的所有条目删除，变成空字典</p><h4 id="6-pop"><a href="#6-pop" class="headerlink" title="6.pop()"></a>6.pop()</h4><p>pop()方法能够弹出并删除字典中的键值对</p><p>abbreviation.pop(‘CU’)         #返回键为’CU’的值，并在字典中删除该键值对<br>1</p><h4 id="7-popitem"><a href="#7-popitem" class="headerlink" title="7.popitem()"></a>7.popitem()</h4><p>popitem()方法能够弹出字典的一个元素，如果字典为空则触发异常</p><h4 id="8-get"><a href="#8-get" class="headerlink" title="8.get()"></a>8.get()</h4><p>返回指定键所对应的值，如果键不存在则返回默认值。默认值为None，也可以自己指定。</p><h3 id="4-2-4遍历字典"><a href="#4-2-4遍历字典" class="headerlink" title="4.2.4遍历字典"></a>4.2.4遍历字典</h3><h4 id="1-遍历字典的key"><a href="#1-遍历字典的key" class="headerlink" title="1.遍历字典的key"></a>1.遍历字典的key</h4><p>for i in abbreviation:        #默认遍历字典的键<br>    print(i)<br>    print(i,abbreviation[i])<br>for i in abbreviation.keys(): #和上面相同<br>    print(i,abbreviation[i])<br>1<br>2<br>3<br>4<br>5</p><h4 id="2-遍历字典的值Value"><a href="#2-遍历字典的值Value" class="headerlink" title="2.遍历字典的值Value"></a>2.遍历字典的值Value</h4><p>for i in abbreviation.values():<br>    print(i)<br>1<br>2</p><h4 id="3-遍历字典的键值对"><a href="#3-遍历字典的键值对" class="headerlink" title="3.遍历字典的键值对"></a>3.遍历字典的键值对</h4><p>for i in abbreviation.items():  #keys() values() items()<br>    print(i)<br>1<br>2</p><h3 id="4-2-5列表、元组、字典的转换"><a href="#4-2-5列表、元组、字典的转换" class="headerlink" title="4.2.5列表、元组、字典的转换"></a>4.2.5列表、元组、字典的转换</h3><h4 id="1-列表与字典之间的转化：字典–-gt-列表"><a href="#1-列表与字典之间的转化：字典–-gt-列表" class="headerlink" title="1.列表与字典之间的转化：字典–&gt;列表"></a>1.列表与字典之间的转化：字典–&gt;列表</h4><p>Python中的list()函数可以将字典转换列表，但列表不能转换为字典</p><p>list(abbreviation)         #默认将键转化为列表<br>list(abbreviation.keys())   #键<br>list(abbreviation.values()) #值<br>list(abbreviation.items())  #键值对<br>1<br>2<br>3<br>4</p><h4 id="2-元组与字典之间的转化：字典–-gt-元组"><a href="#2-元组与字典之间的转化：字典–-gt-元组" class="headerlink" title="2.元组与字典之间的转化：字典–&gt;元组"></a>2.元组与字典之间的转化：字典–&gt;元组</h4><p>Python中的tuple()函数可以将字典转换元组，但元组不能转换为字典</p><p>tuple(abbreviation)          #默认将键转化为元组<br>tuple(abbreviation.keys())   #键<br>tuple(abbreviation.values()) #值<br>tuple(abbreviation.items())  #键值对<br>1<br>2<br>3<br>4</p><h2 id="4-3-集合-Set"><a href="#4-3-集合-Set" class="headerlink" title="4.3 集合 Set"></a>4.3 集合 Set</h2><p>集合是一组用{ }括起来的无序,不重复元素，元素之间用逗号分隔。<br>元素可以是各种类型的不可变对象。</p><p>集合，想象成 只有key 没有value值的字典dict</p><h3 id="4-3-1-集合的创建"><a href="#4-3-1-集合的创建" class="headerlink" title="4.3.1 集合的创建"></a>4.3.1 集合的创建</h3><p>集合类型的值有两种创建方式：</p><p>用一对花括号将多个元素括起来，元素之间用逗号分隔：{1,3,‘a’}<br>函数set()：将字符串、列表、元组等类型的数据转换为集合类型。<br>vehicle&#x3D;{‘train’,’bus’,’car’,’ship’}       # 1、直接赋值<br>vehicle&#x3D;set([‘train’,’bus’,’car’,’ship’])  # 2、Set()函数，list（） tuple（）  dict()<br>#注意：空集合只能用set()来创建，而不能用空的花括号{}表示，因为Python已将空{}用于表示空字典<br>a&#x3D;set()     # 无参的set函数，空集合<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>集合中没有相同的元素，因此创建集合时会自动删除掉重复的元素（利用这一点，可以快速去重）。</p><h3 id="4-3-2-集合的运算"><a href="#4-3-2-集合的运算" class="headerlink" title="4.3.2 集合的运算"></a>4.3.2 集合的运算</h3><h4 id="1-len-、max-、min-、sum"><a href="#1-len-、max-、min-、sum" class="headerlink" title="1.len() 、max()、min()、sum()"></a>1.len() 、max()、min()、sum()</h4><p>返回集合中元素的个数</p><p>nums &#x3D; {4,3,8,9,0,-5,7}<br>max(nums)<br>sum(nums)<br>sorted(nums)    # 生成排序后的列表：集合本身无序<br>reversed(nums)  # 不能反序：集合本身无序<br>1<br>2<br>3<br>4<br>5</p><h4 id="2-in"><a href="#2-in" class="headerlink" title="2.in"></a>2.in</h4><p>判断某元素是否存在于集合之中，判断结果用布尔值True或False表示</p><h4 id="3-并集、交集"><a href="#3-并集、交集" class="headerlink" title="3.并集、交集"></a>3.并集、交集</h4><p>并集：创建一个新的集合，该集合包含两个集合中的所有元素。<br>交集：创建一个新的集合，该集合为两个集合中的公共部分</p><p>vehicle1&#x3D;{‘train’,’bus’,’car’,’ship’}<br>vehicle2&#x3D;{‘subway’,’bicycle’,’bus’}<br>vehicle1|vehicle2   #并集<br>vehicle1&amp;vehicle2   #交集<br>1<br>2<br>3<br>4<br>‘<br>运行运行</p><h4 id="4-差集"><a href="#4-差集" class="headerlink" title="4.差集"></a>4.差集</h4><p>A-B表示集合A与B的差集，返回由出现在集合A中但不出现在集合B中的元素所构成的集合。</p><p>vehicle1-vehicle2<br>1</p><h4 id="5-对称差"><a href="#5-对称差" class="headerlink" title="5.对称差"></a>5.对称差</h4><p>返回由两个集合中那些不重叠的元素所构成的集合</p><p>vehicle1^vehicle2<br>1</p><h4 id="6-子集和超集"><a href="#6-子集和超集" class="headerlink" title="6.子集和超集"></a>6.子集和超集</h4><p>子集：如果集合A的每个元素都是集合B中的元素，则集合A是集合B的子集。<br>超集：超集是仅当集合A是集合B的一个子集，集合B才是集合A的一个超集。<br>A&lt;&#x3D;B，检测A是否是B的子集；<br>A&lt;B，检测A是否是B的真子集；<br>A&gt;&#x3D;B，检测A是否是B的超集；<br>A&gt;B，检测A是否是B的真超集；<br>以上结果只返回True或False<br>A |&#x3D; B将B的元素并入A中。</p><h3 id="4-3-3-集合的方法"><a href="#4-3-3-集合的方法" class="headerlink" title="4.3.3 集合的方法"></a>4.3.3 集合的方法</h3><p>同样以面向对象方式实现集合类型的运算</p><h4 id="1-union-、intersection"><a href="#1-union-、intersection" class="headerlink" title="1.union()、intersection()"></a>1.union()、intersection()</h4><p>union()方法相当于并集运算。<br>intersection()方法相当于交集运算<br>vehicle1&#x3D;{‘train’,’bus’,’car’,’ship’}<br>vehicle2&#x3D;{‘subway’,’bicycle’,’bus’}<br>vehicle1.union(vehicle2)  #并集，新的集合<br>vehicle1                  # vehicle1未发生改变<br>vehicle2                  # vehicle2未发生改变<br>vehicle1.intersection(vehicle2) #交集，产生新集合<br>1<br>2<br>3<br>4<br>5<br>6<br>‘<br>运行运行</p><h4 id="2-update"><a href="#2-update" class="headerlink" title="2.update()"></a>2.update()</h4><p>update()方法相当于集合元素合并运算，注意与union()方法的区别</p><p>vehicle1.update(vehicle2)<br>vehicle1                  # vehicle1发生了改变<br>1<br>2</p><h4 id="3-difference"><a href="#3-difference" class="headerlink" title="3.difference()"></a>3.difference()</h4><p>相当于差集运算</p><p>vehicle1.difference(vehicle2)  #新集合<br>vehicle1   #原集合没有变化<br>1<br>2</p><h4 id="4-symmetric-difference"><a href="#4-symmetric-difference" class="headerlink" title="4.symmetric_difference()"></a>4.symmetric_difference()</h4><p>相当于对称差运算</p><p>vehicle1.symmetric_difference(vehicle2)  #结果相同<br>vehicle2.symmetric_difference(vehicle1)<br>1<br>2</p><h4 id="5-issubset-和issuperset"><a href="#5-issubset-和issuperset" class="headerlink" title="5.issubset()和issuperset()"></a>5.issubset()和issuperset()</h4><p>issubset()方法：判断是否子集。&lt;&#x3D;<br>issuperset()方法：判断是否超集&gt;&#x3D;<br>vehicle2.issubset(vehicle1)<br>vehicle1.issuperset(vehicle2)<br>1<br>2</p><h4 id="6-add"><a href="#6-add" class="headerlink" title="6.add()"></a>6.add()</h4><p>是向集合中添加元素</p><p>vehicle1.add(‘ship’)  #重复元素，只保留一个<br>1</p><h4 id="7-remove"><a href="#7-remove" class="headerlink" title="7.remove()"></a>7.remove()</h4><p>是从集合中删除元素，如果集合中没有该元素，则出错</p><h4 id="8-discard"><a href="#8-discard" class="headerlink" title="8.discard()"></a>8.discard()</h4><p>作用是从集合中删除元素，如果集合中没有该元素，也不提示出错</p><h4 id="9-pop"><a href="#9-pop" class="headerlink" title="9.pop()"></a>9.pop()</h4><p>pop()方法的作用是从集合中删除任一元素，并返回该元素；<br>如果集合为空，则抛出KeyError异常。</p><h4 id="10-clear"><a href="#10-clear" class="headerlink" title="10.clear()"></a>10.clear()</h4><p>从集合中删除所有元素，变成一个空集合</p><h2 id="4-4-可迭代对象Iterable-与-迭代器Iterator"><a href="#4-4-可迭代对象Iterable-与-迭代器Iterator" class="headerlink" title="4.4 可迭代对象Iterable 与 迭代器Iterator"></a>4.4 可迭代对象Iterable 与 迭代器Iterator</h2><p>简单解释：</p><p>可迭代对象 是 存放元素的容器，可以被遍历其中的元素。（类比：链表）</p><p>迭代器 由可迭代对象（容器）提供的(因为只有该容器知道怎么遍历它的每一个元素)，用于遍历容器元素的一个工具。（类比：链表的遍历指针p）</p><h3 id="4-4-1-可迭代-Iterable-对象"><a href="#4-4-1-可迭代-Iterable-对象" class="headerlink" title="4.4.1 可迭代(Iterable)对象"></a>4.4.1 可迭代(Iterable)对象</h3><p>列表、元组、字符串、字典可以用 for…in…进行遍历。</p><p>表面：只要可以用 for…in…进行遍历的对象就是可迭代对象，那么列表、元组、字符串、字典都是可迭代对象。</p><p>本质：如果一个对象实现了__iter__()方法，那么这个对象就是可迭代(Iterable)对象</p><p>help(list)  #方法1：查看list对象的方法，是否有__iter__方法（类似于java中查看某一个类可实现的方法）<br>1<br>‘<br>运行运行<br>方法2：可以通过调用内置函数isinstance()来判断一个对象是否属于可迭代(Iterable)对象</p><p>from collections.abc import Iterable<br>isinstance([‘abc’,1,8.5],Iterable)     #1.列表list是可迭代对象吗？<br>isinstance(123,Iterable)               #7.数值int float 是可迭代对象吗？不是<br>1<br>2<br>3<br>‘<br>运行运行<br>迭代器（Iterator）：实现了__iter__方法和__next__方法，并且可以通过__next__方法不断返回下一个值的对象</p><p>迭代器(Iterator)还可以通过内置函数next()访问下一个元素。</p><p>可以通过调用Python内置函数isinstance()来判断一个对象是否属于迭代器(Iterator)</p><p>from collections.abc import Iterator<br>isinstance([],Iterator)                #列表list 是迭代器吗？<br>isinstance([],Iterator)                #列表list 是迭代器吗？<br>isinstance({1:’one’,2:’two’},Iterator) #字典dict 是迭代器吗？<br>isinstance({‘one’,’two’},Iterator)     #集合set 是迭代器吗？<br>isinstance(‘abcdefg’,Iterator)         #字符串str 是迭代器吗？<br>isinstance(range(10),Iterator)         #range函数生成的数列 是迭代器吗？<br>isinstance(123,Iterator)               #数值 是迭代器吗？<br>#以上对象均不能成为迭代器（注意迭代器和可迭代对象不同）<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>‘<br>运行运行<br>可迭代对象（容器）—&gt; 迭代器(迭代工具)</p><p>虽然列表、元组、字符串、字典、集合都是可迭代(Iterable)对象而不是迭代器(Iterator)，但可以通过iter()函数获得一个迭代器(Iterator)<br>from collections.abc import Iterator<br>vehicle&#x3D;[‘train’,’bus’,’car’,’ship’]  #列表 list<br>v&#x3D;iter(vehicle)  #取list的迭代器<br>v.<strong>next</strong>()   #1、自带方法__next__()：返回下一个值<br>next(v)        #2、也可以用内置函数next()函数<br>v.<strong>next</strong>()       #没有下一个元素了，触发StopIteration异常<br>next(v)            #内置函数：next()访问下一个值(同样异常)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行</p><h3 id="4-4-2-相关内置函数"><a href="#4-4-2-相关内置函数" class="headerlink" title="4.4.2 相关内置函数"></a>4.4.2 相关内置函数</h3><p>enumerate（）枚举<br>zip() 组合<br>map() 映射（逐个计算）<br>filter（）过滤（挑选）<br>共同点：这四个函数都会返回一个 特定对象，它们都既是迭代器、也是可迭代对象。</p><p>1.enumerate() 枚举<br>格式：enumerate(iterable, start&#x3D;0)<br>功能：返回下标和值的enumerate对象。<br>参数：第1个参数表示可迭代(Iterable)对象，第2个参数表示下标的开始值，默认从0开始。<br>通俗：将容器的每个元素取出来，搭配一个下标</p><p>enumerate对象：既是Iterable对象（容器），也是Iterator对象（容器的遍历工具）</p><p>vehicle&#x3D;[‘train’,’bus’,’car’,’ship’]  #列表list（用其他容器也可以）<br>vv1&#x3D;enumerate(vehicle)     #取得list的枚举器<br>for i in vv1:              #迭代器 可以使用for in语句<br>    print(i,” “)<br>#(0, ‘train’)<br>#(1, ‘bus’)<br>#(2, ‘car’)<br>#(3, ‘ship’)<br>next(vv1)                   #也可以使用next()函数<br>vv1.<strong>next</strong>()              #也可以使用 <strong>next</strong>()方法<br>list(vv1)                   # 将剩余的enumerate对象vv1元素转换为列表<br>tuple(vv2)      #enumerate对象vv2转换为元组<br>vv2&#x3D;enumerate(vehicle,1)    #下标从1开始<br>vv2.<strong>next</strong>()              #返回下一个值<br>for i in enumerate(vehicle):  #遍历enumerate对象中的元素<br>    print(i,end&#x3D;’ ‘)    #(0, ‘train’) (1, ‘bus’) (2, ‘car’) (3, ‘ship’)<br>for i,x in enumerate(vehicle):<br>    print(i,x,end&#x3D;’ ‘)        #遍历enumerate对象元素的下标和值       0 train 1 bus 2 car 3 ship<br>vv1&#x3D;enumerate(vehicle)<br>dict(vv1)                     #enumerate对象vv1转换为字典:枚举号转为key，枚举值转为value<br>#{0: ‘train’, 1: ‘bus’, 2: ‘car’, 3: ‘ship’}<br>vv1&#x3D;enumerate(vehicle)<br>set(vv1)                      #enumerate对象vv1转换为集合</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>2.zip()<br>格式：zip(iter1 [,iter2 […]])<br>功能：将多个迭代器(Iterator)对象（或者可迭代(Iterable)对象）中的元素压缩到一起，返回一个zip对象。<br>通俗：将多个容器的逐个对应元素拼合在一起</p><p>同样，zip对象既是一个可迭代(Iterable)对象，也是一个迭代器(Iterator)对象。</p><p>vv1&#x3D;zip(‘abcd’)  #1、只有一个参数：字符串（容器），每个元素是元组<br>list(vv1)   #[(‘b’,), (‘c’,), (‘d’,)]<br>vv3 &#x3D; zip(‘abcd’,vehicle)   #2、有两个参数：有两个容器作为参数<br>list(vv3)  #[(‘c’, ‘car’), (‘d’, ‘ship’)]<br>(‘b’, ‘bus’) in zip(‘abcd’,vehicle)    #zip对象是可迭代对象（容器），可以使用in运算<br>vv2&#x3D;zip(‘abcd’,enumerate(vehicle))  #第二个参数是 枚举（也是容器）<br>next(vv2)   #(‘a’, (0, ‘train’))<br>vv3&#x3D;zip(range(2),vehicle)             #不同长短时：匹配短的<br>list(vv3)<br>vv4&#x3D;zip(‘abcd’,range(4),vehicle)     #3、更多参数：更多容器<br>next(vv4)  #(‘a’, 0, ‘train’)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>3.map()<br>格式：map(func, *iterables)<br>功能：把一个函数func依次映射到可迭代(Iterable)对象的每个元素上，返回一个map对象。<br>通俗：将每个元素 传入 func函数，把结果放入map里</p><p>map对象：既是一个可迭代(Iterable)对象，也是一个迭代器(Iterator)对象</p><p>aa&#x3D;[‘1’,’5.6’,’7.8’,’9’]<br>bb1&#x3D;map(float,aa)      #将每个元素变为float类型<br>next(bb1)  #1.0<br>list(map(str,range(5)))  #将0-4改为字符串<br>#[‘0’, ‘1’, ‘2’, ‘3’, ‘4’]<br>def fun(x):                  # 2、定义一个 函数<br>    return x**2<br>list(map(fun,[1,2,3,4]))        #list中的每个元素，都执行一次fun函数，结果放入map<br>#[1, 4, 9, 16]<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>‘<br>运行运行<br>4.filter()<br>格式：filter(函数名 or None, 可迭代对象)<br>功能：把一个带有一个参数的函数function作用到一个可迭代(Iterable)对象上，返回一个filter对象。<br>filter对象中的元素由可迭代(Iterable)对象中使得函数function返回值为True的那些元素组成。<br>如果指定函数为None，则返回可迭代(Iterable)对象中等价于True的元素。<br>通俗：将容器中的元素用函数过滤（挑选）一下</p><p>filter对象：既是一个可迭代(Iterable)对象，也是一个迭代器(Iterator)对象。</p><p>只保留满足条件的元素</p><p>aa&#x3D;[5,6,-9,-56,-309,206]  #用法1：函数<br>def func(x):        #定义函数func，x为奇数返回True，否则返回False<br>    return x%2!&#x3D;0</p><p>bb&#x3D;filter(func,aa)  #将aa中的每个元素，作为参数，带入func(x)。将返回值为True的元素保留下来。<br>type(bb)            #bb是一个filter对象<br>next(bb)            #5<br>cc&#x3D;filter(lambda x:x%2!&#x3D;0,aa)  #用法2：lambda函数（匿名函数，不用单独定义函数了）<br>dd&#x3D;[6,True,1,0,False]<br>ee&#x3D;filter(None,dd)             #用法4：指定函数为None（函数就不起作用了。就看元素本身，是否为True）<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>‘<br>运行运行</p><h2 id="4-5-推导式"><a href="#4-5-推导式" class="headerlink" title="4.5 推导式"></a>4.5 推导式</h2><p>利用列表推导式、字典推导式、集合推导式可以从一个数据对象构建另一个新的数据对象。<br>利用生成器推导式可以构建生成器对象。<br>语法糖</p><h3 id="4-5-1-列表推导式"><a href="#4-5-1-列表推导式" class="headerlink" title="4.5.1 列表推导式"></a>4.5.1 列表推导式</h3><p>列表推导式（list comprehension）是Python开发时用得最多的技术之一，表示对可迭代(Iterable)对象的元素进行遍历、过滤或再次计算，生成满足条件的新列表。<br>它的结构是在一个方括号里包含一个函数或表达式（再次计算），接着是一个for语句（遍历），然后是0个或多个for（遍历）或者if语句（过滤），在逻辑上等价于循环语句，但是形式上更简洁。<br>语法形式：<br>[函数 &#x2F; 表达式<br>for 值1 in 可迭代对象1 if 条件1<br>for 值2 in 可迭代对象2 if 条件2<br>……<br>for 值n in 可迭代对象n if 条件n ]</p><p>1.列表推导式和循环语句for<br>如果要将一个列表中的元素均扩大2倍组成新列表：</p><p>n&#x3D;[10,-33,21,5,-7,-9,3,28,-16,37]   #列表推导式：<br>number&#x3D;[i*2 for i in n]<br>number<br>1<br>2<br>3<br>‘<br>运行运行<br>两点：</p><p>利用列表推导式更加简洁。<br>由于Python内部对列表推导式做了大量优化，还能保证较快的运行速度<br>for循环可以嵌套。列表推导式中也可以有多个for语句。<br>如果要将一个一层嵌套数字列表中的元素展开后扩大2倍组成新列表：</p><p>n&#x3D;[[10,-33,21],[5,-7,-9,3,28,-16,37]]   #一层嵌套列表<br>number&#x3D;[]                               #常规写法：<br>for i in n:  #每一行<br>    for j in i:   #行中的每一列<br>        number.append(j<em>2)<br>number<br>n&#x3D;[[10,-33,21],[5,-7,-9,3,28,-16,37]]   #列表推导式：<br>number&#x3D;[j</em>2 for i in n for j in i]<br>number<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>‘<br>运行运行<br>2.列表推导式和条件语句if<br>在列表推导式中，条件语句if对可迭代(Iterable)对象中的元素进行筛选，起到过滤的作用。</p><p>#接着上面的例子，如果是将一个数字列表中的是正数的元素扩大2倍组成新列表：<br>n&#x3D;[10,-33,21,5,-7,-9,3,28,-16,37]<br>number&#x3D;[i*2 for i in n if i&gt;0]<br>number<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>另外，在列表推导式中还可以使用if else语句。</p><p>#将一个数字列表中的正偶数扩大2倍、正奇数扩大3倍组成新列表<br>n&#x3D;[10,-33,21,5,-7,-9,3,28,-16,37]<br>number&#x3D;[i<em>2 if i%2&#x3D;&#x3D;0 else i</em>3 for i in n if i&gt;0]<br>number<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>3.列表推导式和函数function<br>在列表推导式中可以使用函数function。</p><p>#利用列表推导式快速生成包含15个30~80（包含30、80）之间的随机整数列表rlist。<br>import random<br>rlist&#x3D;[random.randint(30,80) for i in range(15)] #使用randint()函数<br>rlist</p><p>对rlist中的元素，如果被3整除则该数除以3，如果被7整除则该数扩大2倍，其他的数扩大5倍，这些数组成新列表number</p><p>def ff(x):<br>    if x%3&#x3D;&#x3D;0:<br>        x&#x2F;&#x3D;3<br>    elif x%7&#x3D;&#x3D;0:<br>        x*&#x3D;2<br>    else:<br>        x*&#x3D;5<br>    return x<br>number&#x3D;[ff(i) for i in rlist] #使用自定义的ff()函数<br>number<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>‘<br>运行运行<br>4.同时遍历多个列表或可迭代对象<br>#有两个成绩列表score1和score2，将score1中分数90及以上和score2中分数85及以下的元素两两分别组成元组，将这些元组组成列表nn中的元素<br>score1&#x3D;[86,78,98,90,47,80,90]<br>score2&#x3D;[87,78,89,92,90,47,85]<br>nn&#x3D;[(i,j) for i in score1 if i&gt;&#x3D;90 for j in score2 if j&lt;&#x3D;85]<br>nn<br>1<br>2<br>3<br>4<br>5<br>‘<br>运行运行</p><h3 id="4-5-2-字典推导式"><a href="#4-5-2-字典推导式" class="headerlink" title="4.5.2 字典推导式"></a>4.5.2 字典推导式</h3><p>字典推导式和列表推导式的使用方法类似</p><p>将方括号变成花括号<br>需要两个表达式，一个生成键，一个生成值，两个表达式之间使用冒号分隔<br>最后生成的是字典<br>语法形式：<br>{函数 &#x2F; 表达式<br>for 值1 in 可迭代对象1 if 条件1<br>for 值2 in 可迭代对象2 if 条件2<br>……<br>for 值n in 可迭代对象n if 条件n }</p><p>列表name存储若干人的名字（唯一），列表score在对应的位置上存储这些人的成绩，利用字典推导式，以名字为键、成绩为值组成新字典dd。</p><p>name&#x3D; [‘Bob’,’Tom’,’Alice’,’Jerry’,’Wendy’,’Smith’]<br>score&#x3D;[86,78,98,90,47,80]<br>dd&#x3D;{i:j for i,j in zip(name,score)}</p><p>以名字为键、成绩为值组成新字典exdd，新字典中的键值对只包含成绩80及以上的</p><p>exdd&#x3D;{i:j for i,j in zip(name,score) if j&gt;&#x3D;80}       #增加一个if</p><p>以名字为键、名字的长度为值组成新字典nd</p><p>nd&#x3D;{i:len(i) for i in name}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>‘<br>运行运行</p><h3 id="4-5-3-集合推导式"><a href="#4-5-3-集合推导式" class="headerlink" title="4.5.3 集合推导式"></a>4.5.3 集合推导式</h3><p>集合也有自己的推导式，跟列表推导式类似</p><p>只不过将方括号变成花括号<br>最后生成的是集合<br>语法形式：<br>{函数 &#x2F; 表达式<br>for 值1 in 可迭代对象1 if 条件1<br>for 值2 in 可迭代对象2 if 条件2<br>……<br>for 值n in 可迭代对象n if 条件n }<br>alist&#x3D;[i<em>2 for i in (1,2,3,3,2,1,4)]<br>bset&#x3D;{i</em>2 for i in (1,2,3,3,2,1,4)}<br>1<br>2<br>‘<br>运行运行<br>不难发现，构建alist和bset的时候，除了方括号和花括号不同以外其他语法均相同，alist生成一个列表，里面的元素是元组(1,2,3,3,2,1,4)中每个元素的2倍，而且元素位置一一对应；blist生成一个集合，里面的元素是元组(1,2,3,3,2,1,4)中每个元素的2倍去掉重复元素后的结果，并且并非与元组的元素位置一一对应。</p><p>需要说明的是：元组没有推导式</p><h3 id="4-5-4-生成器推导式"><a href="#4-5-4-生成器推导式" class="headerlink" title="4.5.4 生成器推导式"></a>4.5.4 生成器推导式</h3><p>生成器推导式用法与列表推导式类似，把列表推导式的方括号改成圆括号。它与列表推导式最大的区别是：生成器推导式的结果是一个生成器对象，是一种迭代器(Iterator)；而列表推导式的结果是一个列表。<br>生成器对象可以通过for循环或者next()方法、next()函数进行遍历，也可以转换为列表或元组，但是不支持使用下标访问元素，已经访问过的元素也不支持再次访问。当所有元素访问结束之后，如果想再次访问就必须重新创建该生成器对象。</p><p>gen&#x3D;(int(i&#x2F;3) for i in range(1,10) if i%3&#x3D;&#x3D;0)<br>gen  #&lt;generator object <genexpr> at 0x00000110CC45C970&gt;<br>list(gen) #生成器对象转换为列表<br>gen.<strong>next</strong>() #不能再次访问<br>next(gen)       #访问下一个元素<br>gen&#x3D;(int(i&#x2F;3) for i in range(1,10) if i%3&#x3D;&#x3D;0)<br>for i in gen:       #for循环遍历<br>    print(i,end&#x3D;’ ‘)<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8</p><h1 id="五、字符串"><a href="#五、字符串" class="headerlink" title="五、字符串"></a>五、字符串</h1><h2 id="5-1-字符串的编码"><a href="#5-1-字符串的编码" class="headerlink" title="5.1 字符串的编码"></a>5.1 字符串的编码</h2><p>ASCII码</p><p>标准ASCII码为7位编码，包括英文字母、数字、标点符号等128个字符。用1个字节存储，最高位为0.<br>扩展ASCII码：1个字节存储，最高位为1。</p><p>Unicode编码</p><p>.把所有语言统一到一套编码里<br>.采用2个字节或4个字节（生僻字符）的编码<br>.缺点：全部是英文的话，比ASCII码多用一倍存储空间</p><p>UTF-8编码</p><p>可变长编码，英文字符用1个字节（兼容ASCII码），中文字符用3个字节，其他语言也有用2或4个字节</p><p>GB2312、GBK等中文编码</p><p>一般用2个字节</p><p>Python3支持两种类型字符串：str类型（支持Unicode编码）和bytes类型，而且str类型和bytes类型可以相互转换。</p><p>str.encode()可以转换为bytes类型<br>bytes.decode()转换为str类型<br>除此之外，其他方法都一样<br>s&#x3D;’我’ #str类型<br>#编码（str–&gt;bytes）<br>s1&#x3D;s.encode(‘gbk’)   #编码成bytes类型，gbk编码格式<br>s1                      #b’\xce\xd2’，16进制，2个字节（1位16进制数，用4位2进制数表示）<br>s2&#x3D;s.encode(‘utf-8’) #编码成bytes类型，utf-8编码格式<br>s2                      #b’\xe6\x88\x91’，16进制，3个字节<br>#解码（bytes–&gt;str）<br>s3&#x3D;s1.decode(‘gbk’)    #s1目前是gbk编码的bytes字符串，使用gbk进行解码<br>s4&#x3D;s2.decode(‘utf-8’) #s2目前是utf-8编码的bytes字符串，使用utf-8进行解码<br>s5&#x3D;s.encode(‘ascii’)   #s(‘我’)是str类型字符串，中文字符串不能以ascii编码<br>‘ABC’.encode(‘ascii’) #英文字符串可以以ascii编码<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>也可以使用bytes(string, encoding) 和str(bytes_or_buffer[, encoding])完成两种类型的相互转换</p><p>s&#x3D;’阳光’<br>b&#x3D;bytes(s,encoding&#x3D;’gbk’)    #str–&gt;bytes，用gbk编码转换<br>u&#x3D;bytes(s,encoding&#x3D;’utf-8’)   #用utf-8编码转换,3个字节<br>bs&#x3D;str(b,encoding&#x3D;’gbk’)      #bytes–&gt;str，用gbk编码转换<br>us&#x3D;str(u,encoding&#x3D;’utf-8’)#str类型<br>ub &#x3D; str(u,encoding&#x3D;’gbk’)  #u是用utf-8转换来的,’阳光’,3个字节<br>ub     #结果有误<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行<br>Python3.x完全支持中文字符，解析器默认采用UTF-8解析源程序，<br>无论是数字字符、英文字母、汉字都按 一个 字符来对待和处理</p><h2 id="5-2-字符串的构建"><a href="#5-2-字符串的构建" class="headerlink" title="5.2 字符串的构建"></a>5.2 字符串的构建</h2><p>在Python中字符串的构建，主要通过两种方法来实现，一是使用str函数，二是用单引号、双引号或三引号</p><p>1.单引号或双引号构造字符串 ：要求引号成对出现<br>合法：如：‘Python World!’、‘ABC’、“what is your name？”<br>不合法：’string”<br>2.字符串本身有 单引号或双引号时：<br>字符串包含了 单引号，且不用转义字符：整个字符串就要用 双引号 来构造。<br>字符串包含了 双引号，且不用转义字符：整个字符串要用 单引号 来构造。</p><p>print(“Let’s go!”)               #字符串本身有单引号<br>‘“Hello world!”,he said.’        #字符串本身有双引号<br>print(‘“Hello world!”,he said.’) #print函数输出时，是没有外层的引号的<br>1<br>2<br>3<br>‘<br>运行运行<br>3.对引号转义<br>‘Let&#39;s go!’<br>print(‘Let&#39;s go!’)<br>“&quot;Hello world!&quot;he said”<br>print(“&quot;Hello world!&quot;he said”)<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>4.对其他字符转义<br>转义字符以“\”开头，后接某些特定的字符或数字</p><p>转义字符含义转义字符含义转义字符含义<br>\（行尾）续行符\n换行符\f换页符<br>\一个反斜杠\r回车\ooo3位8进制数ooo对应的字符，如\123<br>’单引号’\t横向（水平）制表符\xhh2位16进制数hh对应的字符，如\x6a<br>“双引号”\v纵向（垂直）制表符\uhhhh4位16进制数hhhh表示的Unicode字符<br>print(“你好\n再见！”) #\n表示换行，相当于敲了一个回车键<br>print(‘\123\x6a’) #8进制数123对应的字符是“S”，16进制数6a对应的字符“j   sj<br>1<br>2<br>‘<br>运行运行<br>5.原始字符串<br>假设在C:\test文件夹中有一个文件夹net，如何输出完整路径呢？可能你想到的是</p><p>print(“c:\test\net”)      #错误<br>1<br>‘<br>运行运行<br>第1种方法：使用“\”表示反斜杠，则t和n不再形成\t和\n</p><p>print(“c:\test\net”)<br>1<br>‘<br>运行运行<br>第2种方法：在原始字符串前加 r 前缀<br>在字符串前面加上字母 r 或 R 表示原始字符串，所有的字符都是原始的本义而不会进行任何转义。</p><p>print(r”c:\test\net”)<br>1<br>‘<br>运行运行<br>6.三重引号字符串<br>三重引号将保留所有字符串的格式信息。</p><p>如字符串跨越多行，行与行之间的回车符、引号、制表符或者其他任何信息，都将保存下来。<br>在三重引号中可以自由的使用单引号和双引号。<br> ‘’’”What’s your name?”<br>  “My name is Jone”‘’’<br> #’”What&#39;s your name?”\n “My name is Jone”‘<br>print(‘’’”What’s your name?”</p><pre><code>   &quot;My name is Jone&quot;&#39;&#39;&#39;)</code></pre><p>“What’s your name?”</p><pre><code>   &quot;My name is Jone&quot;</code></pre><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p><h2 id="5-3-字符串格式化"><a href="#5-3-字符串格式化" class="headerlink" title="5.3 字符串格式化"></a>5.3 字符串格式化</h2><p>5.3.1 用 % 符号格式化字符串<br>格式以%开头<br>格式化运算符用%表示用对象代替格式串中的格式，最终得到1个字符串<br>基本同C语言</p><p>1.字符串格式的书写<br>[ ]中的内容可以省略；<br>简单的格式是：% 加格式字符，如%f、%d、%c等；<br>当最小宽度及精度都出现时，它们之间不能有空格，格式字符和其他选项之间也不能有空格，如%8.2f。<br>2.常用格式字符的含义（基本同C语言）</p><p>3.最小宽度和精度<br>最小宽度：转换后的值所保留的最小字符个数。<br>精度（对于数字来说）：结果中应该包含的小数位数。</p><p>#浮点数<br>a&#x3D;3.1416<br>‘a&#x3D;%6.2f’%a         #总宽度为6，保留2位小数，四舍五入  ‘a&#x3D;  3.14’<br>‘%f’%3.1416 #单独的%f，默认保留6位小数  ‘3.141600’<br>‘%.2f’%3.1416 #保留2位小数，第2位四舍五入，3.14<br>‘%.2f’%3.1476       #四舍五入为3.15<br>‘%7.2f’%3.1416  #宽度7位，保留2位小数，空位填空格  ‘   3.14’<br>‘%07.2f’%3.1416  #宽度7位，保留2位小数，空位填0  ‘0003.14’<br>‘%7.2f’%1234567.8901 #实际宽度，允许超出最小宽度  ‘1234567.89’<br>‘%+07.2f’%3.1416     #宽度7位，保留2位小数，正数加正号，空位填0   ‘+003.14’<br>‘%-7.2f’%-3.1416     #宽度7位，保留2位小数，空位填空格，左对齐输出  ‘-3.14  ‘<br>“%-2d”%156           #左对齐<br>“%-2d”%5             #左对齐，右补空格<br>‘%d’%’5’           #字符串’5’用格式化整数%d输出，引发异常（类型必须一致）<br>‘%s’%5      #与str()等价<br>#多对象：%后用元组<br>‘%.2f,%4d,%s’%(3.456727,89,’Lily’)   #常量–&gt;元组<br>‘3.46,  89,Lily’<br>name&#x3D;’Lily’<br>age&#x3D;18<br>‘我叫%s，今年%d岁’%(name,age)        #变量–&gt;元组    ‘我叫Lily，今年18岁’</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>4.进位制和科学计数法<br>a&#x3D;123456<br>y&#x3D;’%o’%a       #转换为八进制串<br>z&#x3D;’%x’%a       #转换为十六进制串<br>za&#x3D;’%0x’%a  #16进制数前添加0x<br>se&#x3D;’%e’%a     #转换为科学计数法串，基底e<br>se              #小数点前有一位非零数字，小数点后是6位小数<br>‘%e’%12345.678 #科学计数法，基底e  ‘1.234568e+04’<br>‘%E’%12345.678 #科学计数法，基底E   ‘1.234568E+04’<br>‘%g’%12345.678    #采用浮点数形式，根据值的大小采用%e或%f<br>‘%G’%12345.678    #采用浮点数形式<br>‘%.4G’%12345.678  #采用科学计数法形式，基底E<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>‘<br>运行运行<br>5.3.2 format()方法格式化字符串<br>format()方法是通过{}和:来代替传统%方式</p><p>首先看{}和参数的对应关系</p><p>‘我叫{},今年{}岁’.format(‘张清’,18)   #以下输出均为’我叫张清,今年18岁’<br>‘我叫{0},今年{1}岁’.format(‘张清’,18)<br>‘我叫{1},今年{0}岁’.format(18,’张清’)</p><p>my&#x3D;[‘张清’,18]<br>‘我叫{},今年{}岁’.format(<em>my)         #列表前加</em>，自动解包<br>‘我叫{0[0]},今年{0[1]}岁’.format(my)  #列表不加*，则需要用列表的索引元素<br>      #{后的0表示第一个参数(若有第2个参数，则为1)，[]中的数字表示列表元素的索引<br>‘我叫{name},今年{age}岁’.format(name&#x3D;’张清’,age&#x3D;18)  #直接写变量名<br>‘我叫{name},今年{age}岁’.format(age&#x3D;18,name&#x3D;’张清’)  #有了名字之后，就可以任意顺序</p><p>my&#x3D;{‘name’:’张清’,’age’:18}<br>‘我叫{name},今年{age}岁’.format(<strong>my)  #字典前加</strong>，自动解包</p><p>‘{0:.2f}’.format(2&#x2F;3)  #十进制的0.67<br>‘{0:b}’.format(8)      #二进制<br>‘{0:o}’.format(8)      #八进制<br>‘{0:x}’.format(18)     #十六进制<br>‘{:,}’.format(1234567890)  #千分位格式化，1,234,567,890<br>‘{0:<em>&gt;10}’.format(18)  #右对齐  ‘*<strong>*<em><strong><em>18’<br>‘{0:</em>&lt;10}’.format(18)  #左对齐  ‘18</strong></em>*</strong>*</em>‘<br>‘{0:<em>^9}’.format(18)  #居中对齐 ‘<em><strong>18</strong></em></em>‘<br>‘{0:0&#x3D;10}’.format(-18)     #0放在-和18中间  ‘-000000018’<br>‘{0:_},{0:#x}’.format(9999) #_作为分隔符（起到千分位的作用）   ‘9_999,0x270f’</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>‘<br>运行运行<br>5.3.3 带f前缀的格式化字符串<br>name&#x3D;’张清’<br>age&#x3D;18<br>f’我叫{name},今年{age}岁’<br>1<br>2<br>3<br>‘<br>运行运行</p><h2 id="5-4-字符串截取"><a href="#5-4-字符串截取" class="headerlink" title="5.4 字符串截取"></a>5.4 字符串截取</h2><p>字符串 属于 序列 类型，同样，可以使用索引或者切片。</p><p>单个字符</p><p>索引str[index]取出单个字符<br>切片字符</p><p>str[start : end : step]取出一片字符。同序列的切片。<br>s&#x3D;”student”<br>s[1:3]       #取出位置为1到位置为2的字符，不包括位置3的字符  ‘tu’<br>s[:3]        #取出从头至位置为2的字符   ‘stu’<br>s[-2:]       #取出从倒数第2个位置开始的所有字符,从左往右取（步长默认是1）  ‘nt’<br>s[:]         #正序全部字符<br>s[::-1]      #逆序全部字符<br>s[::2]       #步长为2<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行<br>字符串属于不可变序列类型，不支持字符串修改</p><h2 id="5-5-字符串常用内置函数"><a href="#5-5-字符串常用内置函数" class="headerlink" title="5.5 字符串常用内置函数"></a>5.5 字符串常用内置函数</h2><p>s&#x3D;’Merry days will come,believe.’<br>len(s)        #字符串长度<br>max(s)        #最大字符<br>min(s)        #最小字符：本处为空格<br>ord(‘M’)      #获取该字符的Unicode码  77<br>chr(77)       #把编码转换为对应的字符  ‘M’<br>ord(‘好’)     #汉字的编码<br>chr(22909)</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>‘<br>运行运行</p><h2 id="5-6字符串常用方法"><a href="#5-6字符串常用方法" class="headerlink" title="5.6字符串常用方法"></a>5.6字符串常用方法</h2><p>由于字符串属于不可变序列，下述方法中涉及到返回字符串的都是新字符串，原有字符串对象不变。</p><p>1.center()、ljust()、rjust()<br>格式：</p><p>center(width, fillchar&#x3D;’ ‘) 居中对齐<br>ljust(width, fillchar&#x3D;’ ‘) 左对齐<br>rjust(width, fillchar&#x3D;’ ‘) 右对齐<br>说明：</p><p>width：指定宽度；<br>fillchar：填充的字符，默认为空格。<br>功能：</p><p>返回一个宽度为width的新字符串，原字符串居中（左对齐或右对齐）出现在新字符串中，如果width大于字符串长度，则使用fillchar进行填充。<br>‘你好’.center(10) #居中对齐，以空格填充    ‘    你好    ‘<br>‘你好’.center(11,”<em>“) #居中对齐，以</em>填充   ‘*<strong><strong>你好</strong></strong>‘<br>‘你好’.ljust(10,”!”) #右对齐，以！填充   ‘你好!!!!!!!!’<br>‘你好’.rjust(10,”-“) #左对齐，以-填充  ‘——–你好’<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>2.lower()、upper()<br>lower()方法将大写字母转换为小写字母，其他字符不变，并返回新字符串（全部为小写字母）。<br>upper()方法将小写字母转换为大写字母，其他字符不变，并返回新字符串（全部为大写字母）。<br>用处：解决有关不区分大小写问题</p><p>3.capitalize()、title()、swapcase()<br>capitalize()：将整个字符串 首字母转换为大写形式，其他字母转换为小写形式。<br>title()： 将每个单词的首字母转换为大写形式，其他部分的字母转换为小写形式。<br>swapcase()：将大小写互换。<br>提醒：均返回新字符串，原字符串对象不做任何修改。</p><p>4.islower()、isupper()、isdigit()<br>功能：测试字符串是否为全小写、大写、数字。如果是，则返回True；否则返回False。</p><p>其他的方法，请通过“help(str)”自行查看帮助信息。</p><p>5.find()、rfind()<br>格式：</p><p>S.find(sub[, start[, end]])<br>S.rfind(sub[, start[, end]])<br>说明：</p><p>sub：字符串（子串）；<br>start：开始位置；<br>end：结束位置。查找范围start开始，end结束，不包括end。<br>功能：</p><p>在字符串S中，在[start,end)范围内查找并返回子串sub首次出现的位置索引<br>如果没有找到则返回-1。<br>默认范围是整个字符串。<br>其中find()方法从左往右查找，rfind()方法从右往左查找。<br>6.index()、rindex()<br>格式：</p><p>S.index(sub[, start[, end]])<br>S.rindex(sub[, start[, end]])<br>功能：</p><p>在字符串S中，查找并返回在[start,end)范围内，子串sub首次出现的位置索引<br>如果不存在则抛出异常。(和find()、rfind()的不同点)<br>默认范围是整个字符串。<br>其中index()方法从左往右查找，rindex()方法从右往左查找。<br>7.count()<br>格式：</p><p>S.count(sub[, start[, end]])<br>功能：</p><p>在字符串S中，查找并返回[start,end)范围内子串sub出现的次数<br>如果不存在，则返回0。<br>默认范围是整个字符串。<br>8.split()<br>功能：</p><p>以指定字符为分隔符，从左往右将字符串分割开来，并将分割后的结果组成列表返回。<br>如果字符串中的某种字符出现0次或多次，可以利用split()方法，根据该字符把字符串分离成多个子串组成的列表。<br>对于split()，如果不指定分隔符，实际上表示以任何空白字符（包括连续出现的）作为分隔符。</p><p>空白字符包括空格、换行符、制表符等。</p><p>除了split()，还有rsplit()，表示从右往左将字符串分割开来，这两种方法还能指定最大分隔次数</p><p>9.join()<br>join()方法可用来连接序列中的元素，并在两个元素之间插入指定字符，返回一个字符串</p><p>join()方法是split()方法的逆方法</p><p>s&#x3D;’Heart is living in tomorrow’<br>slie&#x3D;s.split()    #用空格分割<br>ss&#x3D;’ ‘.join(slie)  #用空格接上<br>1<br>2<br>3<br>‘<br>运行运行<br>10.replace()<br>格式：</p><p>replace(old,new,count&#x3D;-1)<br>功能：</p><p>查找字符串中old子串并用new子串来替换。<br>参数count默认值为-1，表示替换所有匹配项，否则(count为其他值时）最多替换count次。<br>返回替换后的新字符串（原字符串不变）。<br>s1&#x3D;’中国北京，北京地铁，地铁沿线，北京沿线城市’<br>s4&#x3D;s1.replace(‘北京’,’Beijing’,2)    #指定最大替换次数<br>1<br>2<br>‘<br>运行运行<br>11.maketrans()、translate()<br>maketrans()：生成字符映射表<br>translate()：根据字符映射表替换字符。<br>这两种方法联合起来使用可以一次替换多个字符。<br>t&#x3D;’’.maketrans(‘iort’,’mn24’)#两个序列中的元素按照次序一一对应，用于替换<br>#{105: 109, 111: 110, 114: 50, 116: 52}<br>s&#x3D;’Heart is living in tomorrow’<br>s.translate(t)<br>#’Hea24 ms lmvmng mn 4nmn22nw’<br>#’Heart is living in tomorrow’<br>1<br>2<br>3<br>4<br>5<br>6<br>‘<br>运行运行<br>12.strip()<br>strip()：去除字符串两侧的空白字符(空格、回车、制表符等）或指定字符，并返回新字符串。</p><p>s1&#x3D;’HHwHeart is liwving iHn tomorrowHww’<br>s1.strip(‘Hw’)#从两端逐一去除“H”或“w”字符，直到不是这两个字符为止（中间的字符Hw不能去除）<br>1<br>2<br>‘<br>运行运行</p><h2 id="5-7-字符串string模块"><a href="#5-7-字符串string模块" class="headerlink" title="5.7 字符串string模块"></a>5.7 字符串string模块</h2><p>字符串string模块定义了Formatter类、Template类、capwords函数和常量，熟悉string模块可以简化某些字符串的操作。</p><p>import string<br>s&#x3D;input(‘请输入英文单词，用空格分隔：’)<br>ss&#x3D;string.capwords(s)      #用到了string.capwords()函数<br>print(‘单词首字母大写：’,ss)<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>说明：这种方法直接用到string模块中的常量ascii_lowercase和random模块中choice()方法。choice()方法的功能是在一个非空的序列中随机选择一个元素。</p><p>import random<br>x&#x3D;’012345abcde’<br>random.choice(x)<br>1<br>2<br>3<br>‘<br>运行运行</p><h2 id="5-8正则表达式"><a href="#5-8正则表达式" class="headerlink" title="5.8正则表达式"></a>5.8正则表达式</h2><p>5.8.1正则表达式的元字符<br>正则表达式（模式串）中的字符，根据作用不同，分为两类：</p><p>普通字符：大多数字母和字符一般都会和自身匹配。<br>元字符：有些字符比较特殊，它们和自身并不匹配，而是表明应和一些特殊的东西匹配，或者会影响重复次数。<br>因为在模式串中常常有特殊字符，为了书写方便，在字符串前加r前缀，不对其进行转义。</p><p>第一种情况：<br>模式串中全部是 普通字符</p><p>import re      #导入re模块<br>w&#x3D;’abc’                      #模式串中 全部是普通字符<br>re.findall(w,’aabaab’)  #无匹配<br>re.findall(w,’aabcaabc’) #两处匹配（查找到两个）<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>第二种情况：<br>模式串中含有 元字符</p><p>常用的元字符：</p><p>1.“.”：表示任意单个字符 (除换行符以外)<br>import re<br>s&#x3D;’hi,i am a student.my name is Hilton.’<br>re.findall(r’i’,s)     #在s中，匹配所有的i<br>1<br>2<br>3<br>‘<br>运行运行<br>s&#x3D;’’’hi,<br>i student.<br>Hilton.’’’       #三引号字符串中可以有换行符<br>re.findall(r’.’,s)          #本结果中：没有匹配两个换行符<br>1<br>2<br>3<br>4<br>s&#x3D;’hi,i am a student.my name is Hilton.’<br>re.findall(r’i.’,s)     #匹配i后面跟除换行符以外的任意字符的形式<br>                   #必须是两个字符：第一个是i，第2个是换行符以外的任意字符，可以是空白符<br>1<br>2<br>3<br>2.“[]”：指定字符集<br>用来指定一个字符集合，例如：[abc]、[a-z]、[0-9]；<br>从字符集合中必须选一个，也只能选一个字符（即单个字符）<br>有些元字符在方括号中不起作用（作为普通字符）,例如：[akm$]和[m.]中元字符都不起作用；<br>方括号内的“”表示补集，匹配不在区间范围内的字符，例如：[3]表示除3以外的字符。<br>import re<br>s&#x3D;’mat mit mee mwt meqwt’<br>re.findall(r’m[iw]t’,s)        #匹配m后跟i或者w再跟t形式：mit  mwt<br>                               #查找3个字符：第1字符必须是m，第3字符必须是t，中间字符只能是iw中的一个<br>1<br>2<br>3<br>4<br>‘<br>运行运行<br>3.“^”：匹配行首，匹配每 行 中以^后面的字符开头的字符串（必须放在模式串的开头）<br>英文称为caret (英语发音：&#x2F;ˈkærət&#x2F;)<br>记忆法：^数学上读作hat，帽子（戴头上），可以形象的想象成 首部</p><p>匹配模式：</p><p>默认只匹配多行字符串的首行；<br>多行匹配需要单独设置re.M参数。<br>4.“” ： 匹 配 ‘ 行 尾 ‘ ， 匹 配 每 行 中 以 ”：匹配<code>行尾</code>，匹配每行中以”：匹配‘行尾‘，匹配每行中以之前的字符结束的字符串<br>英语读作dollar，音标：[‘dɒlə®]<br>记忆法：$，可以形象的想象成 弯曲的尾巴，“行尾”</p><p>匹配模式：</p><p>默认只匹配多行字符串的末行；<br>多行匹配需要单独设置re.M参数。<br>5.“\”：反斜杠后面可以加不同的字符以表示不同的特殊意义（四对）<br>\b匹配单词头或单词尾（\b放前面，会匹配单词头；\b放后面，会匹配单词尾）；相当于^或$(但这两个只能用于整个字符串，不能切分单词)</p><p>\B与\b相反，匹配非单词头或单词尾（不查找单词头或单词尾，只查其他部分）；</p><p>\d匹配任何数字字符；相当于[0-9]；</p><p>\D与\d相反，匹配任何非数字字符，相当于[^0-9]；</p><p>\s匹配任何空白字符，相当于[\t\n\r\f\v]；</p><p>\S与\s相反，匹配任何非空白字符，相当于[^\t\n\r\f\v]；\t是制表符，\f是换页符，\v是垂直制表符</p><p>\w匹配任何字母、数字或下画线字符，相当于[a-zA-Z0-9_]；</p><p>\W与\w相反，匹配任何非字母、数字和下画线字符，相当于[^a-zA-Z0-9_]；</p><p>也可以用于取消所有的元字符：\、[。</p><p>这些特殊字符都可以包含在[]中。如：[\s,.]将匹配任何空白字符、”,“或”.”。</p><p>第一对：\b和\B</p><p>字符串中切分单词的分隔符，包括空格、换行、制表符、各种标点符号。</p><p>\b：单词头&#x2F;单词尾：注意不是整个字符串，而是分隔后的每个单词</p><p>\B：和\b相反（不查开头&#x2F;结尾的，只查其他部分的）</p><p>第二对：\d与\D</p><p>\d:数字字符，等同于[0-9]</p><p>\D：和\d相反，等同于[^0-9]（非数字字符）</p><p>第三对：\s与\S</p><p>\s：匹配（查找）任何空白字符，相当于[\t\n\r\f\v]：横向制表符、换行、回车、换页符、纵向制表符</p><p>\S：和\s相反，不匹配（查找）任何空白字符，相当于[^\t\n\r\f\v]</p><p>\S与“.”区别</p><p>“.”， 表示任意单个字符（换行符除外）<br>“\S”，表示任意单个字符（空白符除外）。注意是大写的S。<br>第四对：\w与\W</p><p>\w：匹配任何字母、数字或下画线字符，相当于[a-zA-Z0-9_]</p><p>\W：和\w相反，不匹配任何字母、数字或下画线字符，相当于[^a-zA-Z0-9_]</p><p>第五点：用\取消元字符</p><p>s&#x3D;’hi,i am a student.my name is Hilton.’<br>re.findall(r’t.’,s)    #此时的.就是元字符：匹配(查找)t+任意字符<br>re.findall(r’t.‘,s)    #此时的.就是普通的字符：匹配(查找)t.<br>1<br>2<br>3<br>第六点：\d、\D、\s、\S、\w、\W也可以用在[]内</p><p>以上5类元字符都是表示单个字符。<br>.:任意单个字符（换行符除外）<br>[]:集合中的任意单个字符<br>^:行首<br>$:行尾<br>:\b\d\s\w</p><p>量词<br>正则表达式能指定正则表达式的一部分的重复次数，用到的元字符有“*”、“+”、“?”、“{}”。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程语言实现的程序</title>
      <link href="/2023/07/15/1/"/>
      <url>/2023/07/15/1/</url>
      
        <content type="html"><![CDATA[<h1 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h1><h2 id="2048小游戏"><a href="#2048小游戏" class="headerlink" title="2048小游戏"></a>2048小游戏</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>][<span class="number">4</span>]=&#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在一个为0的位置，随机生成一个2/4*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">random_produce</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//记录二维数组中为0的元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> zero1[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;; <span class="comment">//这个数组记录二维数组中，元素为0的值的下标</span></span><br><span class="line"><span class="type">int</span> i,j,num=<span class="number">0</span>,k=<span class="number">0</span>; <span class="comment">//num表示为二维数组0的个数</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">zero1[k++]=i;</span><br><span class="line">zero1[k++]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>)); <span class="comment">//设置随机因子</span></span><br><span class="line"><span class="type">int</span> b = rand()%num; <span class="comment">//b用来确定随机到哪一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c = rand()%<span class="number">3</span>; <span class="comment">//c确定随机到的值是2还是4</span></span><br><span class="line"><span class="keyword">if</span>(c == <span class="number">2</span>) <span class="comment">// 2的概率是2/3，4的概率是1/3</span></span><br><span class="line">&#123;</span><br><span class="line">a[zero1[<span class="number">2</span>*b]] [zero1[<span class="number">2</span>*b+<span class="number">1</span>]] =<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[zero1[<span class="number">2</span>*b]] [zero1[<span class="number">2</span>*b+<span class="number">1</span>]] =<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左划合并更新数组</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">0：代表无效滑动</span></span><br><span class="line"><span class="comment">1：代表有效滑动</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">move_left</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">//有效滑动的标志位</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) <span class="comment">//遍历行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先合并</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1， 找到第一个不为0的数字</span></span><br><span class="line"><span class="keyword">if</span>(a[i][j] !=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从第一个不为0的数字往后找</span></span><br><span class="line"><span class="keyword">for</span>(k=j+<span class="number">1</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//后面为0，忽略</span></span><br><span class="line"><span class="keyword">if</span>(a[i][k] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后面相等，合并</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][k] == a[i][j])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>; </span><br><span class="line">a[i][j]*=<span class="number">2</span>;</span><br><span class="line">a[i][k] = <span class="number">0</span>; <span class="comment">//清0</span></span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//只合并一次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后面不相等，并且不为0</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][k] != a[i][j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//退出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再向左并拢</span></span><br><span class="line">k = <span class="number">0</span>; <span class="comment">//并拢的位置</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] !=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i][k]= a[i][j];</span><br><span class="line"><span class="keyword">if</span>(k != j) <span class="comment">//自己的位置和要并拢的位置不一样 </span></span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">a[i][j]=<span class="number">0</span>; <span class="comment">//将自己清0</span></span><br><span class="line">&#125;</span><br><span class="line">k++; <span class="comment">//并拢的位置往后移动</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">move_right</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">//有效滑动的标志位</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) <span class="comment">//遍历行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先合并</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">3</span>;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1， 找到第一个不为0的数字</span></span><br><span class="line">            <span class="keyword">if</span>(a[i][j] !=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从第一个不为0的数字往前找</span></span><br><span class="line">                <span class="keyword">for</span>(k=j<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//前面为0，忽略</span></span><br><span class="line">                    <span class="keyword">if</span>(a[i][k] == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//前面相等，合并</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(a[i][k] == a[i][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="number">1</span>; </span><br><span class="line">                        a[i][j]*=<span class="number">2</span>;</span><br><span class="line">                        a[i][k] = <span class="number">0</span>; <span class="comment">//清0</span></span><br><span class="line">                        <span class="keyword">break</span>; <span class="comment">//只合并一次</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//前面不相等，并且不为0</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(a[i][k] != a[i][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>; <span class="comment">//退出</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再向右并拢</span></span><br><span class="line">        k = <span class="number">3</span>; <span class="comment">//并拢的位置</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">3</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] !=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][k]= a[i][j];</span><br><span class="line">                <span class="keyword">if</span>(k != j) <span class="comment">//自己的位置和要并拢的位置不一样 </span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    a[i][j]=<span class="number">0</span>; <span class="comment">//将自己清0</span></span><br><span class="line">                &#125;</span><br><span class="line">                k--; <span class="comment">//并拢的位置往前移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">move_up</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">//有效滑动的标志位</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++) <span class="comment">//遍历列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先合并</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1， 找到第一个不为0的数字</span></span><br><span class="line">            <span class="keyword">if</span>(a[i][j] !=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从第一个不为0的数字往后找</span></span><br><span class="line">                <span class="keyword">for</span>(k=i+<span class="number">1</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//后面为0，忽略</span></span><br><span class="line">                    <span class="keyword">if</span>(a[k][j] == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//后面相等，合并</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(a[k][j] == a[i][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="number">1</span>; </span><br><span class="line">                        a[i][j]*=<span class="number">2</span>;</span><br><span class="line">                        a[k][j] = <span class="number">0</span>; <span class="comment">//清0</span></span><br><span class="line">                        <span class="keyword">break</span>; <span class="comment">//只合并一次</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//后面不相等，并且不为0</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(a[k][j] != a[i][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>; <span class="comment">//退出</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再向上并拢</span></span><br><span class="line">        k = <span class="number">0</span>; <span class="comment">//并拢的位置</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] !=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[k][j]= a[i][j];</span><br><span class="line">                <span class="keyword">if</span>(k != i) <span class="comment">//自己的位置和要并拢的位置不一样 </span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    a[i][j]=<span class="number">0</span>; <span class="comment">//将自己清0</span></span><br><span class="line">                &#125;</span><br><span class="line">                k++; <span class="comment">//并拢的位置往后移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">move_down</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>; <span class="comment">//有效滑动的标志位</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++) <span class="comment">//遍历列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先合并</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">3</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1， 找到第一个不为0的数字</span></span><br><span class="line">            <span class="keyword">if</span>(a[i][j] !=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从第一个不为0的数字往前找</span></span><br><span class="line">                <span class="keyword">for</span>(k=i<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//前面为0，忽略</span></span><br><span class="line">                    <span class="keyword">if</span>(a[k][j] == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//前面相等，合并</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(a[k][j] == a[i][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="number">1</span>; </span><br><span class="line">                        a[i][j]*=<span class="number">2</span>;</span><br><span class="line">                        a[k][j] = <span class="number">0</span>; <span class="comment">//清0</span></span><br><span class="line">                        <span class="keyword">break</span>; <span class="comment">//只合并一次</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//前面不相等，并且不为0</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(a[k][j] != a[i][j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>; <span class="comment">//退出</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再向下并拢</span></span><br><span class="line">        k = <span class="number">3</span>; <span class="comment">//并拢的位置</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">3</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] !=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a[k][j]= a[i][j];</span><br><span class="line">                <span class="keyword">if</span>(k != i) <span class="comment">//自己的位置和要并拢的位置不一样 </span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    a[i][j]=<span class="number">0</span>; <span class="comment">//将自己清0</span></span><br><span class="line">                &#125;</span><br><span class="line">                k--; <span class="comment">//并拢的位置往后移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_chessboard</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;____________________________________\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;____________________________________\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断游戏是否结束</span></span><br><span class="line"><span class="comment">结束返回1</span></span><br><span class="line"><span class="comment">未结束返回0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gamester</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="number">0</span>)<span class="comment">//游戏继续的条件3,有0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == a[i+<span class="number">1</span>][j] )<span class="comment">//游戏继续的条件1，和下面相同</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == a[i][j+<span class="number">1</span>])<span class="comment">//游戏继续的条件2，和右边相同</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">游戏运行逻辑函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一步，随机在两个空白处生成2或者4</span></span><br><span class="line">random_produce();</span><br><span class="line">random_produce();</span><br><span class="line">print_chessboard();</span><br><span class="line"><span class="type">char</span> defection;</span><br><span class="line"><span class="keyword">while</span>(!gamester())</span><br><span class="line">&#123;</span><br><span class="line">defection=getch();</span><br><span class="line"><span class="keyword">switch</span>(defection)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>: </span><br><span class="line"><span class="keyword">if</span>(move_up())</span><br><span class="line">&#123;</span><br><span class="line">random_produce();</span><br><span class="line">&#125;</span><br><span class="line">print_chessboard();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: </span><br><span class="line"><span class="keyword">if</span>(move_down())</span><br><span class="line">&#123;</span><br><span class="line">random_produce();</span><br><span class="line">&#125;</span><br><span class="line">print_chessboard();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"><span class="keyword">if</span>(move_left())</span><br><span class="line">&#123;</span><br><span class="line">random_produce();</span><br><span class="line">&#125;</span><br><span class="line">print_chessboard();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: </span><br><span class="line"><span class="keyword">if</span>(move_right())</span><br><span class="line">&#123;</span><br><span class="line">random_produce();</span><br><span class="line">&#125;</span><br><span class="line">print_chessboard();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;游戏结束！\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]&gt;sum)&#123;</span><br><span class="line">sum=a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Your scrod\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">start();</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机时钟"><a href="#随机时钟" class="headerlink" title="随机时钟"></a>随机时钟</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="type">int</span> n,m,i=<span class="number">1</span>,flag;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    m=rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">    flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span>(n==m)&#123; </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Luky you!&quot;</span>);</span><br><span class="line">            flag==<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n&gt;m)&#123; </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is big\n&quot;</span>,n);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is small\n&quot;</span>,n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;game over!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学生管理系统"><a href="#学生管理系统" class="headerlink" title="学生管理系统"></a>学生管理系统</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXM 100</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_array</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">select</span><span class="params">(<span class="type">int</span> option, <span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printf_array</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> option, <span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">remov</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> a[MAXM], option, value, n;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input the number of array elements:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input an ordered array element:&quot;</span>);</span><br><span class="line">  input_array(a, n);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[1]Insert\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[2]Delete\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[3]Query\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[Other option] End\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input option:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (option &gt;= <span class="number">1</span> &amp;&amp; option &lt;= <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Input an element:&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;value);</span><br><span class="line">      select(option, a, value, n);</span><br><span class="line">      <span class="keyword">if</span> (option == <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        n = n + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (option == <span class="number">2</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        n = n - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Input option:&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Thank you&quot;</span>);</span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">input_array</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printf_array</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;The ordered array a is:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">select</span><span class="params">(<span class="type">int</span> option, <span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">switch</span> (option)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    insert(option, a, value, n);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    remov(a, value, n);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    query(a, value, n);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> option, <span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i, x;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] &gt; value)</span><br><span class="line">    &#123;</span><br><span class="line">      x = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = n; i &gt; x; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    a[i] = a[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  a[x] = value;</span><br><span class="line">  n++;</span><br><span class="line">  printf_array(a, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">remov</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i, x;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] == value)</span><br><span class="line">    &#123;</span><br><span class="line">      x = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = x; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  n--;</span><br><span class="line">  printf_array(a, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> value, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> mid, low = <span class="number">0</span>, hight = n - <span class="number">1</span>;</span><br><span class="line">  mid = (low + hight) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (low &lt;= hight)</span><br><span class="line">  &#123;</span><br><span class="line">    mid = (low + hight) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[mid] == value)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;The index is:%d&quot;</span>, mid);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; value)</span><br><span class="line">    &#123;</span><br><span class="line">      low = low + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      hight = hight - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This elements does not exist\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反转字符串里的单词"><a href="#反转字符串里的单词" class="headerlink" title="反转字符串里的单词"></a>反转字符串里的单词</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">reverseWords</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将多余的空格除去</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len;j++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(s[j]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">0</span>&amp;&amp;i!=<span class="number">0</span>)&#123;</span><br><span class="line">                s[i++]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s[i++]=s[j];</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=<span class="number">1</span>&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        s[i<span class="number">-1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        s[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将整个字符串反转</span></span><br><span class="line">    len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    i=<span class="number">0</span>,j=len<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="type">char</span> temp=s[i];</span><br><span class="line">        s[i++]=s[j];</span><br><span class="line">        s[j--]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//将每个单词进行反转</span></span><br><span class="line">    i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[j])&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[j]!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> t=j<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;t)&#123;</span><br><span class="line">            <span class="type">char</span> temp=s[i];</span><br><span class="line">            s[i++]=s[t];</span><br><span class="line">            s[t--]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            i=++j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t=j<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;t)&#123;</span><br><span class="line">        <span class="type">char</span> temp=s[i];</span><br><span class="line">        s[i++]=s[t];</span><br><span class="line">        s[t--]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小学口算练习系统"><a href="#小学口算练习系统" class="headerlink" title="小学口算练习系统"></a>小学口算练习系统</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">t_jia</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">t_jian</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">t_cheng</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">t_chu</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c1, <span class="type">int</span> c2, <span class="type">int</span> d, <span class="type">int</span> e)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Jia</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Jian</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Cheng</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Chu</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">selectDifficulty</span><span class="params">()</span>;                    <span class="comment">// 选着练习难度级别</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">viewPracticeRecord</span><span class="params">()</span>;                 <span class="comment">// 查看练习记录</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">viewAccuracy</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span> correct)</span>; <span class="comment">// 查看正确率</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printLog</span><span class="params">()</span>;                           <span class="comment">// 做题时间</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sys</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>]; <span class="comment">// 名字</span></span><br><span class="line">    <span class="type">int</span> x;         <span class="comment">// 学号</span></span><br><span class="line">    <span class="type">int</span> year;      <span class="comment">// 年级</span></span><br><span class="line">    <span class="type">int</span> clas;      <span class="comment">// 班级</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sys</span> <span class="title">who</span>;</span></span><br><span class="line">    <span class="type">int</span> inputErrorCount = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你的名字:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;who.name);</span><br><span class="line">    getchar(); <span class="comment">// 清除输入缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入你的学号:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;who.x) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar(); <span class="comment">// 清除输入缓冲区</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无效输入，请重新输入。\n&quot;</span>);</span><br><span class="line">            getchar(); <span class="comment">// 清除输入缓冲区</span></span><br><span class="line">            inputErrorCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (inputErrorCount &lt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inputErrorCount &gt;= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入错误次数过多，程序退出。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inputErrorCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入你的年纪:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;who.year) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar(); <span class="comment">// 清除输入缓冲区</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无效输入，请重新输入。\n&quot;</span>);</span><br><span class="line">            getchar(); <span class="comment">// 清除输入缓冲区</span></span><br><span class="line">            inputErrorCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (inputErrorCount &lt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inputErrorCount &gt;= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入错误次数过多，程序退出。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inputErrorCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入你的班级:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;who.clas) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            getchar(); <span class="comment">// 清除输入缓冲区</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无效输入，请重新输入。\n&quot;</span>);</span><br><span class="line">            getchar(); <span class="comment">// 清除输入缓冲区</span></span><br><span class="line">            inputErrorCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (inputErrorCount &lt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inputErrorCount &gt;= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入错误次数过多，程序退出。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> difficulty = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;欢迎进入练习系统！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择你想要进行的练习:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1. 加法练习\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2. 减法练习\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3. 乘法练习\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;4. 除法练习\n&quot;</span>);</span><br><span class="line">        <span class="type">int</span> result = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            ; <span class="comment">// 清除输入缓冲区</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">1</span> &amp;&amp; (n == <span class="number">1</span> || n == <span class="number">2</span> || n == <span class="number">3</span> || n == <span class="number">4</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            difficulty = selectDifficulty();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无效输入，请重新输入。\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">switch</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Jia(difficulty);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        Jian(difficulty);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        Cheng(difficulty);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        Chu(difficulty);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    printLog();</span><br><span class="line">    <span class="type">char</span> cu;</span><br><span class="line">    <span class="type">char</span> cm;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;你是否想要查看练习记录输入Y或N: &quot;</span>);</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="type">char</span> cm = getchar();</span><br><span class="line">            <span class="keyword">if</span>(cm == <span class="string">&#x27;Y&#x27;</span> || cm == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                viewPracticeRecord();</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cm == <span class="string">&#x27;N&#x27;</span> || cm == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;非法输入，请重新输入！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span>(getchar() != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;你是否想要继续答题,输入Y或任意键退出: &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;cu);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (cu == <span class="string">&#x27;Y&#x27;</span>|| cu==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;欢迎进入练习系统！\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请选择你想要进行的练习:\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;1. 加法练习\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;2. 减法练习\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;3. 乘法练习\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;4. 除法练习\n&quot;</span>);</span><br><span class="line">                <span class="type">int</span> result = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">                <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    ; <span class="comment">// 清除输入缓冲区</span></span><br><span class="line">                <span class="keyword">if</span> (result == <span class="number">1</span> &amp;&amp; (n == <span class="number">1</span> || n == <span class="number">2</span> || n == <span class="number">3</span> || n == <span class="number">4</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    difficulty = selectDifficulty();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;无效输入，请重新输入。\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            srand(time(<span class="literal">NULL</span>));</span><br><span class="line">            <span class="keyword">switch</span> (n)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Jia(difficulty);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                Jian(difficulty);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                Cheng(difficulty);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                Chu(difficulty);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            printLog();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出练习&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">t_jia</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> <span class="comment">// 储存加法</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;练习记录.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);               <span class="comment">// 创建一个指针</span></span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d + %d = %d 正确答案%d\n&quot;</span>, a, b, c, d); <span class="comment">// 将算式存入文件中</span></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">t_jian</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> <span class="comment">// 储存减法</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;练习记录.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d - %d = %d 正确答案%d \n&quot;</span>, a, b, c, d);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">t_cheng</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span> <span class="comment">// 储存乘法</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;练习记录.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d x %d = %d 正确答案%d\n&quot;</span>, a, b, c, d);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">t_chu</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c1, <span class="type">int</span> c2, <span class="type">int</span> d, <span class="type">int</span> e)</span> <span class="comment">// 储存除法</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;练习记录.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d / %d = %d  余 %d  正确答案 %d  余 %d\n&quot;</span>, a, b, c1, c2, d, e);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Jia</span><span class="params">(<span class="type">int</span> difficulty)</span> <span class="comment">// 加法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c, answer, n, t = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lower_bound, upper_bound;</span><br><span class="line">    <span class="comment">// 根据难度级别设置题目范围</span></span><br><span class="line">    <span class="keyword">switch</span> (difficulty)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        lower_bound = <span class="number">1</span>;</span><br><span class="line">        upper_bound = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        lower_bound = <span class="number">10</span>;</span><br><span class="line">        upper_bound = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        lower_bound = <span class="number">100</span>;</span><br><span class="line">        upper_bound = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无效的难度级别！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你想要练习的题数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;开始练习：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = rand() % (upper_bound - lower_bound + <span class="number">1</span>) + lower_bound;</span><br><span class="line">        b = rand() % (upper_bound - lower_bound + <span class="number">1</span>) + lower_bound;</span><br><span class="line">        answer = a + b;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d + %d = &quot;</span>, a, b);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">        getchar();</span><br><span class="line">        t_jia(a, b, c, answer);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> (c == answer)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，回答正确!\n\n&quot;</span>);</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，回答错误！正确答案是 %d\n\n&quot;</span>, answer);</span><br><span class="line">            f++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你做对的题数为%d,做错的题数为%d\n\n&quot;</span>, t, f);</span><br><span class="line">    viewAccuracy(n, t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;============================================\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Jian</span><span class="params">(difficulty)</span> <span class="comment">// 减法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c, answer, n, t = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lower_bound, upper_bound;</span><br><span class="line">    <span class="comment">// 根据难度级别设置题目范围</span></span><br><span class="line">    <span class="keyword">switch</span> (difficulty)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        lower_bound = <span class="number">1</span>;</span><br><span class="line">        upper_bound = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        lower_bound = <span class="number">10</span>;</span><br><span class="line">        upper_bound = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        lower_bound = <span class="number">100</span>;</span><br><span class="line">        upper_bound = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无效的难度级别！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你想要练习的题数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;开始练习：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = rand() % (upper_bound - lower_bound + <span class="number">1</span>) + lower_bound;</span><br><span class="line">        b = rand() % (upper_bound - lower_bound + <span class="number">1</span>) + lower_bound;</span><br><span class="line">        answer = a - b;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d - %d = &quot;</span>, a, b);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">        getchar();</span><br><span class="line">        t_jian(a, b, c, answer);</span><br><span class="line">        <span class="keyword">if</span> (c == answer)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，回答正确！\n\n&quot;</span>);</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，回答错误！正确答案是 %d\n\n&quot;</span>, answer);</span><br><span class="line">            f++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你做对的题数为%d,做错的题数为%d\n\n&quot;</span>, t, f);</span><br><span class="line">    viewAccuracy(t, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;============================================\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Cheng</span><span class="params">(difficulty)</span> <span class="comment">// 乘法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c, answer, n, t = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lower_bound, upper_bound;</span><br><span class="line">    <span class="comment">// 根据难度级别设置题目范围</span></span><br><span class="line">    <span class="keyword">switch</span> (difficulty)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        lower_bound = <span class="number">1</span>;</span><br><span class="line">        upper_bound = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        lower_bound = <span class="number">10</span>;</span><br><span class="line">        upper_bound = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        lower_bound = <span class="number">100</span>;</span><br><span class="line">        upper_bound = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无效的难度级别！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你想要练习的题数：\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;开始练习：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = rand() % (upper_bound - lower_bound + <span class="number">1</span>) + lower_bound;</span><br><span class="line">        b = rand() % (upper_bound - lower_bound + <span class="number">1</span>) + lower_bound;</span><br><span class="line">        answer = a * b;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d x %d = &quot;</span>, a, b);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line">        getchar();</span><br><span class="line">        t_cheng(a, b, c, answer);</span><br><span class="line">        <span class="keyword">if</span> (c == answer)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，回答正确！\n\n&quot;</span>);</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，回答错误！正确答案是 %d\n\n&quot;</span>, answer);</span><br><span class="line">            f++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你做对的题数为%d,做错的题数为%d\n\n&quot;</span>, t, f);</span><br><span class="line">    viewAccuracy(n, t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;============================================\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Chu</span><span class="params">(difficulty)</span> <span class="comment">// 除法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c, answer, n, t = <span class="number">0</span>, f = <span class="number">0</span>, answer1, answer2, c1, c2;</span><br><span class="line">    <span class="type">int</span> lower_bound, upper_bound;</span><br><span class="line">    <span class="comment">// 根据难度级别设置题目范围</span></span><br><span class="line">    <span class="keyword">switch</span> (difficulty)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        lower_bound = <span class="number">1</span>;</span><br><span class="line">        upper_bound = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        lower_bound = <span class="number">10</span>;</span><br><span class="line">        upper_bound = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        lower_bound = <span class="number">100</span>;</span><br><span class="line">        upper_bound = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无效的难度级别！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入你想要练习的题数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;开始练习：\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a = rand() % (upper_bound - lower_bound + <span class="number">1</span>) + lower_bound;</span><br><span class="line">        b = rand() % (upper_bound - lower_bound + <span class="number">1</span>) + lower_bound;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; a)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = b;</span><br><span class="line">            b = a;</span><br><span class="line">            a = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        answer1 = a / b;</span><br><span class="line">        answer2 = a % b;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d / %d = \t&quot;</span>, a, b);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;余 &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c2);</span><br><span class="line">        getchar();</span><br><span class="line">        t_chu(a, b, c1, c2, answer1, answer2);</span><br><span class="line">        <span class="keyword">if</span> (c1 == answer1 &amp;&amp; c2 == answer2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，回答正确！\n&quot;</span>);</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，回答错误！正确答案是 %d  余  %d\n\n&quot;</span>, answer1, answer2);</span><br><span class="line">            f++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;你做对的题数为%d,做错的题数为%d\n\n&quot;</span>, t, f);</span><br><span class="line">    viewAccuracy(t, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;============================================\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">viewPracticeRecord</span><span class="params">()</span> <span class="comment">// 练习记录</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;练习记录.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">char</span> line[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;练习记录：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), fp))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">viewAccuracy</span><span class="params">(<span class="type">int</span> total, <span class="type">int</span> correct)</span> <span class="comment">// 查看正确率</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> accuracy = (<span class="type">float</span>)correct / total * <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;您的正确率为：%.1f%%\n\n&quot;</span>, accuracy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">selectDifficulty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> difficulty;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择难度级别：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. 简单\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2. 中等\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3. 困难\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;difficulty) != <span class="number">1</span> || difficulty &lt; <span class="number">1</span> || difficulty &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;非法输入，请重新输入：\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (getchar() != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> difficulty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printLog</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;练习记录.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件 %s！\n&quot;</span>, <span class="string">&quot;练习记录.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">t</span> =</span> localtime(&amp;now);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;做题时间 %d-%02d-%02d %02d:%02d:%02d\n&quot;</span>, t-&gt;tm_year + <span class="number">1900</span>, t-&gt;tm_mon + <span class="number">1</span>, t-&gt;tm_mday, t-&gt;tm_hour, t-&gt;tm_min, t-&gt;tm_sec);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扫雷"><a href="#扫雷" class="headerlink" title="扫雷"></a>扫雷</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf8-*-</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">game</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.<span class="built_in">all</span> = []  <span class="comment"># 所有未扫区域的列表</span></span><br><span class="line">        self.mine = []  <span class="comment"># 雷所在区域的列表</span></span><br><span class="line">        self.sweptlist = []  <span class="comment"># 储存已经扫过的区域</span></span><br><span class="line">        self.mark = []  <span class="comment"># 储存已标记区域</span></span><br><span class="line">        self.state = <span class="string">&#x27;reading&#x27;</span>  <span class="comment"># 当前游戏状态</span></span><br><span class="line">        self.timeused = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self, row, column, mine</span>):  <span class="comment"># 创建游戏的函数</span></span><br><span class="line">        self.row = row  <span class="comment"># 游戏行数</span></span><br><span class="line">        self.column = column  <span class="comment"># 游戏列数</span></span><br><span class="line">        self.minenum = mine  <span class="comment"># 游戏雷数</span></span><br><span class="line">        self.root = Tk()</span><br><span class="line">        self.root.title(<span class="string">&#x27;扫雷迷你版&#x27;</span>)</span><br><span class="line">        <span class="comment"># 显示总雷数与已标记雷数之差</span></span><br><span class="line">        <span class="comment"># 计时器</span></span><br><span class="line">        self.minecount = StringVar()</span><br><span class="line">        self.timecount = StringVar()</span><br><span class="line">        self.label1 = Label(self.root, bg=<span class="string">&#x27;black&#x27;</span>, height=<span class="number">2</span>,</span><br><span class="line">                            fg=<span class="string">&#x27;red&#x27;</span>, width=<span class="number">6</span>, textvariable=self.timecount).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line">        self.label2 = Label(self.root, bg=<span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">                            fg=<span class="string">&#x27;red&#x27;</span>, height=<span class="number">2</span>, width=<span class="number">6</span>, textvariable=self.minecount).grid(row=<span class="number">0</span>,</span><br><span class="line">                                                                                           column=self.column - <span class="number">2</span>,</span><br><span class="line">                                                                                           columnspan=<span class="number">2</span>)</span><br><span class="line">        self.minecount.<span class="built_in">set</span>(self.minenum)</span><br><span class="line">        self.timecount.<span class="built_in">set</span>(<span class="string">&#x27;%03d&#x27;</span> % <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, self.row + <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.column):</span><br><span class="line">                self.<span class="built_in">all</span>.append([i, j])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> sample(self.<span class="built_in">all</span>, self.minenum):</span><br><span class="line">            self.mine.append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.mine:</span><br><span class="line">            mine_bt = Button(self.root, width=<span class="number">2</span>, height=<span class="number">1</span>)</span><br><span class="line">            mine_bt.bind(<span class="string">&#x27;&lt;Button-1&gt;&#x27;</span>, self.left_key1)</span><br><span class="line">            mine_bt.bind(<span class="string">&#x27;&lt;Button-3&gt;&#x27;</span>, self.right_key)</span><br><span class="line">            mine_bt.grid(row=i[<span class="number">0</span>], column=i[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.<span class="built_in">all</span>:</span><br><span class="line">            <span class="keyword">if</span> (i <span class="keyword">in</span> self.mine) == <span class="literal">False</span>:</span><br><span class="line">                self.bt = Button(self.root, width=<span class="number">2</span>, height=<span class="number">1</span>)</span><br><span class="line">                self.bt.bind(<span class="string">&#x27;&lt;Button-1&gt;&#x27;</span>, self.left_key)</span><br><span class="line">                self.bt.bind(<span class="string">&#x27;&lt;Button-3&gt;&#x27;</span>, self.right_key)</span><br><span class="line">                self.bt.grid(row=i[<span class="number">0</span>], column=i[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        menubar = Menu(self.root)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> [[<span class="string">&#x27;新游戏&#x27;</span>, self.new],</span><br><span class="line">                  [<span class="string">&#x27;初级&#x27;</span>, self.beginner]]:</span><br><span class="line">            menubar.add_command(label=x[<span class="number">0</span>], command=x[<span class="number">1</span>])</span><br><span class="line">        self.root[<span class="string">&#x27;menu&#x27;</span>] = menubar</span><br><span class="line">        self.root.mainloop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">beginner</span>(<span class="params">self</span>):</span><br><span class="line">        self.root.destroy()</span><br><span class="line">        self.__init__()</span><br><span class="line">        self.size(<span class="number">10</span>, <span class="number">10</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new</span>(<span class="params">self</span>):</span><br><span class="line">        self.root.destroy()</span><br><span class="line">        self.__init__()</span><br><span class="line">        <span class="keyword">if</span> self.column == <span class="number">9</span>:</span><br><span class="line">            self.size(self.row, self.column, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quiz</span>(<span class="params">self</span>):</span><br><span class="line">        self.root.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        self.size(<span class="number">10</span>, <span class="number">10</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right_key</span>(<span class="params">self, event</span>):</span><br><span class="line">        w = event.widget</span><br><span class="line">        t = w.cget(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">        g = w.grid_info()</span><br><span class="line">        x = <span class="built_in">int</span>(g[<span class="string">&#x27;row&#x27;</span>])</span><br><span class="line">        y = <span class="built_in">int</span>(g[<span class="string">&#x27;column&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> t == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            self.mark.remove([x, y])</span><br><span class="line">            w.config(text=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            self.minenum += <span class="number">1</span></span><br><span class="line">            self.minecount.<span class="built_in">set</span>(self.minenum)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.mark.append([x, y])</span><br><span class="line">            w.config(text=<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            self.minenum -= <span class="number">1</span></span><br><span class="line">            self.minecount.<span class="built_in">set</span>(self.minenum)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left_key1</span>(<span class="params">self, event</span>):</span><br><span class="line">        w = event.widget</span><br><span class="line">        g = w.grid_info()</span><br><span class="line">        x = <span class="built_in">int</span>(g[<span class="string">&#x27;row&#x27;</span>])</span><br><span class="line">        y = <span class="built_in">int</span>(g[<span class="string">&#x27;column&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> w.cget(<span class="string">&#x27;text&#x27;</span>) != <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            self.state = <span class="string">&#x27;fail&#x27;</span></span><br><span class="line">            Button(self.root, text=<span class="string">&#x27;X&#x27;</span>, fg=<span class="string">&#x27;red&#x27;</span>, relief=SUNKEN).grid(row=x, column=y)</span><br><span class="line">            tl = Toplevel()</span><br><span class="line">            Label(tl, text=<span class="string">&#x27;很抱歉，您输了。&#x27;</span>, width=<span class="number">50</span>).pack()</span><br><span class="line">            Button(tl, text=<span class="string">&#x27;新游戏&#x27;</span>, command=self.new, width=<span class="number">6</span>).pack()</span><br><span class="line">            Button(tl, text=<span class="string">&#x27;退出&#x27;</span>, command=self.quiz, width=<span class="number">6</span>).pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fail</span>(<span class="params">self</span>):</span><br><span class="line">        tl = Toplevel()</span><br><span class="line">        Label(tl, text=<span class="string">&#x27;很抱歉，您输了。&#x27;</span>, width=<span class="number">50</span>).pack()</span><br><span class="line">        Button(tl, text=<span class="string">&#x27;新游戏&#x27;</span>, command=self.new, width=<span class="number">6</span>).pack()</span><br><span class="line">        Button(tl, text=<span class="string">&#x27;退出&#x27;</span>, command=self.quiz, width=<span class="number">6</span>).pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">win</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">all</span>) == <span class="built_in">len</span>(self.mine):</span><br><span class="line">            self.state = <span class="string">&#x27;win&#x27;</span></span><br><span class="line">            tl = Toplevel()</span><br><span class="line">            bt = Label(tl, text=<span class="string">&#x27;恭喜，您赢了！您所用时间为%d秒。&#x27;</span> % self.timeused, width=<span class="number">50</span>).pack()</span><br><span class="line">            Button(tl, text=<span class="string">&#x27;再来一局&#x27;</span>, command=self.new, width=<span class="number">6</span>).pack()</span><br><span class="line">            Button(tl, text=<span class="string">&#x27;退出&#x27;</span>, command=self.quiz, width=<span class="number">6</span>).pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left_key</span>(<span class="params">self, event</span>):</span><br><span class="line">        w = event.widget</span><br><span class="line">        g = w.grid_info()</span><br><span class="line">        x = <span class="built_in">int</span>(g[<span class="string">&#x27;row&#x27;</span>])</span><br><span class="line">        y = <span class="built_in">int</span>(g[<span class="string">&#x27;column&#x27;</span>])</span><br><span class="line">        <span class="keyword">if</span> w.cget(<span class="string">&#x27;text&#x27;</span>) != <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            self.sweptlist.append([x, y])</span><br><span class="line">            self.count(x, y)</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;reading&#x27;</span>:</span><br><span class="line">            self.state = <span class="string">&#x27;begin&#x27;</span></span><br><span class="line">            self.f = Thread(target=self.time, args=(), name=<span class="string">&#x27;thread-&#x27;</span>)</span><br><span class="line">            self.f.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self, i, j</span>):</span><br><span class="line">        self.n = <span class="number">0</span></span><br><span class="line">        a = <span class="built_in">max</span>(i - <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        b = <span class="built_in">min</span>(i + <span class="number">2</span>, self.row + <span class="number">3</span>)</span><br><span class="line">        c = <span class="built_in">max</span>(<span class="number">0</span>, j - <span class="number">1</span>)</span><br><span class="line">        d = <span class="built_in">min</span>(j + <span class="number">2</span>, self.column)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">1</span>, i + <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(j - <span class="number">1</span>, j + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> ([r, s] <span class="keyword">in</span> self.mine) == <span class="literal">True</span>:</span><br><span class="line">                    self.n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.n == <span class="number">0</span>:</span><br><span class="line">            Button(self.root, width=<span class="number">2</span>, height=<span class="number">1</span>, state=<span class="string">&#x27;disabled&#x27;</span>, relief=SUNKEN).grid(row=i, column=j)</span><br><span class="line">            <span class="keyword">if</span> [i, j] <span class="keyword">in</span> self.<span class="built_in">all</span>:</span><br><span class="line">                self.<span class="built_in">all</span>.remove([i, j])</span><br><span class="line">            self.win()</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(a, b):</span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(c, d):</span><br><span class="line">                    <span class="keyword">if</span> ([r, s] <span class="keyword">in</span> self.sweptlist) == <span class="literal">False</span>:</span><br><span class="line">                        self.sweptlist.append([r, s])</span><br><span class="line">                        self.count(r, s)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = [<span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#008000&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00008B&#x27;</span>, <span class="string">&#x27;#8B0000&#x27;</span>, <span class="string">&#x27;#20B2AA&#x27;</span>, <span class="string">&#x27;#000000&#x27;</span>, <span class="string">&#x27;#808080&#x27;</span>]</span><br><span class="line">            x = a[self.n - <span class="number">1</span>]</span><br><span class="line">            bt = Button(self.root, width=<span class="number">2</span>, height=<span class="number">1</span>, fg=x, text=self.n, relief=SUNKEN)</span><br><span class="line">            bt.bind(<span class="string">&#x27;&lt;Double-Button-1&gt;&#x27;</span>, self.doubleleft_key)</span><br><span class="line">            bt.grid(row=i, column=j)</span><br><span class="line">            <span class="keyword">if</span> [i, j] <span class="keyword">in</span> self.<span class="built_in">all</span>:</span><br><span class="line">                self.<span class="built_in">all</span>.remove([i, j])</span><br><span class="line">            self.win()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doubleleft_key</span>(<span class="params">self, event</span>):</span><br><span class="line">        mark = <span class="number">0</span></span><br><span class="line">        w = event.widget</span><br><span class="line">        g = w.grid_info()</span><br><span class="line">        x = <span class="built_in">int</span>(g[<span class="string">&#x27;row&#x27;</span>])</span><br><span class="line">        y = <span class="built_in">int</span>(g[<span class="string">&#x27;column&#x27;</span>])</span><br><span class="line">        a = <span class="built_in">max</span>(x - <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        b = <span class="built_in">min</span>(x + <span class="number">2</span>, self.row + <span class="number">3</span>)</span><br><span class="line">        c = <span class="built_in">max</span>(<span class="number">0</span>, y - <span class="number">1</span>)</span><br><span class="line">        d = <span class="built_in">min</span>(y + <span class="number">2</span>, self.column)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(a, b):</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(c, d):</span><br><span class="line">                <span class="keyword">if</span> [r, s] <span class="keyword">in</span> self.mark:</span><br><span class="line">                    mark += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> mark == w.cget(<span class="string">&#x27;text&#x27;</span>):</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(a, b):</span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(c, d):</span><br><span class="line">                    <span class="keyword">if</span> ([r, s] <span class="keyword">in</span> self.mark) == <span class="literal">False</span>:</span><br><span class="line">                        <span class="keyword">if</span> [r, s] <span class="keyword">in</span> self.mine:</span><br><span class="line">                            Button(self.root, text=<span class="string">&#x27;X&#x27;</span>, fg=<span class="string">&#x27;red&#x27;</span>, relief=SUNKEN).grid(row=r, column=s)</span><br><span class="line">                            self.state = <span class="string">&#x27;fail&#x27;</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">if</span> self.state != <span class="string">&#x27;win&#x27;</span>:</span><br><span class="line">                                self.sweptlist.append([r, s])</span><br><span class="line">                                self.count(r, s)</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;fail&#x27;</span>:</span><br><span class="line">            self.fail()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;begin&#x27;</span>:</span><br><span class="line">            self.timeused = i</span><br><span class="line">            self.timecount.<span class="built_in">set</span>(<span class="string">&#x27;%03d&#x27;</span> % self.timeused)</span><br><span class="line">            stdout.flush()</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">newgame = game()</span><br><span class="line">newgame.start()</span><br></pre></td></tr></table></figure><h2 id="企业员工信息管理系统的设计与实现"><a href="#企业员工信息管理系统的设计与实现" class="headerlink" title="企业员工信息管理系统的设计与实现"></a>企业员工信息管理系统的设计与实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">worker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];<span class="comment">//姓名</span></span><br><span class="line">    <span class="type">char</span> age[<span class="number">5</span>];<span class="comment">//年龄</span></span><br><span class="line">    <span class="type">char</span> worktime[<span class="number">5</span>];<span class="comment">//工龄</span></span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];<span class="comment">//性别</span></span><br><span class="line">    <span class="type">char</span> grade[<span class="number">5</span>];<span class="comment">//级别</span></span><br><span class="line">    <span class="type">char</span> marrige[<span class="number">5</span>];<span class="comment">//婚姻状况</span></span><br><span class="line">    <span class="type">char</span> wage[<span class="number">10</span>];<span class="comment">//工资</span></span><br><span class="line">    <span class="type">char</span> tired[<span class="number">5</span>];<span class="comment">//是否在职</span></span><br><span class="line">&#125;work[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> n ;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tz</span><span class="params">(<span class="type">char</span> a[],<span class="type">char</span> g[],<span class="type">char</span> w[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,q,e,o;</span><br><span class="line">    q=atoi(g);</span><br><span class="line">    e=atoi(a);</span><br><span class="line">    o=atoi(w);</span><br><span class="line">    <span class="keyword">switch</span>(q)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:o=o+<span class="number">20</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:o=o+<span class="number">40</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:o=o+<span class="number">60</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:o=o+<span class="number">80</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:o=o+<span class="number">100</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(e&gt;=<span class="number">65</span>) o=o+<span class="number">50</span>;</span><br><span class="line">    itoa(o,w,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件读写模块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">read</span><span class="params">()</span><span class="comment">//读入数据</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>( (fp = fopen(<span class="string">&quot;date.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请在D盘根目录下新建一个文本文件，文件名为date\n\n\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fscanf</span>(fp,<span class="string">&quot;%d\n&quot;</span>,&amp;n);</span><br><span class="line">  <span class="keyword">while</span>(i &lt; n)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fscanf</span>(fp,<span class="string">&quot;%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n&quot;</span>,work[i].name,work[i].age,work[i].worktime,work[i].sex,work[i].grade,work[i].marrige,work[i].wage,work[i].tired);</span><br><span class="line">    i ++;</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">write</span><span class="params">()</span><span class="comment">//写入数据</span></span><br><span class="line">&#123;</span><br><span class="line">  FILE *fp;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>( (fp = fopen(<span class="string">&quot;date.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)) == <span class="literal">NULL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">  <span class="keyword">while</span>(i &lt; n)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n&quot;</span>,work[i].name,work[i].age,work[i].worktime,work[i].sex,work[i].grade,work[i].marrige,work[i].wage,work[i].tired);</span><br><span class="line">    i ++;</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入模块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">()</span><span class="comment">// 从键盘输入</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i;</span><br><span class="line"> <span class="type">char</span> W;</span><br><span class="line">  <span class="type">int</span> flag;<span class="comment">//标记工号是否已存在</span></span><br><span class="line">  <span class="type">char</span> c;<span class="comment">//指令Y?N</span></span><br><span class="line">  read();<span class="comment">//输入数据前先将文件中原有的数据读入</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入职工的姓名:               \n\t\t&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,work[n].name);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strcmp</span>(work[i].name,work[n].name) == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;该工号已存在！\n\n&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\t\t是否继续输入?(Y/N): &quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c&quot;</span>,&amp;c);</span><br><span class="line">      <span class="keyword">if</span>(c == <span class="string">&#x27;N&#x27;</span> || c == <span class="string">&#x27;n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入职工的年龄:               \n\t\t&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,work[n].age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入职工的工龄:             \n\t\t&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,work[n].worktime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入职工的性别:               \n\t\t&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,work[n].sex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入职工的婚姻状况:               \n\t\t&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,work[n].marrige);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入职工的级别:               \n\t\t&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,work[n].grade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入职工的工资:               \n\t\t&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,work[n].wage);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入职工的是否在职:               \n\t\t&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,work[n].tired);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t是否继续输入?(Y/N): &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c&quot;</span>,&amp;c);</span><br><span class="line">    n ++;</span><br><span class="line">  &#125;<span class="keyword">while</span>( c != <span class="string">&#x27;N&#x27;</span> &amp;&amp; c != <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  write();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\n数据已保存！\n\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    tz(work[i].age,work[i].grade,work[i].wage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示模块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">output_inf</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t  姓名: %s\n&quot;</span>,work[id].name);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t  年龄: %s\n&quot;</span>,work[id].age);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t  工龄: %s\n&quot;</span>,work[id].worktime);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t  性别: %s\n&quot;</span>,work[id].sex);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t  婚姻状况: %s\n&quot;</span>,work[id].marrige);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t  级别: %s\n&quot;</span>,work[id].grade);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t  工资: %s\n&quot;</span>,work[id].wage);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t  是否在职: %s\n&quot;</span>,work[id].tired);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">()</span><span class="comment">//显示所有职工信息</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">  read();</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;无记录!\n\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">      output_inf(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">statistics_age</span><span class="params">()</span><span class="comment">//按照年龄统计</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择统计方式：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. 按照年龄上下限统计\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2. 按照年龄段统计\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> age_min, age_max;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄下限：\n&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age_min);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄上限：\n&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age_max);</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> age = atoi(work[i].age);</span><br><span class="line">                <span class="keyword">if</span> (age &gt;= age_min &amp;&amp; age &lt;= age_max)</span><br><span class="line">                &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;年龄在%d到%d之间的员工有%d人\n&quot;</span>, age_min, age_max, count);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> age_range[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> age = atoi(work[i].age);</span><br><span class="line">                <span class="keyword">if</span> (age &lt; <span class="number">20</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    age_range[<span class="number">0</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (age &lt; <span class="number">30</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    age_range[<span class="number">1</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (age &lt; <span class="number">40</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    age_range[<span class="number">2</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (age &lt; <span class="number">50</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    age_range[<span class="number">3</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (age &lt; <span class="number">60</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    age_range[<span class="number">4</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    age_range[<span class="number">5</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;年龄在20岁以下的员工有%d人\n&quot;</span>, age_range[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;年龄在20岁到30岁之间的员工有%d人\n&quot;</span>, age_range[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;年龄在30岁到40岁之间的员工有%d人\n&quot;</span>, age_range[<span class="number">2</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;年龄在40岁到50岁之间的员工有%d人\n&quot;</span>, age_range[<span class="number">3</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;年龄在50岁到60岁之间的员工有%d人\n&quot;</span>, age_range[<span class="number">4</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;年龄在60岁以上的员工有%d人\n&quot;</span>, age_range[<span class="number">5</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入有误！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询模块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">que</span><span class="params">()</span><span class="comment">//查询信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> num;</span><br><span class="line">  <span class="type">int</span> flag,i;</span><br><span class="line">  <span class="type">char</span> q_name[<span class="number">20</span>] ;<span class="comment">//查询姓名</span></span><br><span class="line">  <span class="type">char</span> q_worktime[<span class="number">20</span>] ;<span class="comment">//查询工龄</span></span><br><span class="line">  <span class="type">char</span> q_grade[<span class="number">20</span>] ; <span class="comment">//查询级别</span></span><br><span class="line">  <span class="type">char</span> c;<span class="comment">//指令Y?N</span></span><br><span class="line">  read();<span class="comment">//打开程序后，要查询以前的数据，要先读入</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t******************查询********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       1.按姓名查询        *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       2.按工龄查询        *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       3.按级别查询        *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t******************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入指令(1-3):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c&quot;</span>,&amp;num);</span><br><span class="line">    <span class="keyword">if</span>(num&lt;<span class="string">&#x27;1&#x27;</span>||num&gt;<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;错误指令！\n\n&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    flag = <span class="number">0</span>;<span class="comment">//用来标记职工信息是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(num == <span class="string">&#x27;1&#x27;</span>)<span class="comment">//按工号查询</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入您要查询职工的姓名：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,q_name);</span><br><span class="line">      <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ;i ++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">strcmp</span>(work[i].name,q_name) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          output_inf(i);</span><br><span class="line">          flag = <span class="number">1</span>;<span class="comment">//标记</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="string">&#x27;2&#x27;</span>)<span class="comment">//按工龄查询</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入您要查询职工的工龄：&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,q_worktime);</span><br><span class="line">      <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ;i ++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">strcmp</span>(work[i].worktime,q_worktime) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          output_inf(i);</span><br><span class="line">          flag = <span class="number">1</span>;<span class="comment">//标记</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="string">&#x27;3&#x27;</span>)<span class="comment">//按级别查询</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入您要查询职工的级别：&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,q_grade);</span><br><span class="line">      <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ;i ++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">strcmp</span>(work[i].grade,q_grade) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          output_inf(i);</span><br><span class="line">          flag = <span class="number">1</span>;<span class="comment">//标记</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)<span class="comment">//判断是否有该职工信息</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n\n无该职工信息!\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n是否继续查询(Y/N):&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c&quot;</span>,&amp;c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;N&#x27;</span> || c == <span class="string">&#x27;n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改信息模块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">mod</span><span class="params">()</span><span class="comment">//修改职工信息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> change_name[<span class="number">20</span>];<span class="comment">//需修改的职工的姓名</span></span><br><span class="line">  <span class="type">int</span> number;<span class="comment">//职工信息在数据中的位置</span></span><br><span class="line">  <span class="type">char</span> num;<span class="comment">//指令</span></span><br><span class="line">  <span class="type">char</span> message[<span class="number">100</span>];<span class="comment">//修改的信息</span></span><br><span class="line">  <span class="type">char</span> c;<span class="comment">//指令Y?N</span></span><br><span class="line">  <span class="type">int</span> W;</span><br><span class="line">  <span class="type">int</span> flag;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  read();</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需修改的职工的姓名：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,change_name);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strcmp</span>(work[i].name,change_name) == <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        number = i;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n\n无此员工信息！！\n\n&quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n\n是否继续修改(Y/N):&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c&quot;</span>,&amp;c);</span><br><span class="line">      <span class="keyword">if</span>(c == <span class="string">&#x27;N&#x27;</span> || c == <span class="string">&#x27;n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n\t\t******************修改********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       1.修改姓名         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       2.修改年龄         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       3.修改工龄         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       4.修改性别         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       5.修改婚姻状况         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       6.修改级别         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       7.修改工资        *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*       8.修改是否在职         *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*                    *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t*    输入其他任意键退出本模块     *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t******************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入指令(1-8):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c&quot;</span>,&amp;num);</span><br><span class="line">    <span class="keyword">if</span>(num &lt; <span class="string">&#x27;1&#x27;</span> || num &gt; <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;错误指令！\n\n&quot;</span>);</span><br><span class="line">      system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入修改后的信息：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,message);</span><br><span class="line">    <span class="keyword">switch</span>(num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span> : <span class="built_in">strcpy</span>(work[number].name,message); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span> : <span class="built_in">strcpy</span>(work[number].age,message); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span> : <span class="built_in">strcpy</span>(work[number].worktime,message); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span> : <span class="built_in">strcpy</span>(work[number].sex,message); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span> : <span class="built_in">strcpy</span>(work[number].marrige,message); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span> : <span class="built_in">strcpy</span>(work[number].grade,message); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span> : <span class="built_in">strcpy</span>(work[number].wage,message); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span> : <span class="built_in">strcpy</span>(work[number].tired,message); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n是否继续修改(Y/N):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c&quot;</span>,&amp;c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;N&#x27;</span> || c == <span class="string">&#x27;n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  write();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除信息模块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">del</span><span class="params">()</span><span class="comment">//删除职工信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> delete_name[<span class="number">20</span>];<span class="comment">//删除职工姓名</span></span><br><span class="line">  <span class="type">int</span> i,j;</span><br><span class="line">  <span class="type">int</span> flag;<span class="comment">//标记是否有该职工信息</span></span><br><span class="line">  <span class="type">char</span> c;</span><br><span class="line">  read();</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入需删除职工信息的姓名：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,delete_name);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>( <span class="built_in">strcmp</span>(work[i].name,delete_name) == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        n --;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = i ; j &lt; n ; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">          work[j] =work[j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;\n\n无此员工信息！\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;\n\n删除成功！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n是否继续删除(Y/N):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%*c%c&quot;</span>,&amp;c);</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;N&#x27;</span> || c == <span class="string">&#x27;n&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  write();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">output_all</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    read();</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;无记录!\n\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t  姓名: %s\n&quot;</span>,work[i].name);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t  年龄: %s\n&quot;</span>,work[i].age);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t  工龄: %s\n&quot;</span>,work[i].worktime);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t  性别: %s\n&quot;</span>,work[i].sex);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t  婚姻状况: %s\n&quot;</span>,work[i].marrige);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t  级别: %s\n&quot;</span>,work[i].grade);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t  工资: %s\n&quot;</span>,work[i].wage);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t\t  是否在职: %s\n&quot;</span>,work[i].tired);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">worker</span> <span class="title">temp</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择排序方式：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1.按工龄排序\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2.按年龄排序\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3.按姓名排序\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line">    <span class="keyword">switch</span>(choice)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(atoi(work[j].worktime)&gt;atoi(work[j+<span class="number">1</span>].worktime))</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp=work[j];</span><br><span class="line">                        work[j]=work[j+<span class="number">1</span>];</span><br><span class="line">                        work[j+<span class="number">1</span>]=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(atoi(work[j].age)&gt;atoi(work[j+<span class="number">1</span>].age))</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp=work[j];</span><br><span class="line">                        work[j]=work[j+<span class="number">1</span>];</span><br><span class="line">                        work[j+<span class="number">1</span>]=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(work[j].name,work[j+<span class="number">1</span>].name)&gt;<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp=work[j];</span><br><span class="line">                        work[j]=work[j+<span class="number">1</span>];</span><br><span class="line">                        work[j+<span class="number">1</span>]=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入有误！\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序结果如下：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        output_inf(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单模块</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span><span class="comment">//菜单</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;****************************************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*                                                              *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*                    欢迎使用本职工信息管理系统                *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*    1。创建职工信息                     2。查询职工信息       *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*    3。修改职工信息                     4。员工信息统计       *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*    5。删除职工信息                     6。输出所有员工信息              *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*    7。员工信息排序                     8。退出               *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*                                                              *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*                       请输入相应编号：                       *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*                                                              *\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;****************************************************************\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\t\t请输入指令(1-6): &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> kl0,kl1,jh;</span><br><span class="line">  kl0=<span class="number">147</span>;</span><br><span class="line">  <span class="keyword">for</span>(jh=<span class="number">0</span>;;jh++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入口令:  &quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;kl1);</span><br><span class="line">  <span class="keyword">if</span>(kl1==kl0)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;你是合法用户！\n&quot;</span>);<span class="keyword">break</span>;&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(jh&lt;<span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;你是非法用户!&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  n = <span class="number">0</span>;</span><br><span class="line">  system(<span class="string">&quot;color 0B&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span>(num)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: input(); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: que(); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: mod();  <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>: statistics_age();  <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>: del();  <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>: output_all(); <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>: sort();<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>: <span class="built_in">printf</span>(<span class="string">&quot;谢谢使用！\n\n&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">default</span> :<span class="built_in">printf</span>(<span class="string">&quot;\n---&gt;无效的指令!\n\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="音像图书信息管理系统"><a href="#音像图书信息管理系统" class="headerlink" title="音像图书信息管理系统"></a>音像图书信息管理系统</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 音像图书信息结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> number[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">    <span class="type">int</span> original_quantity;</span><br><span class="line">    <span class="type">int</span> remaining_quantity;</span><br><span class="line">&#125; AVItem;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 租借者信息结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> number[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> borrow_date[<span class="number">20</span>];</span><br><span class="line">    <span class="type">float</span> deposit;</span><br><span class="line">    <span class="type">int</span> borrow_days;</span><br><span class="line">    <span class="type">float</span> rent;</span><br><span class="line">&#125; Borrower;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> *data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Node *head;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建链表</span></span><br><span class="line">LinkedList* <span class="title function_">createLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">    LinkedList *<span class="built_in">list</span> = (LinkedList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedList));</span><br><span class="line">    <span class="built_in">list</span>-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表尾部添加节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">appendNode</span><span class="params">(LinkedList *<span class="built_in">list</span>, <span class="type">void</span> *data)</span> &#123;</span><br><span class="line">    Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;head = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node *currentNode = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">        <span class="keyword">while</span> (currentNode-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            currentNode = currentNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据编号查找节点</span></span><br><span class="line">Node* <span class="title function_">findNodeByNumber</span><span class="params">(LinkedList *<span class="built_in">list</span>, <span class="type">const</span> <span class="type">char</span> *number)</span> &#123;</span><br><span class="line">    Node *currentNode = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        AVItem *item = (AVItem*)currentNode-&gt;data;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(item-&gt;number, number) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentNode;</span><br><span class="line">        &#125;</span><br><span class="line">        currentNode = currentNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据编号删除节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNodeByNumber</span><span class="params">(LinkedList *<span class="built_in">list</span>, <span class="type">const</span> <span class="type">char</span> *number)</span> &#123;</span><br><span class="line">    Node *previousNode = <span class="literal">NULL</span>;</span><br><span class="line">    Node *currentNode = <span class="built_in">list</span>-&gt;head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        AVItem *item = (AVItem*)currentNode-&gt;data;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(item-&gt;number, number) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (previousNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">list</span>-&gt;head = currentNode-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                previousNode-&gt;next = currentNode-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(item);</span><br><span class="line">            <span class="built_in">free</span>(currentNode);</span><br><span class="line">            <span class="built_in">list</span>-&gt;length--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previousNode = currentNode;</span><br><span class="line">        currentNode = currentNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroyLinkedList</span><span class="params">(LinkedList *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    Node *currentNode = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">    <span class="keyword">while</span> (currentNode != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Node *tempNode = currentNode;</span><br><span class="line">        AVItem *item = (AVItem*)currentNode-&gt;data;</span><br><span class="line">        <span class="built_in">free</span>(item);</span><br><span class="line">        currentNode = currentNode-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(tempNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示音像图书信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayAVItem</span><span class="params">(AVItem *item)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;编号：%s\n&quot;</span>, item-&gt;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;名称：%s\n&quot;</span>, item-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原价：%.2f\n&quot;</span>, item-&gt;price);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原数量：%d\n&quot;</span>, item-&gt;original_quantity);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;剩余数量：%d\n&quot;</span>, item-&gt;remaining_quantity);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示租借者信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">displayBorrower</span><span class="params">(Borrower *borrower)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;编号：%s\n&quot;</span>, borrower-&gt;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;租借日期：%s\n&quot;</span>, borrower-&gt;borrow_date);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;押金：%.2f\n&quot;</span>, borrower-&gt;deposit);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;租借天数：%d\n&quot;</span>, borrower-&gt;borrow_days);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;租金：%.2f\n&quot;</span>, borrower-&gt;rent);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建音像图书</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">createAVItem</span><span class="params">(LinkedList *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    AVItem *item = (AVItem*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AVItem));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, item-&gt;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入名称：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, item-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入原价：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;item-&gt;price);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入原数量：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;item-&gt;original_quantity);</span><br><span class="line">    item-&gt;remaining_quantity = item-&gt;original_quantity;</span><br><span class="line"></span><br><span class="line">    appendNode(<span class="built_in">list</span>, item);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;音像图书创建成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 租借音像图书</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">borrowAVItem</span><span class="params">(LinkedList *<span class="built_in">list</span>, LinkedList *borrowedList)</span> &#123;</span><br><span class="line">    <span class="type">char</span> number[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> borrow_date[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入音像图书编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入租借日期：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, borrow_date);</span><br><span class="line"></span><br><span class="line">    Node *avNode = findNodeByNumber(<span class="built_in">list</span>, number);</span><br><span class="line">    <span class="keyword">if</span> (avNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无此音像图书！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AVItem *item = (AVItem*)avNode-&gt;data;</span><br><span class="line">    <span class="keyword">if</span> (item-&gt;remaining_quantity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;此音像图书已全部借出！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Borrower *borrower = (Borrower*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Borrower));</span><br><span class="line">    <span class="built_in">strcpy</span>(borrower-&gt;number, item-&gt;number);</span><br><span class="line">    <span class="built_in">strcpy</span>(borrower-&gt;borrow_date, borrow_date);</span><br><span class="line">    borrower-&gt;deposit = item-&gt;price * <span class="number">3</span>;</span><br><span class="line">    borrower-&gt;borrow_days = <span class="number">0</span>;</span><br><span class="line">    borrower-&gt;rent = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    appendNode(borrowedList, borrower);</span><br><span class="line"></span><br><span class="line">    item-&gt;remaining_quantity--;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;应缴押金：%.2f\n&quot;</span>, borrower-&gt;deposit);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;音像图书租借成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculateDays</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* date1, <span class="type">const</span> <span class="type">char</span>* date2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> year1, month1, day1;</span><br><span class="line">    <span class="type">int</span> year2, month2, day2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sscanf</span>(date1, <span class="string">&quot;%d-%d-%d&quot;</span>, &amp;year1, &amp;month1, &amp;day1);</span><br><span class="line">    <span class="built_in">sscanf</span>(date2, <span class="string">&quot;%d-%d-%d&quot;</span>, &amp;year2, &amp;month2, &amp;day2);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">tm1</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    tm1.tm_year = year1 - <span class="number">1900</span>;</span><br><span class="line">    tm1.tm_mon = month1 - <span class="number">1</span>;</span><br><span class="line">    tm1.tm_mday = day1;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">tm2</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    tm2.tm_year = year2 - <span class="number">1900</span>;</span><br><span class="line">    tm2.tm_mon = month2 - <span class="number">1</span>;</span><br><span class="line">    tm2.tm_mday = day2;</span><br><span class="line"></span><br><span class="line">    <span class="type">time_t</span> time1 = mktime(&amp;tm1);</span><br><span class="line">    <span class="type">time_t</span> time2 = mktime(&amp;tm2);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> diff = difftime(time2, time1);</span><br><span class="line">    <span class="type">int</span> days = (<span class="type">int</span>)(diff / (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归还音像图书</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">returnAVItem</span><span class="params">(LinkedList* <span class="built_in">list</span>, LinkedList* borrowedList)</span> &#123;</span><br><span class="line">    <span class="type">char</span> number[<span class="number">10</span>];</span><br><span class="line">    <span class="type">char</span> return_date[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入音像图书编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入归还日期：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, return_date);</span><br><span class="line"></span><br><span class="line">    Node* borrowerNode = findNodeByNumber(borrowedList, number);</span><br><span class="line">    <span class="keyword">if</span> (borrowerNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无此租借者！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Borrower* borrower = (Borrower*)borrowerNode-&gt;data;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;音像图书名称：%s\n&quot;</span>, borrower-&gt;number);</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> rent_rate;</span><br><span class="line">    Node* avNode = findNodeByNumber(<span class="built_in">list</span>, number);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (avNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无此音像图书！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AVItem* item = (AVItem*)avNode-&gt;data;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(item-&gt;number, <span class="string">&quot;B&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        rent_rate = <span class="number">1.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(item-&gt;number, <span class="string">&quot;V&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        rent_rate = <span class="number">2.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(item-&gt;number, <span class="string">&quot;R&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        rent_rate = <span class="number">3.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无此音像图书！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算租借天数</span></span><br><span class="line">    <span class="type">int</span> borrow_days = calculateDays(borrower-&gt;borrow_date, return_date);</span><br><span class="line"></span><br><span class="line">    borrower-&gt;borrow_days = borrow_days;</span><br><span class="line">    borrower-&gt;rent = borrow_days * rent_rate;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;租借天数：%d\n&quot;</span>, borrower-&gt;borrow_days);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;应退押金：%.2f\n&quot;</span>, borrower-&gt;deposit - borrower-&gt;rent);</span><br><span class="line"></span><br><span class="line">    item-&gt;remaining_quantity++;</span><br><span class="line"></span><br><span class="line">    deleteNodeByNumber(borrowedList, borrower-&gt;number);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;音像图书归还成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 购进音像图书</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">purchaseAVItem</span><span class="params">(LinkedList *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="type">char</span> number[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> additional_quantity;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入音像图书编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入增加数量：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;additional_quantity);</span><br><span class="line"></span><br><span class="line">    Node *avNode = findNodeByNumber(<span class="built_in">list</span>, number);</span><br><span class="line">    <span class="keyword">if</span> (avNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        AVItem *item = (AVItem*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AVItem));</span><br><span class="line">        <span class="built_in">strcpy</span>(item-&gt;number, number);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入名称：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, item-&gt;name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入原价：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;item-&gt;price);</span><br><span class="line">        item-&gt;original_quantity = additional_quantity;</span><br><span class="line">        item-&gt;remaining_quantity = additional_quantity;</span><br><span class="line"></span><br><span class="line">        appendNode(<span class="built_in">list</span>, item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AVItem *item = (AVItem*)avNode-&gt;data;</span><br><span class="line">        item-&gt;original_quantity += additional_quantity;</span><br><span class="line">        item-&gt;remaining_quantity += additional_quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;音像图书购进成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报废音像图书</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">scrapAVItem</span><span class="params">(LinkedList *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="type">char</span> number[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> quantity;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入音像图书编号：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入报废数量：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;quantity);</span><br><span class="line"></span><br><span class="line">    Node *avNode = findNodeByNumber(<span class="built_in">list</span>, number);</span><br><span class="line">    <span class="keyword">if</span> (avNode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无此音像图书！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AVItem *item = (AVItem*)avNode-&gt;data;</span><br><span class="line">    <span class="keyword">if</span> (item-&gt;original_quantity != item-&gt;remaining_quantity) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;已借出的音像图书不能报废！\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    item-&gt;original_quantity -= quantity;</span><br><span class="line">    item-&gt;remaining_quantity -= quantity;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;音像图书报废成功！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    LinkedList *avList = createLinkedList();</span><br><span class="line">    LinkedList *borrowedList = createLinkedList();</span><br><span class="line">    <span class="type">int</span> option;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;|----------------------------|\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;|请输入选项编号(0－－5):     |\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;|----------------------------|\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;| 1---创建音像图书           |\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;| 2---租借音像图书           |\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;| 3---归还音像图书           |\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;| 4---购进音像图书           |\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;| 5---报废音像图书           |\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;| 0---退出系统               |\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;|----------------------------|\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;option);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                createAVItem(avList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                borrowAVItem(avList, borrowedList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                returnAVItem(avList, borrowedList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                purchaseAVItem(avList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                scrapAVItem(avList);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                destroyLinkedList(avList);</span><br><span class="line">                destroyLinkedList(borrowedList);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;无效的选项！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用链表构建学生信息库"><a href="#用链表构建学生信息库" class="headerlink" title="用链表构建学生信息库"></a>用链表构建学生信息库</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> stud_node *<span class="title function_">Create_Stu_Doc</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">struct</span> stud_node *<span class="title function_">InsertDoc</span><span class="params">(<span class="keyword">struct</span> stud_node *head, <span class="keyword">struct</span> stud_node *stud)</span>;</span><br><span class="line"><span class="keyword">struct</span> stud_node *<span class="title function_">DeleteDco</span><span class="params">(<span class="keyword">struct</span> stud_node *head, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_Stu_Doc</span><span class="params">(<span class="keyword">struct</span> stud_node *head)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">head</span>, *<span class="title">p</span>;</span></span><br><span class="line">    <span class="type">int</span> choice, num, score;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> stud_node);</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1:Create 2:Insert 3:Delete 4:Print 0:Exit \n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">        <span class="keyword">switch</span>(choice) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">              head= Create_Stu_Doc();</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;Input num,name and score\n&quot;</span>);</span><br><span class="line">              <span class="built_in">scanf</span>(<span class="string">&quot;%d%s%d&quot;</span>, &amp;num, name, &amp;score);</span><br><span class="line">              p = (<span class="keyword">struct</span> stud_node *)<span class="built_in">malloc</span>(size);</span><br><span class="line">              p-&gt;num = num;</span><br><span class="line">              <span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">              p-&gt;score = score;</span><br><span class="line">              head = InsertDoc(head, p);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;Input num:\n&quot;</span>);</span><br><span class="line">              <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">              head = DeleteDco(head, num);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">              Print_Stu_Doc(head);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (choice != <span class="number">0</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*新建链表*/</span></span><br><span class="line"><span class="keyword">struct</span> stud_node *<span class="title function_">Create_Stu_Doc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num, score;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">head</span>,*<span class="title">p</span>;</span></span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input num,name and score:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s%d&quot;</span>, &amp;num, name, &amp;score);</span><br><span class="line">    <span class="keyword">while</span>(num!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (<span class="keyword">struct</span> stud_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> stud_node));</span><br><span class="line">        p-&gt;num = num;</span><br><span class="line">        <span class="built_in">strcpy</span>(p-&gt;name, name);</span><br><span class="line">        p-&gt;score = score;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        head = InsertDoc(head, p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Input num,name and score:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%s%d&quot;</span>, &amp;num, name, &amp;score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*插入操作*/</span></span><br><span class="line"><span class="keyword">struct</span> stud_node *<span class="title function_">InsertDoc</span><span class="params">(<span class="keyword">struct</span> stud_node *head, <span class="keyword">struct</span> stud_node *stud)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">ptr</span>, *<span class="title">ptr1</span>, *<span class="title">ptr2</span>;</span></span><br><span class="line">    ptr2 = head;</span><br><span class="line">    ptr = stud;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        head = ptr;</span><br><span class="line">        head-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((ptr-&gt;num&gt;ptr2-&gt;num)&amp;&amp;(ptr2-&gt;next!=<span class="literal">NULL</span>))</span><br><span class="line">        &#123;</span><br><span class="line">              ptr1 = ptr2;</span><br><span class="line">              ptr2 = ptr2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ptr-&gt;num&lt;=ptr2-&gt;num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(head==ptr2)</span><br><span class="line">                head = ptr;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ptr1-&gt;next = ptr;</span><br><span class="line">                ptr-&gt;next = ptr2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ptr2-&gt;next = ptr;</span><br><span class="line">            ptr-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*删除操作*/</span></span><br><span class="line"><span class="keyword">struct</span> stud_node *<span class="title function_">DeleteDco</span><span class="params">(<span class="keyword">struct</span> stud_node *head,<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">ptr1</span>, *<span class="title">ptr2</span>;</span></span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">NULL</span>&amp;&amp;head-&gt;num==num)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr2 = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(ptr2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ptr1 = head;</span><br><span class="line">    ptr2 = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(ptr2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ptr2-&gt;num==num)&#123;</span><br><span class="line">            ptr1-&gt;next = ptr2-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(ptr2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ptr1 = ptr2;</span><br><span class="line">            ptr2 = ptr2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*遍历操作*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Print_Stu_Doc</span><span class="params">(<span class="keyword">struct</span> stud_node *head)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">ptr</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nNo Records&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nThe Students Records Are:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Num\t Name\t Score\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (ptr = head; ptr!= <span class="literal">NULL</span>; ptr = ptr-&gt;next)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t%s\t%d\n&quot;</span>, ptr-&gt;num, ptr-&gt;name, ptr-&gt;score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************</span></span><br><span class="line"><span class="comment"> *@title LED system</span></span><br><span class="line"><span class="comment"> *@brief flight light</span></span><br><span class="line"><span class="comment"> *@brief </span></span><br><span class="line"><span class="comment"> *@time  2016.10.19</span></span><br><span class="line"><span class="comment"> *@editor小南&amp;zin</span></span><br><span class="line"><span class="comment"> *飞控爱好QQ群551883670,邮箱759421287@qq.com</span></span><br><span class="line"><span class="comment"> ******************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LED.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ALL_DATA.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">//机身前灯 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fLED_H()  GPIOB-&gt;BRR = GPIO_Pin_0|GPIO_Pin_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fLED_L()  GPIOB-&gt;BSRR = GPIO_Pin_0|GPIO_Pin_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fLED_Toggle()  GPIOB-&gt;ODR ^= GPIO_Pin_0|GPIO_Pin_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fLED_H1()  GPIOB-&gt;BRR = GPIO_Pin_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fLED_H2()  GPIOB-&gt;BRR = GPIO_Pin_1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fLED_L1()  GPIOB-&gt;BSRR = GPIO_Pin_0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fLED_L2()  GPIOB-&gt;BSRR = GPIO_Pin_1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="comment">//机身后灯 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bLED_H()  GPIOA-&gt;BRR = GPIO_Pin_6|GPIO_Pin_7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bLED_L()  GPIOA-&gt;BSRR  = GPIO_Pin_6|GPIO_Pin_7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bLED_Toggle()  GPIOA-&gt;ODR ^= GPIO_Pin_6|GPIO_Pin_7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bLED_H1()  GPIOA-&gt;BRR = GPIO_Pin_6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bLED_H2()  GPIOA-&gt;BRR = GPIO_Pin_7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bLED_L1()  GPIOA-&gt;BSRR  = GPIO_Pin_6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bLED_L2()  GPIOA-&gt;BSRR  = GPIO_Pin_7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------</span></span><br><span class="line"><span class="comment">/*     you can select the LED statue on enum contains            */</span></span><br><span class="line">sLED LED = &#123;<span class="number">100</span>,AllFlashLight&#125;;  <span class="comment">//LED initial statue is off;</span></span><br><span class="line">                             <span class="comment">//default 300ms flash the status</span></span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment"> *  LED Init</span></span><br><span class="line"><span class="comment"> * @param[in] </span></span><br><span class="line"><span class="comment"> * @param[out] </span></span><br><span class="line"><span class="comment"> * @return     </span></span><br><span class="line"><span class="comment"> ***************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LEDInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOA , ENABLE);</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;   </span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;     </span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">fLED_L();<span class="comment">//暗</span></span><br><span class="line">bLED_L();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment"> *  LED system</span></span><br><span class="line"><span class="comment"> * @param[in] </span></span><br><span class="line"><span class="comment"> * @param[out] </span></span><br><span class="line"><span class="comment"> * @return     </span></span><br><span class="line"><span class="comment"> ***************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PilotLED</span><span class="params">()</span> <span class="comment">//flash 300MS interval</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> LastTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(SysTick_count - LastTime &lt; LED.FlashTime)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LastTime = SysTick_count;</span><br><span class="line"><span class="keyword">switch</span>(LED.status)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> AlwaysOff:      <span class="comment">//常暗   </span></span><br><span class="line">bLED_L();</span><br><span class="line">fLED_L();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AllFlashLight:  <span class="comment">//全部同时闪烁</span></span><br><span class="line">fLED_H1();</span><br><span class="line">fLED_L1();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line">bLED_H1();</span><br><span class="line">bLED_L1();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line">bLED_H2();</span><br><span class="line">bLED_L2();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line">fLED_H2();</span><br><span class="line">fLED_L2();</span><br><span class="line">delay_ms(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AlwaysOn:  <span class="comment">//常亮</span></span><br><span class="line">bLED_H();</span><br><span class="line">fLED_H();</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> AlternateFlash: <span class="comment">//交替闪烁</span></span><br><span class="line">bLED_H();</span><br><span class="line">fLED_L();</span><br><span class="line">LED.status = AllFlashLight;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WARNING:</span><br><span class="line">fLED_L();</span><br><span class="line">bLED_Toggle();</span><br><span class="line">LED.FlashTime = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DANGEROURS:</span><br><span class="line">bLED_L();</span><br><span class="line">fLED_Toggle();</span><br><span class="line">LED.FlashTime = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">LED.status = AlwaysOff;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************END OF FILE*********************************/</span></span><br></pre></td></tr></table></figure><h2 id="EDA作业"><a href="#EDA作业" class="headerlink" title="EDA作业"></a>EDA作业</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY IEEE;</span><br><span class="line">USE IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line"></span><br><span class="line">ENTITY BIJIAOQI IS</span><br><span class="line"><span class="title function_">PORT</span><span class="params">(A : IN STD_LOGIC_VECTOR(<span class="number">2</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">     B : IN STD_LOGIC_VECTOR(<span class="number">2</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">     LT : OUT STD_LOGIC;</span></span><br><span class="line"><span class="params">     GT : OUT STD_LOGIC;</span></span><br><span class="line"><span class="params">     EQ : OUT STD_LOGIC)</span>;</span><br><span class="line">END ENTITY BIJIAOQI;</span><br><span class="line"></span><br><span class="line">ARCHITECTURE BHV OF BIJIAOQI IS</span><br><span class="line">    <span class="title function_">PROCESS</span><span class="params">(A, B)</span>   BEGIN</span><br><span class="line">        IF A &lt; B THEN</span><br><span class="line">            LT &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            GT &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            EQ &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ELSIF A &gt; B THEN</span><br><span class="line">            LT &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            GT &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            EQ &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ELSE</span><br><span class="line">            LT &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            GT &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            EQ &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        END IF;  </span><br><span class="line">    END PROCESS; </span><br><span class="line">END ARCHITECTURE BHV;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计一个比较电路，当输入的8421BCD码大于5时输出1，否则输出0</span></span><br><span class="line">LIBRARY IEEE;</span><br><span class="line">USE IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line"></span><br><span class="line">ENTITY COMPARE_CIRCUIT IS</span><br><span class="line">    <span class="title function_">PORT</span><span class="params">(INPUT : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         OUTPUT : OUT STD_LOGIC)</span>;  </span><br><span class="line">END ENTITY COMPARE_CIRCUIT;</span><br><span class="line"></span><br><span class="line">ARCHITECTURE BEHAVIOR OF COMPARE_CIRCUIT IS</span><br><span class="line">    <span class="title function_">PROCESS</span><span class="params">(INPUT)</span>   BEGIN</span><br><span class="line">        IF INPUT &gt; &quot;0101&quot; THEN</span><br><span class="line">            OUTPUT &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        ELSE</span><br><span class="line">            OUTPUT &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        END IF;           </span><br><span class="line">    END PROCESS; </span><br><span class="line">END ARCHITECTURE BEHAVIOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设计一个4位乘法器，为此首先设计一个加法器，用列化语句调用这个加法器，用移位相加的方式完成乘法。并以此项设计为基础，</span></span><br><span class="line"><span class="comment">//使用GENERIC参数传递的功能，设计一个16乘法器</span></span><br><span class="line"></span><br><span class="line">LIBRARY IEEE;</span><br><span class="line">USE IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line"></span><br><span class="line">ENTITY ADD_CIRCUIT IS  </span><br><span class="line">    <span class="title function_">PORT</span><span class="params">(A : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         B : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         SUM : OUT STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         CARRY : OUT STD_LOGIC)</span>;</span><br><span class="line">         </span><br><span class="line">END ENTITY ADD_CIRCUIT;</span><br><span class="line"></span><br><span class="line">ARCHITECTURE BEHAVIOR OF ADD_CIRCUIT IS</span><br><span class="line">    FUNCTION <span class="title function_">ADD</span><span class="params">(A : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         B : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>))</span> RETURN <span class="title function_">STD_LOGIC_VECTOR</span><span class="params">(<span class="number">3</span> DOWNTO <span class="number">0</span>)</span> IS</span><br><span class="line">         BEGIN</span><br><span class="line">             <span class="title function_">RETURN</span> <span class="params">(A + B)</span>;</span><br><span class="line">         END ADD;  </span><br><span class="line">    BEGIN</span><br><span class="line">        SUM &lt;= ADD(A, B);</span><br><span class="line">        CARRY &lt;= (A(<span class="number">3</span>) AND B(<span class="number">3</span>)) OR (A(<span class="number">2</span>) AND B(<span class="number">2</span>)) OR (A(<span class="number">1</span>) AND B(<span class="number">1</span>)) OR (A(<span class="number">0</span>) AND B(<span class="number">0</span>));</span><br><span class="line">    END PROCESS;</span><br><span class="line">END ARCHITECTURE BEHAVIOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设计一个4位4输入最大数值检测电路</span></span><br><span class="line">LIBRARY IEEE;</span><br><span class="line">USE IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line"></span><br><span class="line">ENTITY MAX_DETECT_CIRCUIT IS</span><br><span class="line">    <span class="title function_">PORT</span><span class="params">(INPUT : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         OUTPUT : OUT STD_LOGIC)</span>;</span><br><span class="line">         </span><br><span class="line">END ENTITY MAX_DETECT_CIRCUIT;</span><br><span class="line"></span><br><span class="line">ARCHITECTURE BEHAVIOR OF MAX_DETECT_CIRCUIT IS</span><br><span class="line">    FUNCTION <span class="title function_">MAX</span><span class="params">(A : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>))</span> RETURN STD_LOGIC IS</span><br><span class="line">    BEGIN</span><br><span class="line">        IF A &gt; &quot;0101&quot; THEN</span><br><span class="line">            RETURN &#x27;1&#x27;;</span><br><span class="line">            ELSE</span><br><span class="line">            RETURN <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            END IF;     </span><br><span class="line">    END MAX;</span><br><span class="line">    BEGIN</span><br><span class="line">        OUTPUT &lt;= MAX(INPUT);</span><br><span class="line">        END PROCESS;</span><br><span class="line">END ARCHITECTURE BEHAVIOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设计VHDL程序，实现两个8位二进制数相加，然后将和左移或右移4位，并分别将移位后的值存入变量A和B中</span></span><br><span class="line">LIBRARY IEEE;</span><br><span class="line">USE IEEE.STD_LOGIC_1164.ALL;</span><br><span class="line"></span><br><span class="line">ENTITY SHIFT_CIRCUIT IS</span><br><span class="line">    <span class="title function_">PORT</span><span class="params">(A : IN STD_LOGIC_VECTOR(<span class="number">7</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         B : IN STD_LOGIC_VECTOR(<span class="number">7</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         CARRY : IN STD_LOGIC;</span></span><br><span class="line"><span class="params">         SHIFT_AMOUNT : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         SUM : OUT STD_LOGIC_VECTOR(<span class="number">7</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         CARRY_OUT : OUT STD_LOGIC)</span>;</span><br><span class="line">         </span><br><span class="line">END ENTITY SHIFT_CIRCUIT;</span><br><span class="line"></span><br><span class="line">ARCHITECTURE BEHAVIOR OF SHIFT_CIRCUIT IS</span><br><span class="line">    FUNCTION <span class="title function_">SHIFT</span><span class="params">(A : IN STD_LOGIC_VECTOR(<span class="number">7</span> DOWNTO <span class="number">0</span>);</span></span><br><span class="line"><span class="params">         B : IN STD_LOGIC_VECTOR(<span class="number">7</span> DOWNTO <span class="number">0</span>);  </span></span><br><span class="line"><span class="params">         CARRY : IN STD_LOGIC;</span></span><br><span class="line"><span class="params">         SHIFT_AMOUNT : IN STD_LOGIC_VECTOR(<span class="number">3</span> DOWNTO <span class="number">0</span>))</span> RETURN <span class="title function_">STD_LOGIC_VECTOR</span><span class="params">(<span class="number">7</span> DOWNTO <span class="number">0</span>)</span> IS</span><br><span class="line">         BEGIN</span><br><span class="line">             <span class="title function_">RETURN</span> <span class="params">(A + B + CARRY)</span> &lt;&lt; SHIFT_AMOUNT;</span><br><span class="line">             END SHIFT;</span><br><span class="line">     </span><br><span class="line">    BEGIN</span><br><span class="line">        SUM &lt;= SHIFT(A, B, CARRY, SHIFT_AMOUNT);</span><br><span class="line">        CARY_OUT &lt;= (A + B + CARRY) &gt;&gt; SHIFT_AMOUNT;</span><br><span class="line">        END PROCESS;</span><br><span class="line">END ARCHITECTURE BEHAVIOR;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> schema</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span></span><br><span class="line"><span class="keyword">create</span> index</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分享随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C</title>
      <link href="/2023/06/14/4/"/>
      <url>/2023/06/14/4/</url>
      
        <content type="html"><![CDATA[<h1 id="零、概述"><a href="#零、概述" class="headerlink" title="零、概述"></a>零、概述</h1><p>写此篇博客的目的主要是为了梳理一下c语言基础知识，因为不会像c语言教程那样有很多例子，或者按照初学c语言的顺序，所以不推荐刚学习c语言的人阅读。（期末复习可以看看）</p><p>本篇文章有什么：</p><p>对c语言系统的梳理<br>对一些使用的细节进行梳理<br>解答对使用c语言时产生的一些疑惑<br>本篇内容基于“C语言程序设计-浙江大学-翁恺”、“C++ Primer”部分内容以及个人理解进行梳理，不充分之处欢迎指出   </p><h1 id="一、变量和基本类型"><a href="#一、变量和基本类型" class="headerlink" title="一、变量和基本类型"></a>一、变量和基本类型</h1><h2 id="（一）基本类型"><a href="#（一）基本类型" class="headerlink" title="（一）基本类型"></a>（一）基本类型</h2><h3 id="1、有符号常见类型大小及其范围"><a href="#1、有符号常见类型大小及其范围" class="headerlink" title="1、有符号常见类型大小及其范围"></a>1、有符号常见类型大小及其范围</h3><p>1byte(字节)&#x3D;8bit(位)；每个bit就是一个0或者1，byte是c语言里面数据的最小单位</p><p>常用2的次方：<br>27&#x3D;128<br>28&#x3D;256<br>215&#x3D;32,768<br>216&#x3D;65,536<br>231&#x3D;2,147,483,648‬<br>232&#x3D;4,294,967,296<br>263&#x3D;9,223,372,036,854,775,808‬<br>264&#x3D;18,446,744,073,709,551,616</p><p>类型含义32位编译器中大小(一般)64位编译器中大小(一般)最小值(32位)最大值(32位)<br>bool(stdbool.h)布尔类型1byte1bytefalsetrue<br>char单个字符1byte1byte-2727-1<br>short短整形2byte2byte-215215-1<br>int整形4byte4byte-231231-1<br>long长整形4byte8byte-231231-1<br>long long长整形8byte8byte-263263-1<br>float单精度浮点数4byte4byte-21272128<br>double双精度浮点数8byte8byte-2102321024<br>long double扩展精度浮点数12byte16byte-216383216384<br>char*字符常量或字符串常量4byte8byte无意义无意义 </p><h3 id="2、浮点数范围来由及其有效数字"><a href="#2、浮点数范围来由及其有效数字" class="headerlink" title="2、浮点数范围来由及其有效数字"></a>2、浮点数范围来由及其有效数字</h3><p>这里单独讨论一下浮点数的取值范围，浮点数都遵循IEEE754标准，所以：<br>4<em>8&#x3D;32位的float的第1位是符号位，第2<del>9位有8位是指数位，第10</del>32位有23位是尾数位<br> <br>那么可以很容易看到float的范围是[-1</em>2127≈1.7<em>1038, 1</em>2128≈3.4*1038]</p><p>因为转换成IEEE754都要进行标准化，也就是将原来的整数点整数的形式转化成二进制点二进制的形式，然后将点的位置移动到左边第一个1(2)之后，产生指数位。规定点之后的数填在尾数位上，所以31位前暗含了1(2)，所以上面的范围会先乘个1。<br>32位的指数位 &#x3D; 移位数（左移一位+1，右移一位-1）+ 127得出。所以负数只有127（127-127&#x3D;0），而正数有128（127+128&#x3D;255）</p><p>8<em>8&#x3D;64位的double的第1位是符号位，第2<del>12位有11位是指数位，第13</del>64位有52位是尾数位<br>那么可以很容易看到float的范围是[-1</em>21023≈8.988<em>10307, 1</em>21024≈1.797693<em>10308]<br> <br>12</em>8&#x3D;96或16<em>8&#x3D;128位的long double的第1位是符号位，第2<del>16位有15位是指数位，在32位系统中第17</del>96位有80位是尾数位，在64位系统中第17~128位有112位是尾数位，那么范围是[-1</em>216383≈5.9<em>104931, 1</em>216384≈1.1897*104932]（与尾数大小无关）。<br> <br>其实float的范围就已经非常非常大了，那为什么还会有double甚至long double呢，这是因为浮点数能准确记录量级，但是无法准确记录太长的数字，数字的有效位数值取决于尾数位的长度，我们可以总结成下表：</p><p>类型有效位数计算有效位数<br>float223+1&#x3D;16,777,2168-1&#x3D;7<br>double252+1&#x3D;9,007,199,254,740,992‬16-1&#x3D;15<br>long double280+1&#x3D;2.4<em>10 24 &#x2F; 2112+1&#x3D;1.038</em>103425-1&#x3D;24 &#x2F; 35-1&#x3D;34 </p><h3 id="3、字面值常量"><a href="#3、字面值常量" class="headerlink" title="3、字面值常量"></a>3、字面值常量</h3><p>（1）十进制字面值<br>对于一个20(10)&#x3D;24(8)&#x3D;14(16)，在c语言中对应表达为20(10进制)、024(8进制)、0x14(16进制)。<br>默认情况下，十进制字面值的类型是int，如果int装不下就是long，再装不下就是long long。</p><p>（2）浮点数字面值<br>对于一个浮点数可以表示为314.159(10)也可以表示为3.14159e+2(科学记数法)。<br>默认情况下，浮点数字面值是一个double</p><p>（3）指定字面值类型<br>整形字面值<br>后缀最小匹配类型例子<br>u &#x2F; Uunsigned20u &#x2F; 20U<br>l &#x2F; Llong20l &#x2F; 20L<br>ll &#x2F; LLlong long20ll &#x2F; 20LL<br>浮点形字面值<br>f &#x2F; Ffloat20.0f &#x2F; 20.0F<br>l &#x2F; Llong double20.0l &#x2F; 20.0L </p><h3 id="4、字符和字符串常量"><a href="#4、字符和字符串常量" class="headerlink" title="4、字符和字符串常量"></a>4、字符和字符串常量</h3><p>形如’a’、”HelloWorld”都可以看作是常量，特别说明当例如char* s1&#x3D;”HelloWorld”;char* s2&#x3D;”HelloWorld”;时，s1和s2所指的都是内存中代码段的常量，可读不可写且地址相同，类似于const char* s1;</p><p>字符是以单引号’括住的单个字符，只占一个char(一个byte)<br>字符串以双引号”括住一系列字符，最后隐含了’\0’，所以占n+1个char(n为字符串有意义的长度)</p><p>特殊的常量：无穷，每个编译器的表示都不一样，可以使用如下代码输出：</p><p>printf(“%f\n”, 1&#x2F;0.0);  &#x2F;&#x2F; 无穷大。我的电脑上为:1.#INF00<br>printf(“%f\n”, -1&#x2F;0.0);  &#x2F;&#x2F; 无穷小。我的电脑上为:1.#INF00<br>printf(“%f\n”, 0.0&#x2F;0.0);  &#x2F;&#x2F; 空。我的电脑上为:-1.#IND00<br>1<br>2<br>3 </p><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><p>有符号的类型（除浮点数）的范围都是由[-2n-1, 2n-1-1]（n为类型所占bit）<br>无符号的类型（除浮点数）的范围都是由[0, 2n-1]（n为类型所占bit）<br>浮点数的范围与其指数位大小有关，为[-2{[2^(m-1)]-1}, 2[2^(m-1)]]（m为指数位位数）  </p><h2 id="（二）变量"><a href="#（二）变量" class="headerlink" title="（二）变量"></a>（二）变量</h2><h3 id="1、定义变量"><a href="#1、定义变量" class="headerlink" title="1、定义变量"></a>1、定义变量</h3><p>变量由一个类型声明符加一个或多个变量名组成的列表（c99及以后可以在函数内任意位置定义变量），例如：</p><p>int a;  &#x2F;&#x2F; a是int类型的变量<br>double b&#x3D;1.0;  &#x2F;&#x2F;b是double类型的变量，赋1.0为初值<br>char c, d;  &#x2F;&#x2F; c, d是char类型的变量<br>1<br>2<br>3 </p><h3 id="2、常用特殊前缀"><a href="#2、常用特殊前缀" class="headerlink" title="2、常用特殊前缀"></a>2、常用特殊前缀</h3><p>extern int a;  &#x2F;&#x2F; 声明一个int类型的变量a，一般用在.h文件中声明项目全局变量<br>const int b&#x3D;1;  &#x2F;&#x2F; 定义一个不可变的变量b，使用const关键字都要赋初值<br>static int c&#x3D;1;  &#x2F;&#x2F; 在函数中使用，只在第一次使用时初始化，相当于作用域在函数内的全局变量<br>typedef long long int;  &#x2F;&#x2F; 把long long当作int使用<br>1<br>2<br>3<br>4 </p><h3 id="3、数组与初始化变量"><a href="#3、数组与初始化变量" class="headerlink" title="3、数组与初始化变量"></a>3、数组与初始化变量</h3><p>int a&#x3D;1;  &#x2F;&#x2F; 给a初始化为1<br>&#x2F;&#x2F; 以下为C99加入的特性<br>int b[10] &#x3D; {1};  &#x2F;&#x2F; 第一个元素初始化为1，其他9个元素初始化为0<br>int c[10] &#x3D; {0};  &#x2F;&#x2F; 全部初始化为0，常用初始化手段<br>int d[10] &#x3D; {[1]&#x3D;1, 2, [4]&#x3D;4};  &#x2F;&#x2F; 0 1 2 0 4 0 0 0 0 0<br>1<br>2<br>3<br>4<br>5 </p><h3 id="4、变量作用域"><a href="#4、变量作用域" class="headerlink" title="4、变量作用域"></a>4、变量作用域</h3><p>变量有两种类型：局部变量全局变量，变量作用域即变量可使用的范围。<br> <br>对于局部变量可以简单理解为大括号{}内即为一个作用域，变量在哪个大括号内，作用域就在哪。<br> <br>对于全局变量的作用域就是在当前的.c文件中，在.h文件声明后可以在整个项目内使用。<br> <br>对于同名变量，小作用域的变量会在其作用域中覆盖大作用域的变量。 </p><p>（1）局部变量与全局变量的差别<br>差别因素局部变量全局变量<br>初始值初始值取决于内存里的数(随机)一般为0，指针为null<br>作用域仅限于大括号内.c文件甚至项目 </p><h2 id="（三）字符串"><a href="#（三）字符串" class="headerlink" title="（三）字符串"></a>（三）字符串</h2><p>字符串在c语言中有两种形式char<em>和char[]，这里简单分辨下两者之间的不同。<br>char</em> c1&#x3D;”HelloWorld!”中，c1指向代码段中的常量，只读不写，且常量相同，指向的地址也相同。<br>char c2[]&#x3D;”HelloWorld!”中，c2指向堆栈段中的数据，可读可写，相当于把代码端的数据拷贝了出来。 </p><h2 id="（四）-自定类型——结构体"><a href="#（四）-自定类型——结构体" class="headerlink" title="（四） 自定类型——结构体"></a>（四） 自定类型——结构体</h2><p>结构体可以看作是一种个基础类型复合的类型。</p><p>&#x2F;&#x2F; 声明如下：<br>struct DATE{<br>    int year, month, day;<br>};</p><p>&#x2F;&#x2F; 几种定义方式如下：<br>struct DATE date1;  &#x2F;&#x2F; 不赋初值<br>struct DATE date2&#x3D;{2020, 4, 5};  &#x2F;&#x2F; 根据结构体中的顺序赋初值，这里是年月日<br>struct DATE date3 &#x3D; {.year&#x3D;2020, .day&#x3D;5};  &#x2F;&#x2F; 给单独变量赋初值<br>struct DATE *date4 &#x3D; &amp;date3;  &#x2F;&#x2F; 用指针取date3地址（指针后面会单独说）</p><p>&#x2F;&#x2F; 几种赋值方式如下：<br>date3 &#x3D; (struct DATE){.year&#x3D;1999};  &#x2F;&#x2F; 将数据强制转换成struct DATE类型赋值<br>date3 &#x3D; date2;  &#x2F;&#x2F; 自动赋值<br>date3.year&#x3D;2010;  &#x2F;&#x2F; 对变量中单一元素赋值<br>date4-&gt;year&#x3D;2010;  &#x2F;&#x2F; 对指针所指变量中的单一元素赋值</p><p>&#x2F;&#x2F; 常用声明<br>typedef struct DATE2{<br>    int year, month, day;<br>} D;<br>D date5;  &#x2F;&#x2F; 这样就可以不用写struct DATE2这么一长串，取而代之用D来表示</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22 </p><p>扩展：union<br>union作为关键字与struct类似，但是struct中每个成员都是单独的内存，而union只占最大成员变量的大小，通常用与二进制与十进制的转换。</p><p>union DATE{<br>    int year;<br>    int month;<br>    int day;<br>};  &#x2F;* 一个union DATE只有一个int大小 *&#x2F;<br>1<br>2<br>3<br>4<br>5 </p><p>扩展：enum枚举，枚举类似#define，但是有体系些（c语言的枚举不好用）</p><p>&#x2F;&#x2F; 声明枚举, 默认下标RED:0, YELLOW:1, GREEN:2<br>enum COLOR1 {RED1, YELLOW1, GREEN1};<br>&#x2F;&#x2F; 自定下标<br>enum COLOR2 {RED2&#x3D;1, YELLOW2, GREEN2&#x3D;5};<br>1<br>2<br>3<br>4   </p><h1 id="二、表达式"><a href="#二、表达式" class="headerlink" title="二、表达式"></a>二、表达式</h1><p>这里给出运算符优先级</p><p>优先级运算符名称或含义使用形式结合方向说明<br>1[]数组下标数组名[整型表达式]左到右<br>()圆括号（表达式）&#x2F;函数名(形参表)<br>.成员选择（对象）对象.成员名<br>-&gt;成员选择（指针）对象指针-&gt;成员<br>2-负号运算符-算术类型表达式右到左单目运算符<br>(type)强制类型转换(纯量数据类型)纯量表达式<br>++自增运算符++纯量类型可修改左值表达式单目运算符<br>–自减运算符–纯量类型可修改左值表达式单目运算符</p><ul><li>   取值运算符*指针类型表达式单目运算符<br>   &amp;取地址运算符&amp;表达式单目运算符<br>   !逻辑非运算符!纯量类型表达式单目运算符<br>   ~按位取反运算符~整型表达式单目运算符<br>   sizeof长度运算符sizeof 表达式 &#x2F; sizeof(类型)<br>   3&#x2F;除表达式&#x2F;表达式左到右双目运算符</li><li>   乘表达式*表达式双目运算符<br>   %余数（取模）整型表达式%整型表达式双目运算符<br>   4+加表达式+表达式左到右双目运算符</li></ul><ul><li>   减表达式-表达式双目运算符<br>   5&lt;&lt;左移整型表达式&lt;&lt;整型表达式左到右双目运算符</li></ul><blockquote><blockquote><pre><code>右移整型表达式&gt;&gt;整型表达式双目运算符</code></pre><p>6&gt;大于表达式&gt;表达式左到右双目运算符<br>&#x3D;大于等于表达式&gt;&#x3D;表达式双目运算符<br>&lt;小于表达式&lt;表达式双目运算符<br>&lt;&#x3D;小于等于表达式&lt;&#x3D;表达式双目运算符<br>7&#x3D;&#x3D;等于表达式&#x3D;&#x3D;表达式左到右双目运算符<br>!&#x3D;不等于表达式!&#x3D; 表达式双目运算符<br>8&amp;按位与整型表达式&amp;整型表达式左到右双目运算符<br>9^按位异或整型表达式^整型表达式左到右双目运算符<br>10|按位或整型表达式|整型表达式左到右双目运算符<br>11&amp;&amp;逻辑与表达式&amp;&amp;表达式左到右双目运算符<br>12||逻辑或表达式||表达式左到右双目运算符<br>13?:条件运算符表达式1? 表达式2: 表达式3右到左三目运算符<br>14&#x3D;赋值运算符可修改左值表达式&#x3D;表达式右到左<br>&#x2F;&#x3D;除后赋值可修改左值表达式&#x2F;&#x3D;表达式<br>*&#x3D;乘后赋值可修改左值表达式*&#x3D;表达式<br>%&#x3D;取模后赋值可修改左值表达式%&#x3D;表达式<br>+&#x3D;加后赋值可修改左值表达式+&#x3D;表达式<br>-&#x3D;减后赋值可修改左值表达式-&#x3D;表达式<br>&lt;&lt;&#x3D;左移后赋值可修改左值表达式&lt;&lt;&#x3D;表达式<br>&#x3D;右移后赋值可修改左值表达式&gt;&gt;&#x3D;表达式<br>&amp;&#x3D;按位与后赋值可修改左值表达式&amp;&#x3D;表达式<br>^&#x3D;按位异或后赋值可修改左值表达式^&#x3D;表达式<br>|&#x3D;按位或后赋值可修改左值表达式|&#x3D;表达式<br>15,逗号运算符表达式,表达式,…左到右从左向右顺序结合<br>总结优先度： 特殊运算符(括号、地址类) &gt; 单目运算符 &gt; 算数运算符(乘除&gt;加减) &gt; (移位运算) &gt; 判断运算符(比较&gt;相等) &gt; (位运算) &gt; 逻辑运算符(&amp;&amp;&gt;||) &gt; 三目运算符 &gt; 赋值运算符 &gt; 逗号运算符<br>针对十进制字面值<br>&lt;&lt;：左移数据，相当于乘2(右边填0)<br>：右移数据，相当于除2（unsigned左填0，signed左边填原来的最高位（因为负数移位还要是负数））</p></blockquote></blockquote><p>  </p><h1 id="三、语句"><a href="#三、语句" class="headerlink" title="三、语句"></a>三、语句</h1><p>简单语句：;，只有一个分号的空语句。<br>复合语句：由{}大括号嵌套起来的语句，空块(括号里什么都没用)等于空语句。</p><h2 id="（一）条件语句"><a href="#（一）条件语句" class="headerlink" title="（一）条件语句"></a>（一）条件语句</h2><h3 id="1、if语句"><a href="#1、if语句" class="headerlink" title="1、if语句"></a>1、if语句</h3><p>if语句一般格式：if…else if…else（翻译为如果…否则如果…否则）</p><p>if (age&gt;18) {  &#x2F;&#x2F; 如果年龄大于18岁<br>} else if(age&lt;18) {  &#x2F;&#x2F; 如果年龄小于18岁<br>} else {  &#x2F;&#x2F; 上面的都不满足<br>}<br>1<br>2<br>3<br>4<br>可用搭配：<br>if…<br>if…else if…<br>if…eles…<br>if…else if…else if…else…</p><p>tips:<br>（1）if依据后面的条件语句的结果进行判断，非0为真，0为假<br>（2）else不需要接条件<br>（3）if语句后面不要接;</p><p> </p><h3 id="2、switch语句"><a href="#2、switch语句" class="headerlink" title="2、switch语句"></a>2、switch语句</h3><p>switch语句一般格式：</p><p>switch(ch){  &#x2F;&#x2F; switch是传入整数并判断整数进行判断<br>    case ‘a’:<br>        …<br>        break;<br>    case ‘b’:<br>        …<br>        break;<br>    default:<br>        …<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>tips:<br>（1）case只是入口，所以每个case都要用break;跳出<br>（2）default类型if语句中的else，即上面的case都不满足时进入<br>（3）switch只能传入整数进行判断，上面的例子就是将char类型的ch转换成了ASCII码进行比较<br>（4）switch后面不要接;</p><p> </p><h2 id="（二）迭代语句"><a href="#（二）迭代语句" class="headerlink" title="（二）迭代语句"></a>（二）迭代语句</h2><h3 id="1、while语句"><a href="#1、while语句" class="headerlink" title="1、while语句"></a>1、while语句</h3><p>while语句的一般格式：</p><p>while(条件){<br>    语句<br>}<br>1<br>2<br>3<br>tips:<br>（1）while适用于不知道次数的循环<br>（2）while后面不要接;</p><p> </p><h3 id="2、do-while语句"><a href="#2、do-while语句" class="headerlink" title="2、do while语句"></a>2、do while语句</h3><p>do while语句的一般格式：</p><p>do{<br>    语句<br>}while(条件);<br>1<br>2<br>3<br>tips:<br>（1）do while适用于不知道次数且要先做一遍的循环<br>（2）do while后面要接;<br>（3）do while后面要接;<br>（4）do while后面要接;</p><p> </p><h3 id="3、for语句"><a href="#3、for语句" class="headerlink" title="3、for语句"></a>3、for语句</h3><p>for语句的一般格式：</p><p>for (初始化变量; 条件; 变量操作) {<br>    语句<br>}</p><p>int n&#x3D;10;  &#x2F;&#x2F; 定义循环次数<br>&#x2F;&#x2F; 例子1，循环n次<br>for (int i&#x3D;0; i&lt;n; i++) {<br>    ;<br>}<br>等价于<br>int i&#x3D;0;<br>while(i&lt;n){<br>    ;  &#x2F;&#x2F; 语句<br>    i++;<br>}</p><p>&#x2F;&#x2F; 例子2，多参数<br>for (int i&#x3D;0, j&#x3D;10; i&lt;n; i++, j–) {<br>    ;<br>}<br>等价于<br>int i&#x3D;0, j&#x3D;10;<br>while(i&lt;n){<br>    ;  &#x2F;&#x2F; 语句<br>    i++;<br>    j–;<br>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>tips:<br>（1）for适用于知道次数的循环<br>（2）for后面不要接;<br>（3）for可以压缩行数，简化部分使用while的情况</p><p> </p><h2 id="（三）跳转语句"><a href="#（三）跳转语句" class="headerlink" title="（三）跳转语句"></a>（三）跳转语句</h2><p>break;直接跳出当前条件语句或迭代语句，能且只能 跳出 当前 的 一个 语句。<br> <br>continue;在 条件语句 中表示什么都不做（替代空语句）；在 迭代语句 中表示 直接进入下一轮循环，不执行完当前循环 。<br> <br>goto;跳转到指定位置（该位置必须有声明），例子：</p><p>start:  &#x2F;&#x2F; goto声明<br>    …  &#x2F;&#x2F; 语句<br>    …  &#x2F;&#x2F; 语句<br>    …  &#x2F;&#x2F; 语句<br>    goto start;  &#x2F;&#x2F;跳转到start声明位置<br>1<br>2<br>3<br>4<br>5<br>！！！注意，goto仅推荐用于跳出多重循环，例如：</p><p>for (int i&#x3D;0; i&lt;n; i++) {<br>    for (int j&#x3D;0; j&lt;m; j++) {<br>        for (int k&#x3D;0; k&lt;o; k++) {<br>            if (跳出条件) {<br>                goto end;<br>            }<br>        }<br>    }<br>}<br>end:<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10   </p><h1 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h1><h2 id="（一）函数一般格式"><a href="#（一）函数一般格式" class="headerlink" title="（一）函数一般格式"></a>（一）函数一般格式</h2><p>返回值类型 函数名(形参列表) {<br>    …语句…<br>    return 返回值;<br>}<br>&#x2F;&#x2F; 例子，main函数<br>int main(){<br>    return 0;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>tips:<br>（1）特殊的返回值类型void(什么都不返回)，此时return 返回值;写为return;。<br>（2）形参列表为空时，表明不需要传入函数。</p><p> </p><h2 id="（二）函数声明"><a href="#（二）函数声明" class="headerlink" title="（二）函数声明"></a>（二）函数声明</h2><p>函数声明一般写在程序开头。尽管部分c语言编译器没有要求在调用函数时，就要知道函数格式。但是让编译器提前知道格式，就可以在编译时进行检查，防止我们错误使用了函数。</p><p>有一函数定义如下：</p><p>int f(int a){<br>    return a;<br>}<br>1<br>2<br>3<br>那么函数的声明可以写成：</p><p>int f(int a);<br>或者<br>int f(int);<br>1<br>2<br>3<br>特殊的对于返回值和参数都是void的函数，声明可以写成：</p><p>void f(void);<br>1 </p><h2 id="（三）结构体中的函数"><a href="#（三）结构体中的函数" class="headerlink" title="（三）结构体中的函数"></a>（三）结构体中的函数</h2><p>如果能在结构体中写函数，那么结构体就更接近一个类了，例子如下：</p><p>struct SHOWDATE{<br>    void (*show)(int year, int month, int day);<br>};</p><p>static void show(int year, int month, int day){<br>    printf(“%d-%d-%d”, year, month, day);<br>}</p><p>static SHOWDATE showDate&#x3D;{.show&#x3D;show};</p><p>int main(){<br>    showDate.show(2020, 1, 1);<br>    return 0;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14   </p><h1 id="五、指针"><a href="#五、指针" class="headerlink" title="五、指针"></a>五、指针</h1><h2 id="（一）定义"><a href="#（一）定义" class="headerlink" title="（一）定义"></a>（一）定义</h2><p>int a&#x3D;10;<br>int <em>p&#x3D;&amp;a;  &#x2F;&#x2F; （1）（2）<br><em>p &#x3D; 12;  &#x2F;&#x2F; （3）<br>int * const p1;  &#x2F;&#x2F; （4）<br>const int * p2;  &#x2F;&#x2F; （5）<br>int const * p3;<br>1<br>2<br>3<br>4<br>5<br>6<br>（1）</em>代表这是一个指针类型。具体到例子中就一个int</em>类型，代表p存放一个指向int类型的地址</p><p>（2）&amp;代表取地址。在例子中就是取int类型变量的地址，即变量a的地址</p><p>（3）*p代表一个变量，这个变量就是p所指地址里面的变量</p><p>（4）int * const p1;不能修改p里的地址</p><p>（5）const int * p2;和int const * p3;不能修改p里地址对应的值 </p><h2 id="（二）结构体与指针"><a href="#（二）结构体与指针" class="headerlink" title="（二）结构体与指针"></a>（二）结构体与指针</h2><p>typedef strcut stDATE{<br>    int year, month, day;<br>} DATE;</p><p>int main(){<br>    DATE date1&#x3D;{2020, 1, 1};<br>    DATE* date2&#x3D;&amp;date1;<br>    date1.year&#x3D;2019;<br>    date2-&gt;month&#x3D;2;<br>    printf(“%d-%d-%d”, date1.year, date1.month, date1.day);</p><pre><code>return 0;</code></pre><p>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>（1）结构体变量访问结构体成员使用.，结构体指针变量访问结构体成员使用-&gt;。 </p><h2 id="（三）数组与指针"><a href="#（三）数组与指针" class="headerlink" title="（三）数组与指针"></a>（三）数组与指针</h2><p>int a[10] &#x3D; {0}  &#x2F;&#x2F; （1）、（2）</p><p>int *p &#x3D; a;  &#x2F;&#x2F; （3）</p><p>void <em>q &#x3D; (void</em>)p;  &#x2F;&#x2F; （4）</p><p>int <em>new &#x3D; (int</em>)malloc(10<em>sizeof(int));  &#x2F;&#x2F; （5）<br>free(new);<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>（1）int a[10]里面的a实际上是数组第一个变量的地址，所以可以int <em>p &#x3D; a;。<br>（2）</em>(p+n)与a[n]等价。<br>（3）int</em>指针变量加上一个数n，代表指针变量的数值加上n<em>32(int的bit)得到偏移。<br>（4）q表示未定的类型（类似char</em>但不一样）。<br>（5）使用int*指针变量来创建数组，使用完要free（程序关闭会自动释放，如果程序长时间使用则会造成内存泄露）。</p><p>其他：<br>char c[][]错误;<br>char c[][10]正确且限制大小;<br>char <em>c[]正确,c[n]是一个char</em>的字符或字符串<br>char **c正确,一个指向指针的指针</p><p>  </p><h1 id="六、文件读取"><a href="#六、文件读取" class="headerlink" title="六、文件读取"></a>六、文件读取</h1><h2 id="（一）文本文件"><a href="#（一）文本文件" class="headerlink" title="（一）文本文件"></a>（一）文本文件</h2><p>函数定义：</p><p>FILE* fopen(const char* restrict path, const char* restrict mode);  &#x2F;&#x2F; 打开文件。参数：路径，模式<br>int fclose(FILE* stream);  &#x2F;&#x2F; 关闭文件<br>fscanf(FILE*, …);  &#x2F;&#x2F; 文件读取（类似scanf，只是加了第一个参数，具体在八）<br>fprintf(FILE*, …);  &#x2F;&#x2F; 文件输出（类似printf，只是加了第一个参数，具体在八）<br>1<br>2<br>3<br>4<br>fopen的mode选项：<br>r：只读<br>r+：读写，从文件头开始<br>w：只写，清空或新建<br>w+：读写，清空或新建<br>a：追加，追加或新建<br>…x：只新建，若存在则不能打开(wx、ax等)</p><p>例子：</p><p>FILE* p&#x3D;fopen(“file”, “r”);<br>if(fp) {<br>    …<br>    fclose(fp);<br>}<br>1<br>2<br>3<br>4<br>5 </p><h2 id="（二）二进制文件"><a href="#（二）二进制文件" class="headerlink" title="（二）二进制文件"></a>（二）二进制文件</h2><p>函数定义（打开文件和关闭文件与文本文件一致）：</p><p>&#x2F;&#x2F; ptr:读入字符串存放的变量、size<em>nmemb:读多少字符、stream:文件句柄<br>size_t fread(void</em> ptr, size_t size, size_t nmemb, FILE* stream);<br>size_t fwrite(const void* ptr, size_t size, size_t nmemb, FILE* stream);<br>1<br>2<br>3<br>二进制文件读写主要是读写结构体，现在不常用，因为可移植性不好，不如读写文件</p><p>  </p><h1 id="七、编译预处理指令与-h文件"><a href="#七、编译预处理指令与-h文件" class="headerlink" title="七、编译预处理指令与.h文件"></a>七、编译预处理指令与.h文件</h1><h2 id="（一）编译预处理指令"><a href="#（一）编译预处理指令" class="headerlink" title="（一）编译预处理指令"></a>（一）编译预处理指令</h2><p>在c语言中，所有#开头的语句都是编译预处理指令。<br>c语言编译经过<br>.c——处理编译预处理指令——》<br>.i——c编译器编译成汇编文件——》<br>.s——生成目标代码文件——》<br>.o——生成可执行文件——》<br>#.out &#x2F; .exe<br>四步得到可执行文件，第一步就是处理编译预处理指令。</p><h3 id="1、-include-lt-stdio-h-gt"><a href="#1、-include-lt-stdio-h-gt" class="headerlink" title="1、# include &lt; stdio.h &gt;"></a>1、# include &lt; stdio.h &gt;</h3><p>include &lt;stdio.h&gt;就是将stdio.h文件里面的内容复制到代码里面去</p><h3 id="2、-define-名称-操作（宏定义）"><a href="#2、-define-名称-操作（宏定义）" class="headerlink" title="2、#define 名称 操作（宏定义）"></a>2、#define 名称 操作（宏定义）</h3><p>define被称为宏定义，格式为# define 名称 操作</p><p>例子：</p><p>#define PI 3.14159<br>#define cube(x) (x<em>x</em>x)</p><p>int main(){<br>    cube(3);<br>    return 0;<br>}<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>‘<br>运行运行<br>可以用宏定义定义一个变量PI或一个方法cube。</p><p>宏定义定义方法看起来很方便，但十分不推荐初学者使用，因为宏定义的方法是没有类型的，而且运算顺序也不好理解（看上面 二、表达式 15个运算等级的表，就知道多复杂了）。</p><p>如果确实想用类似宏定义的方式来定义函数，可以使用下面的方法。 </p><h3 id="3、（补充）inline内联函数"><a href="#3、（补充）inline内联函数" class="headerlink" title="3、（补充）inline内联函数"></a>3、（补充）inline内联函数</h3><p>inline char *dbtest(int a)<br>{<br>    return (a % 2 &gt; 0 ? “奇” : “偶”);<br>}<br>1<br>2<br>3<br>4 </p><h2 id="（二）-h文件"><a href="#（二）-h文件" class="headerlink" title="（二）.h文件"></a>（二）.h文件</h2><p>.h文件主要用来声明对应.c文件里面的变量或函数，把.c文件里面的声明放到.h文件就可以了（全局变量需要加上extern前缀）。</p><p>导入标准库时推荐使用&lt;&gt;，如# include &lt;stdio.h&gt;<br>导入自定声明时推荐使用””，如# include “train.h”</p><p> </p><h2 id="（三）一些常用宏"><a href="#（三）一些常用宏" class="headerlink" title="（三）一些常用宏"></a>（三）一些常用宏</h2><p>printf(“%d”, <strong>LINE</strong>);  &#x2F;&#x2F; 输出当前语句行号<br>printf(“%s”, <strong>FILE</strong>);  &#x2F;&#x2F; 输出当前文件名<br>printf(“%s”, <strong>DATE</strong>);  &#x2F;&#x2F; 输出编译日期<br>printf(“%s”, <strong>TIME</strong>);  &#x2F;&#x2F; 输出编译时间<br>printf(“%d”, <strong>STDC</strong>);  &#x2F;&#x2F; 当要求程序严格遵循ANSIC标准时该标识符被赋值为1<br>printf(“%s”, <strong>FUNC</strong>);  &#x2F;&#x2F; 输出当前函数名<br>1<br>2<br>3<br>4<br>5<br>6   </p><h1 id="八、常用函数"><a href="#八、常用函数" class="headerlink" title="八、常用函数"></a>八、常用函数</h1><h2 id="（一）常用函数"><a href="#（一）常用函数" class="headerlink" title="（一）常用函数"></a>（一）常用函数</h2><p>size_t &#x3D; unsigned int</p><p>库名函数定义解释<br>默认size_t sizeof(type_name)返回byte<br>string.hsize_t strlen(const char *s)返回s的字符串长度（不包括最后的\0）<br>string.hint strcmp(const char *s1, const char *s2)比较两个字符串，返回0:相等; 1:s1&gt;s2; -1:s1&lt;s2<br>string.hint strncmp(const char *s1, const char <em>s2, size_t n)安全版本比较前n个字符的大小，其他同上<br>string.hchar</em> strcpy(char *restrict dst, const char <em>restrict src)把src的字符串拷贝到dst，restrict表示不重叠<br>string.hchar</em> strncpy(char *restrict dst, const char <em>restrict src, size_t n)安全版本，拷贝n个字符，其他同上<br>string.hchar</em> strcat(char *restrict s1, const char <em>restrict s2)把s2拷贝到s1后面，s1要足够大<br>string.hchar</em> strncat(char *restrict s1, const char <em>restrict s2, size_t n)安全版本，追加n个字符，其他同上<br>string.hchar</em> strchr(const char <em>s, int c)在s串中找到c第一次出现的位置，返回指针，没有为null<br>string.hchar</em> strrchr(const char <em>s, int c)在s串中从右边找到c第一次出现的位置，返回指针，没有为nulltring.h<br>string.hchar</em> strstr(const char *s1, const char <em>s2)在字符串s1中不忽略大小写寻找字符串s2<br>string.hchar</em> strcasestr(const char *s1, const char *s2)在字符串s1中忽略大小写寻找字符串s2<br>string.hvoid *memset(void *s, int c, unsigned long n)将指针变量s所指向的前n字节的内存单元用一个“整数”c替换<br>string.hvoid *memcpy(void *dest, const void *src, size_t n)从src的开始位置拷贝n个字节的数据到dest。如果dest存在数据，将会被覆盖。<br>stdlib.hsystem(“pause”)暂停程序，按任意键继续 </p><h2 id="（二）scanf和printf"><a href="#（二）scanf和printf" class="headerlink" title="（二）scanf和printf"></a>（二）scanf和printf</h2><p>scanf（stdio.h）函数声明：int scanf(const char *format, …)<br>format格式：%[flag]type</p><p>printf（stdio.h）函数声明：int printf(const char *format, …)<br>format格式：%[flags][width][.prec][hlL]type</p><p>flag含义</p><ul><li>   跟width一起用，左对齐(%-9d)</li></ul><ul><li>   正数强制输出正号(%+9d) 可以%±9d&#x2F;%-+9d<br>   空正常输出<br>   0数字前填充0(%09d) 不可以%-09d(因为负号已经是左对齐了)</li></ul><p>width &#x2F; prec含义<br>number最小字符数<br>.number小数点后位数。%9.2f:一共9位，小数点后2位(正数部分7位)</p><ul><li>   将number放到后面作为参数使用(%<em>d, number, int)<br>   .</em>将.number放到后面作为参数使用(%.*d, .number, int)</li></ul><p>hlL含义<br>hh单个字节(char 1byte)<br>hshort(2byte)<br>llong(4byte)<br>lllong long(8byte)<br>Llong double(16byte) </p><p>type用于含义<br>i &#x2F; dint接受整数值并将它表示为有符号的十进制整数，i是老式写法<br>uunsigned int无符号10进制整数<br>ounsigned int无符号8进制整数(不输出前缀0）<br>x &#x2F; Xunsigned int无符号16进制整数，x对应的是abcdef，X对应的是ABCDEF（不输出前缀0x)<br>f &#x2F; F &#x2F; lfdouble单精度浮点数和双精度浮点数用f(lf 在C99开始加入标准，意思和 f 相同)<br>e &#x2F; Edouble科学计数法表示的数，此处”e”的大小写代表在输出时用的“e”的大小写<br>g &#x2F; Gdouble有效位数，如：%.8g表示单精度浮点数保留8位有效数字。<br>cchar字符型。可以把输入的数字按照ASCII码相应转换为对应的字符<br>s &#x2F;char * &#x2F; wchar_t *字符串。输出字符串中的字符直至字符串中的空字符（字符串以’\0‘结尾，这个’\0’即空字符<br>p指针(void *)以16进制形式输出指针<br>n读入&#x2F;写出的个数(int *)到此字符之前为止，一共输出的字符个数，不输出文本<br>%无不进行转换，输出字符‘%’（百分号）本身<br>m无打印errno值对应的出错内容,(例: printf(“%m\n”); )</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词汇</title>
      <link href="/2023/05/18/6/"/>
      <url>/2023/05/18/6/</url>
      
        <content type="html"><![CDATA[<h2 id="英语单词"><a href="#英语单词" class="headerlink" title="英语单词"></a>英语单词</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">accuse 指责,归咎于,控告</span><br><span class="line">ache 疼痛,渴望</span><br><span class="line">acid 酸的,酸的东西</span><br><span class="line">abolish 废除,取消</span><br><span class="line">abrupt 突然的,唐突的</span><br><span class="line">absolution 绝对的,完全的,独立的</span><br><span class="line">accent 强调,口头,重读</span><br><span class="line">accord 一致的,调解,给予</span><br><span class="line">acquaint 使认识</span><br><span class="line">acute 尖的,敏锐的</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分享随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/02/19/9/"/>
      <url>/2023/02/19/9/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Linux入门"><a href="#1-Linux入门" class="headerlink" title="1 Linux入门"></a>1 Linux入门</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p> Linux内核最初只是芬兰人Linux Torvalds在赫尔辛基大学上学时处于个人爱好而编写的。</p><p> Linux是一套免费使用和自 由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承 了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p> 目前市面上较指明的发行版有：Ubunta、RedHat、CentOS，Debain、Fedora、SuSE、OpenSUSE。</p><h2 id="1-2-Linux和Windows区别"><a href="#1-2-Linux和Windows区别" class="headerlink" title="1.2 Linux和Windows区别"></a>1.2 Linux和Windows区别</h2><h2 id="1-3-CentOs下载地址"><a href="#1-3-CentOs下载地址" class="headerlink" title="1.3 CentOs下载地址"></a>1.3 CentOs下载地址</h2><p>网易镜像：<a href="https://mirrors.163.com/centos/7/isos/">https://mirrors.163.com/centos/7/isos/</a></p><p>搜狐镜像：<a href="https://mirrors.sohu.com/centos/7/isos/">https://mirrors.sohu.com/centos/7/isos/</a></p><h1 id="2-VM与Linux的安装"><a href="#2-VM与Linux的安装" class="headerlink" title="2 VM与Linux的安装"></a>2 VM与Linux的安装</h1><p>具体安装步骤参考其他文章</p><h1 id="3-Linux文件与目录"><a href="#3-Linux文件与目录" class="headerlink" title="3 Linux文件与目录"></a>3 Linux文件与目录</h1><h2 id="3-1-Linux文件"><a href="#3-1-Linux文件" class="headerlink" title="3.1 Linux文件"></a>3.1 Linux文件</h2><p>Linux系统中一切皆文件</p><h2 id="3-2-Linux目录结构"><a href="#3-2-Linux目录结构" class="headerlink" title="3.2 Linux目录结构"></a>3.2 Linux目录结构</h2><p>目录含义<br>&#x2F;binBinary的缩写，用来存二进制可执行文件，并且比较特殊的是&#x2F;bin存放的是所有一般用户都能使用的可执行文件，如：cat、chmod、mv、mkdir、cd等常用指令<br>&#x2F;sbinSuper User的意思，存放一些只有root用户才有权限执行的可执行文件，如init,ip,mount等命令<br>&#x2F;boot主要存放开机时用到的引导文件，如linux内核文件和开机菜单与开机所有需要的配置文件<br>&#x2F;devdevice,任何设备都以文件的形式存放再这个目录中。例如硬盘、键盘、鼠标、光驱等各种设备文件。只要通过访问该目录的某个文件就相当于访问了对应的设备<br>&#x2F;etc配置文件、启动脚本等（etc)包含所有程序所需的配置文件以及系统的配置文件，如用户的账号密码文件，各个服务的起始文件等。也包含了用于启动&#x2F;停止单个程序的启动和关闭shell脚本。一般来说，该目录下的文件属性是可以让用户查阅，但只有root管理员有权利修改<br>&#x2F;home系统默认的用户的家目录，每当新建一个用户系统都会在这个目录下创建以该用户名为名称的目录作为该用户的家目录。<br>&#x2F;liblibrary,存放着系统开机时所需的函数库以及&#x2F;bin和&#x2F;sbin目录下的命令会调用的函数库<br>&#x2F;lib64存放相对于&#x2F;lib中支持64位格式的函数库<br>&#x2F;media存放可移除的媒体设备、如光盘，DVD等<br>&#x2F;mntmount，临时挂载的设备文件，临时安装目录，系统管理员可以挂载文件系统。时系统管理员临时安装文件的系统安装点。<br>&#x2F;optoptional，可选的软件包，即第三方文件软件。我们可以将除了系统自带软件之外的其他软件安装到这个目录。<br>&#x2F;proc特殊的动态目录，用以 维护系统的信息和状态，包括当前运行中进程（processes)信息。包含系统进程的相关信息，是一个虚拟的文件系统，包含有关正在运行的进程的信息，系统资源以文本信息形式存在。<br>&#x2F;root系统管理员root的主目录<br>&#x2F;run最近一次开机后所产生的各项信息，如当前的用户和正在运行中的守护进程等。<br>&#x2F;srvservice,存放一些服务启动后所需的数据<br>&#x2F;syssystem,与&#x2F;proc类似也是虚拟文件系统，存放系统核心与硬件相关信息管理设备文件。不占用硬件容量。<br>&#x2F;tmptemporary, 存放系统运行过程中使用的一些临时文件，可以被所有就用户访问，系统重启时会清空该目录。<br>&#x2F;usr包含绝大部分所有用户（users)都能访问的应用程序和文件包含二进制文件，库文件。文档和二级程序的源代码。<br>&#x2F;var经常变化的（variable)文件，诸如日志或数据库等代表变量文件。在这个目录下可以找到内容可能增长的文件</p><h1 id="4-VI-x2F-VIM-编辑器"><a href="#4-VI-x2F-VIM-编辑器" class="headerlink" title="4.VI&#x2F;VIM 编辑器"></a>4.VI&#x2F;VIM 编辑器</h1><h2 id="4-1-VIM是什么"><a href="#4-1-VIM是什么" class="headerlink" title="4.1 VIM是什么"></a>4.1 VIM是什么</h2><p> VI是Unix操作系统和类Unix操作系统中最通用的文本编辑器。</p><p> VIM编辑器是从V1从发展出来的一个性能更强大的文本编辑器。可以主动的以文字颜色辨别语法的正确性，方便程序设计。VIM与VI编辑器完全兼容。</p><h2 id="4-2-模式转换"><a href="#4-2-模式转换" class="headerlink" title="4.2 模式转换"></a>4.2 模式转换</h2><p>vim的界面分为一般模式（快速编辑、光标跳转）、插入模式（编辑文本）、指令模式（搜索、替换）</p><h2 id="4-3-一般模式"><a href="#4-3-一般模式" class="headerlink" title="4.3 一般模式"></a>4.3 一般模式</h2><p>语法功能描述<br>yy复制光标当前一行<br>y数字y复制一段（从第几行到第几行）<br>y (shift + 4)复制当前光标到结尾的字符串<br>p箭头移动到目的行粘贴<br>u撤销上一步<br>dd删除光标当前行<br>d数字d删除光标（含）后多少行<br>x剪切一个字母，相当于del<br>X剪切一个字母，相当于Backspace<br>w切换到下一个词<br>e快速到下一个词尾<br>d跳转到上一个词<br>yw复制一个词<br>dw删除一个词<br>shift+6移动到行头<br>shift+4移动到行尾<br>gg移动到页头<br>G&#x2F;L移动到页尾<br>数字+shift+g移动到目标行<br>b跳转到上一个词<br>数字b跳转到上n个词<br>显示行号 :set nu</p><p>不显示行号 :set nonu</p><h2 id="4-4-插入模式"><a href="#4-4-插入模式" class="headerlink" title="4.4 插入模式"></a>4.4 插入模式</h2><p> 在一般模式中可以进行删除、复制、粘贴等的动作，但是却无法编辑文件内容的！要 等到你按下『i, I, o, O, a, A』等任何一个字母之后才会进入编辑模式。</p><p> 注意了！通常在Linux中，按下这些按键时，在画面的左下方会出现『INSERT或 REPLACE』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下 『Esc』这个按键即可退出编辑模式。</p><h3 id="1）进入编辑模式"><a href="#1）进入编辑模式" class="headerlink" title="1）进入编辑模式"></a>1）进入编辑模式</h3><p>按钮功能<br>i当前光标前<br>a当前光标后<br>o当前光标行的下一行<br>I光标所在行最前<br>A光标所在行租后<br>O当前光标行的上一行</p><h3 id="2）退出编辑"><a href="#2）退出编辑" class="headerlink" title="2）退出编辑"></a>2）退出编辑</h3><p> 按【ESC】键退出编辑弄湿，之后所在的模式为一般模式</p><h2 id="4-5-指令模式"><a href="#4-5-指令模式" class="headerlink" title="4.5 指令模式"></a>4.5 指令模式</h2><p> 在一般模式当中，输入【:&#x2F;?】3个中的任何一个按钮，就可以将光标移动到最底下的一行</p><p> 在这个模式当中，可以提供【搜索】资料的动作，读取、淳朴、大量取代字符、离开vi、显示行号等动作是在此模式中达成的。</p><p>1）基本语法<br>命令功能<br>:w保存<br>:q退出<br>:wq保存并退出<br>:q!不保存强制退出<br>&#x2F;要查找的词n查找下一个，N往上查找<br>:noh取消高亮显示<br>:set nu显示行号<br>:set nonu关闭显示行号<br>:s &#x2F;old&#x2F;new替换当前行匹配到第一个old为new<br>:s &#x2F;lod&#x2F;new&#x2F;g替换当前行匹配到所有old为new<br>:%s&#x2F;old&#x2F;new替换文档中每一行匹配到的第一个old为new<br>:%s&#x2F;old&#x2F;new&#x2F;g替换文档中的所有的old为new 比较常用</p><h2 id="4-6-模式之间转换"><a href="#4-6-模式之间转换" class="headerlink" title="4.6 模式之间转换"></a>4.6 模式之间转换</h2><h1 id="5-网络配置和系统管理操作"><a href="#5-网络配置和系统管理操作" class="headerlink" title="5. 网络配置和系统管理操作"></a>5. 网络配置和系统管理操作</h1><h2 id="5-1-查看网络IP和网关"><a href="#5-1-查看网络IP和网关" class="headerlink" title="5.1 查看网络IP和网关"></a>5.1 查看网络IP和网关</h2><pre><code>1）查看虚拟网络编辑windows查看ip</code></pre><p>ipconfig<br>1<br>2）虚拟机网卡配置<br>桥接模式<br> 虚拟机直接连接外部物理网络的模式，主机起到了网桥的作用。这个模式下直接访问外部网络，并且对外部网络是可见的。（同一个路由器内都可见，占用局域网的ip）</p><p>NAT模式（Network Address Translation）<br> 虚拟机和主机构建一个专用网络，并通过虚拟网络地址转换（NAT）设备对IP进行转换。虚拟机通过该共享IP可以访问外部网络，但外部网络无法访问虚拟机。</p><p>仅主机模式<br> 虚拟机只与主机共享一个专用网络，与外部网络无法通信。</p><p>3）查看网关<br>ifconfig<br>1</p><h2 id="5-2-配置网络ip"><a href="#5-2-配置网络ip" class="headerlink" title="5.2 配置网络ip"></a>5.2 配置网络ip</h2><p>修改为静态IP</p><p> cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts<br> vim ifcfg-#按tab键补充<br>1<br>2<br>说明：ifcfg-前缀的文件的可能会有好几种情况，例如：ifcfg-eth0、ifcfg-ens33、ifcfg-ens192</p><p>BOOTPROTO&#x3D;”dhcp”<br>修改为<br>BOOTPROTO&#x3D;”static”<br>#IP地址<br>IPADDR&#x3D;192.162.202.100</p><p>网关</p><p>GATEWAY&#x3D;192.168.202.2</p><p>域名解析器</p><p>DBS1&#x3D;192.168.202.2<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>重启网络服务</p><p>server network restart<br>1</p><h2 id="5-3-配置主机名"><a href="#5-3-配置主机名" class="headerlink" title="5.3 配置主机名"></a>5.3 配置主机名</h2><p>5.3.1 修改主机名称</p><p>查看主机名</p><p>hostname</p><p>vim &#x2F;ect&#x2F;hostname<br>修改里面的值</p><p>重启服务器</p><p>查看主机相关信息</p><p>hostnamectl</p><p>修改主机名为lys</p><p>hostnamectl set-hostname lys<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>5.3.2 修改hosts映射文件<br>1）修改linux的主机映射文件（hosts文件）</p><p> 说明：后续在虚拟机多的情况时，配置时通畅会采用主机名的方式配置</p><p>vim &#x2F;etc&#x2F;hosts<br>1<br>windows</p><p>C:\Windows\System32\drivers\etc\hosts<br>1</p><h1 id="6-远程登录"><a href="#6-远程登录" class="headerlink" title="6. 远程登录"></a>6. 远程登录</h1><pre><code>windows 命令行连接</code></pre><p>ssh <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#49;&#49;&#46;&#x32;&#x31;&#x32;&#x2e;&#51;&#51;&#x2e;&#52;&#x34;">&#114;&#111;&#111;&#116;&#64;&#49;&#49;&#46;&#x32;&#x31;&#x32;&#x2e;&#51;&#51;&#x2e;&#52;&#x34;</a> </p><p>或</p><p>ssh <a href="mailto:&#x7a;&#104;&#x61;&#110;&#x67;&#x73;&#97;&#x6e;&#x40;&#x31;&#x31;&#x2e;&#x32;&#x31;&#50;&#x2e;&#x33;&#51;&#46;&#52;&#52;">&#x7a;&#104;&#x61;&#110;&#x67;&#x73;&#97;&#x6e;&#x40;&#x31;&#x31;&#x2e;&#x32;&#x31;&#50;&#x2e;&#x33;&#51;&#46;&#52;&#52;</a> -p Port<br>1<br>2<br>3<br>或者使用Xshell</p><h1 id="7-系统管理"><a href="#7-系统管理" class="headerlink" title="7. 系统管理"></a>7. 系统管理</h1><h2 id="7-1-Linux中的进程和服务"><a href="#7-1-Linux中的进程和服务" class="headerlink" title="7.1 Linux中的进程和服务"></a>7.1 Linux中的进程和服务</h2><pre><code> 计算机中，一个正在执行的程序或命令，被叫做&quot;进程&quot;（process）</code></pre><p> 启动之后一直存在、常驻内存的进程，一般被称做“服务”（service）</p><h2 id="7-2-service-服务管理-（CentOS-6-版本了解）"><a href="#7-2-service-服务管理-（CentOS-6-版本了解）" class="headerlink" title="7.2 service 服务管理 （CentOS 6 版本了解）"></a>7.2 service 服务管理 （CentOS 6 版本了解）</h2><p>ls &#x2F;usr&#x2F;sbin&#x2F; | grep service<br>1<br>1） 基本语法</p><p> service 服务名 start | stop | restart | status</p><p>2）经验技巧</p><p> 查看服务的方法：ls &#x2F;etc&#x2F;init.d&#x2F;</p><p>3）案例实操</p><p>（1）查看网络服务的状态</p><p>service network status<br>1<br>（2）停止网络服务</p><p>service network stop<br>1<br>（3）启动网络服务</p><p>service network start<br>1<br>（4）重启网络服务</p><p>service network restart<br>1</p><h2 id="7-3-chkconfig-设置后台服务的自启配置（CentOS-6版本）"><a href="#7-3-chkconfig-设置后台服务的自启配置（CentOS-6版本）" class="headerlink" title="7.3 chkconfig 设置后台服务的自启配置（CentOS 6版本）"></a>7.3 chkconfig 设置后台服务的自启配置（CentOS 6版本）</h2><p>1） 基本语法</p><p>chkconfig （功能描述：查看所有服务器自启配置） </p><p>chkconfig 服务名 off （功能描述：关掉指定服务的自动启动） </p><p>chkconfig 服务名 on （功能描述：开启指定服务的自动启动） </p><p>chkconfig 服务名 –list （功能描述：查看服务开机启动状态）<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>2）案例实操</p><p>（1）开启&#x2F;关闭 network(网络)服务的自动启动</p><p>chkconfig network on<br>chkconfig network off<br>1<br>2<br>（2）开启&#x2F;关闭 network 服务指定级别的自动启动</p><p>chkconfig –level 指定级别 network on<br>chkconfig –level 指定级别 network off<br>1<br>2</p><h2 id="7-4-systemctl-CentOS-7-版本-重点掌握）"><a href="#7-4-systemctl-CentOS-7-版本-重点掌握）" class="headerlink" title="7.4 systemctl CentOS 7 版本-重点掌握）"></a>7.4 systemctl CentOS 7 版本-重点掌握）</h2><p>1） 基本语法</p><p> systemctl start | stop | restart | status 服务名</p><p>2） 经验技巧</p><p> 查看服务的方法：ls - al &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system</p><p>3）案例实操</p><p>（1）查看防火墙服务的状态</p><p>systemctl status firewalld<br>1<br>（2）停止防火墙服务</p><p>systemctl stop firewalld<br>1<br>（3）启动防火墙服务</p><p>systemctl start firewalld<br>1<br>（4）重启防火墙服务</p><p>systemctl restart firewalld<br>1</p><h2 id="7-5-systemctl设置后台服务的自启配置"><a href="#7-5-systemctl设置后台服务的自启配置" class="headerlink" title="7.5 systemctl设置后台服务的自启配置"></a>7.5 systemctl设置后台服务的自启配置</h2><p>1）基本语法</p><p>systemctl list-unit-files （功能描述：查看服务开机启动状态）</p><p>systemctl disable service_name （功能描述：关掉指定服务的自动启动）</p><p>systemctl enable service_name （功能描述：开启指定服务的自动启动）</p><p>2）案例实操</p><p>（1）开启&#x2F;关闭iptables（防火墙）服务的自动启动</p><p>systemctl enable firewalld.service<br>systemctl disable firewalld.service<br>1<br>2</p><h2 id="7-6-系统运行级别"><a href="#7-6-系统运行级别" class="headerlink" title="7.6 系统运行级别"></a>7.6 系统运行级别</h2><ol><li>linux运行级别</li></ol><p>Linux系统有7种运行级别（runlevel) 常用的级别3和5</p><p>0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>1：单用户工作状态，root权限，用于系统维护，禁止远程登录<br>2：多用户状态（没有NFS），不支持网络<br>3：安全的多用户状态（有NFS），登录后进入控制台命令行模式<br>4：系统未使用，保留<br>5：X11控制台，登陆后进入图形GUI模式<br>6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><ol start="2"><li>CentOS7的运行级别简化为：<br> multi-user.target 等价于原运行级别3（多用户有网，无图形界面）</li></ol><p>graphical.target 等价于原运行级别5（多用户有网，有图形界面）</p><ol start="3"><li>查看当前运行级别：<br> systemctl get-default</li></ol><p>vim &#x2F;etc&#x2F;inittab</p><ol start="4"><li>修改当前运行级别：<br> system set-default TARGET.target (这里的TARGET取 multi-user 或者graphical)</li></ol><p>7.7 关闭防火墙</p><ol><li>临时关闭防火墙</li></ol><p>查看防火墙状态</p><p>systemctl status firewalld<br>systemctl stop firewalld<br>1<br>2<br>3</p><ol start="2"><li>开机启动时关闭防火墙</li></ol><p>查看防火墙开机启动状态</p><p>systemctl enable firewalld.service</p><p>设置开机时关闭防火墙</p><p>systemctl disable firewalld.service<br>1<br>2<br>3<br>4<br>查看服务是否开机自启动</p><p>systemctl list-unit-files<br>1</p><h2 id="7-8-关机重启命令"><a href="#7-8-关机重启命令" class="headerlink" title="7.8 关机重启命令"></a>7.8 关机重启命令</h2><p>一分钟后关机</p><p>shutdown</p><p>三分钟后关机</p><p>shutdown 3</p><p>某个时间关机</p><p>shutdown 15:00</p><p>取消关机</p><p>shutdown -c </p><p>立刻关机</p><p>shutdown now<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>基本语法</p><p>sync 将数据由内存同步到硬盘中<br>halt 停机，关闭系统，但不断电<br>poweroff 关机，断电<br>reboot 重启，等同于 shutdown-r now<br>shutdown 【选项】 时间<br>经验技巧</p><p>Linux系统中为了提高磁盘的读写效率，对磁盘采取了 “预读迟写’’操作方式。当用户 保存文件时，Linux核心并不一定立即将保存数据写入物理磁盘中，而是将数据保存在缓 冲区中，等缓冲区满时再写入磁盘，这种方式可以极大的提高磁盘写入数据的效率。但是， 也带来了安全隐患，如果数据还未写入磁盘时，系统掉电或者其他严重问题出现，则将导 致数据丢失。使用sync指令可以立即将缓冲区的数据写入磁盘。</p><p>案例实操</p><p>将数据由内存同步到硬盘中</p><p>sync<br>1<br>重启<br>reboot<br>1<br>停机（不断电）<br>halt<br>1<br>计算机在1分钟后关机，并且会显示在登录用户的当前屏幕中<br>shutdown -h 1<br>1<br>立马关机<br>shutdown -h now<br>1<br>系统立马重启（等同于reboot）<br>shutdown -r now<br>1</p><h1 id="8-常用基本命令"><a href="#8-常用基本命令" class="headerlink" title="8 常用基本命令"></a>8 常用基本命令</h1><p> Shell可以看做是一个命令解释器，为我们提供了交互式的文本控制台界面，我们可以通过终端控制台来输入命令，由shell进行解释并最终交给内核执行</p><h2 id="8-1-帮助命令"><a href="#8-1-帮助命令" class="headerlink" title="8.1 帮助命令"></a>8.1 帮助命令</h2><p>8.1.1 man 获取帮助信息<br>基本语法</p><p>man [命令或配置文件] 获取帮助信息</p><p>man -f cd<br>cd (1)               - bash built-in commands, see bash(1)<br>cd (n)               - Change working directory<br>[root@lys ~]# man 1 cd # 1为上面的括号显示<br>1<br>2<br>3<br>4<br>显示说明</p><p>信息功能<br>NAME命令的名称和单行描述<br>SYNOPSIS怎样使用命令<br>DESCRIPTION命令功能的深入讨论<br>EXAMPLES怎样使用命令的例子<br>SEE ALSO相关主题（通常是手册页）<br>8.1.2 help 获取shell内置命令的帮助信息<br> 一部门基础功能的系统命令是直接内嵌在shell中，系统加载启动之后会随着shell一起加载，常驻系统内存中。这部门命令被称为“内置（built-in）命令”；相应的其他命令被称为“外部命令”</p><p>判断是否内置命令</p><p>type cd<br>cd is a shell builtin<br>1<br>2<br>基本语法</p><p>help 命令 获得shell内置命令的帮助信息</p><p>案例实操</p><p>查看cd命令的帮助信息 help cd<br>8.1.3 常用快捷键<br>常用快捷键功能<br>ctrl + c停止进程<br>ctrl + l清屏，等同于clear;彻底清屏是： reset<br>tab提示（更重要的是可以防止敲错）<br>上下键查找执行过的命令</p><h2 id="8-2-文件目录类"><a href="#8-2-文件目录类" class="headerlink" title="8.2 文件目录类"></a>8.2 文件目录类</h2><p>8.2.1 pwd显示当前工作目录的绝对路径<br>pwd: print working directory 打印工作目录</p><ol><li>基本语法<br> pwd 显示当前工作目录的绝对路径</li></ol><p>8.2.2 ls 列出目录的内容<br>ls: list 列出目录内容</p><p>1）基本语法</p><p> ls [选项] [文件或目录]</p><p>选项说明<br>选项功能<br>-a全部的文件，连同隐藏文档（开头为.的文件） 一起<br>-l长数据串列出，包含文件的属性与权限等等数据（常用）等价于“ll”<br>-lh文件大小比较好看<br>3）显示说明</p><p> 每行列出的信息依次是：文件类型与权限 链接户 文件属性 文件大小用byte来标识 建立或最近修改的时间 名字</p><p>8.2.3 cd 切换目录<br>cd Change Directory 切换目录</p><p>参数功能<br>cd 绝对路径切换路径<br>cd 相对路径切换路径<br>cd ~ 或 cd回到自己的家目录<br>cd -回到上一次所在目录<br>cd …回到当前沐浴露的上一级目录<br>cd -P跳转到实际物理路径，而非快捷方式路径<br>8.2.4 mkdir创建一个新的目录</p><p>创建目录</p><p>mkdir a </p><p>一次创建多级</p><p>mkdir a a&#x2F;b a&#x2F;b&#x2F;c<br>mkdir -p a&#x2F;b&#x2F;c<br>1<br>2<br>3<br>4<br>5<br>6<br>8.2.5 rmdir删除一个空的目录</p><p>删除目录</p><p>rmdir a</p><p>删除多级目录</p><p>rmdir a&#x2F;b&#x2F;c<br>1<br>2<br>3<br>4<br>5<br>8.2.6 创建空文件<br>1） 基本语法</p><p> touch 文件名称</p><p>8.2.7 cp复制文件或目录<br>cp [选项] source dest</p><p>cp nginx.conf nginx.conf2</p><p>递归复制整个文件夹</p><p>cp -r logs logs2</p><p>不强制覆盖使用  </p><p>\cp</p><p>查看别名</p><p>alias<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>8.2.8 rm 删除文件或目录<br>rm [选项] deleteFile 递归删除目录中所有内从</p><p>选项功能<br>-r递归删除目录中所有内容<br>-f强制执行删除操作，而不提示用于进行确认<br>-v显示指令的详细执行过程<br>#删除文件<br>rm test.txt</p><p>递归删除</p><p>rm -r dir</p><p>强制删除</p><p>rm -f dir<br>1<br>2<br>3<br>4<br>5<br>6<br>8.2.9 mv 移动文件或目录或重命名<br>mv oldNameFile newNameFile 重命名</p><p>mv &#x2F;tmp&#x2F;moveFile &#x2F;targerFolder 移动文件</p><p>8.2.10 cat 查看文件内容<br>cat [选项] 要查看的文件</p><p>cat -n 文件名 显示所有行的行号，包括空行</p><p>8.2.11 more 文件内容分屏查看器<br> more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容，more指令中内置若干快捷键</p><p>操作功能说<br>空白键（space）代表向下翻一页<br>Enter代表向下翻一行<br>q立刻离开 more<br>ctrl + F向下滚动一屏<br>ctrl + B返回上一屏<br>&#x3D;输出当前行的行号<br>:f输出文件名和当前行行号<br>8.2.12 less 分屏显示文件内容 （查看大文件）<br> less指令永爱分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><p>less 文件名<br>1<br>操作功能说明<br>空白键向下翻动一页<br>pagedown向下翻动一页<br>pageup向上翻动一页<br>&#x2F;字符串向下搜寻【字符串】的功能：n:向下查找 N：向上查找<br>？字符串向上搜寻【字符串】的功能：n 向上查找 N 向下查找<br>q离开less这个程序<br>8.2.13 echo<br> echo 输出内容到控制台</p><p> echo 【选项】【输出内容】</p><p> -e: 支持反斜线控制的字符转换</p><p>控制字符作业<br>\输出\本身<br>\n换行符<br>\t制表符，也就是Tab键<br>查看系统环境变量</p><p>echo $ + Tab键<br>1<br>8.2.14 head 显示文件头部内容<br>head用于显示文件的开头部门内容，默认情况下 head指令显示文件的前10行内容。</p><p>1）基本语法</p><p> head 文件名 查看文件头10行内容</p><p> head -n 5 文件 查看文件头5行内容</p><p>8.2.15 tail 输出文件尾部<br>tail -n 5 文件名</p><p>tail -f 文件</p><p>按Ctrl + S 可以暂停监听</p><p>按Ctrl + Q 可以继续监听</p><p>查看文件索引</p><p>ls -i web.log</p><p>8.2.16 输出重定向和 &gt;&gt; 追加<br>ls -l &gt; a.txt （功能描述：列表的内容写入文件 a.txt 中（覆盖写））<br>ls -al &gt;&gt; aa.txt （功能描述：列表的内容追加到文件 aa.txt 的末尾）<br>cat 文件 1 &gt; 文件 2 （功能描述：将文件 1 的内容覆盖到文件 2）<br>echo “内容” &gt;&gt; 文件<br>8.2.17 ln 软连接<br> 软连接（link）也称为符号链接，类似于windows里的快捷方式，有自己的数据块，主要存放了连接其他文件的路径</p><p>创建软连接</p><p>[root@lys logs]# ln -s web.log web<br>[root@lys logs]# ll<br>total 7988<br>-rw-r–r– 1 root root  115498 May 13 11:04 gateway.log<br>lrwxrwxrwx 1 root root       7 May 16 00:36 web -&gt; web.log # 软连接的前缀为l<br>-rw-r–r– 1 root root 8048944 May 16 00:36 web.log<br>1<br>2<br>3<br>4<br>5<br>6<br>直接进入软连接对应的地址</p><p>cd -P 软连接<br>1<br>删除软连接: rm -rf 软连接名，而不是rm -rf 软连接名&#x2F;</p><p>!!! 如果使用rm -rf 软连接&#x2F; 删除，会把软连接对应的真实目录下内容删掉</p><p>硬连接 （相当于）</p><p>ln 文件名 链接名<br>1<br>8.2.18 history 查看已经执行过历史命令</p><h1 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h1><p>history</p><p>情况历史命令</p><p>history -c<br>1<br>2<br>3<br>4<br>8.3 时间日期类<br>基本语法<br>date [option] + [format]</p><p>date -s 日期时间 设置日期时间</p><p>date + “日期时间格式” 指定显示时使用的日期</p><p>8.3.1 date显示当前时间<br>date<br>date + %Y<br>date + %m<br>date + %d<br>date “+%Y-%m-%d %H:%m:%S”<br>date +%Y-%m-%d %H:%m:%S<br>date +%s 查看时间戳<br>date -d “-1 hours ago” 一个小时后的时间<br>设置系统当前时间</p><p>date -s “2022-06-19 20:52:22”<br>1<br>同步时间</p><p>ntpdate -u ntp1.aliyun.com<br>1<br>8.3.4 cal查看日历<br>cal [选项] 不加选项，显示本月日历</p><p>cal -3 查看3个月的时间<br>cal -m 周一放在第一天<br>cal 2022 查看2022年日历<br>cal 查看本年度日历<br>8.4 用户管理命令</p><h1 id="useradd-用户名-添加新用户"><a href="#useradd-用户名-添加新用户" class="headerlink" title="useradd 用户名 添加新用户"></a>useradd 用户名 添加新用户</h1><p>useradd lys</p><h1 id="可以在home目录看到创建的用户文件夹"><a href="#可以在home目录看到创建的用户文件夹" class="headerlink" title="可以在home目录看到创建的用户文件夹"></a>可以在home目录看到创建的用户文件夹</h1><p>cd &#x2F;home</p><h1 id="创建时修改主文件夹名称"><a href="#创建时修改主文件夹名称" class="headerlink" title="创建时修改主文件夹名称"></a>创建时修改主文件夹名称</h1><p>useradd -d &#x2F;home&#x2F;dave david</p><h1 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h1><p>passwd lys</p><h1 id="查看用户信息-可以验证是否存在"><a href="#查看用户信息-可以验证是否存在" class="headerlink" title="查看用户信息,可以验证是否存在"></a>查看用户信息,可以验证是否存在</h1><p>id lys<br>uid&#x3D;1005(lys) gid&#x3D;1005(lys) groups&#x3D;1005(lys)</p><h1 id="查看系统用户"><a href="#查看系统用户" class="headerlink" title="查看系统用户"></a>查看系统用户</h1><p>less &#x2F;etc&#x2F;passwd</p><h1 id="切换用户-su-switch-user"><a href="#切换用户-su-switch-user" class="headerlink" title="切换用户 su: switch user"></a>切换用户 su: switch user</h1><p>su lys</p><h1 id="在lys用户退出可回到root用户"><a href="#在lys用户退出可回到root用户" class="headerlink" title="在lys用户退出可回到root用户"></a>在lys用户退出可回到root用户</h1><p>exit</p><h1 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h1><p>who am i</p><h1 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h1><p>userdel lys</p><h1 id="删除用户以及文件夹"><a href="#删除用户以及文件夹" class="headerlink" title="删除用户以及文件夹"></a>删除用户以及文件夹</h1><p>userdel -r lys</p><h1 id="sudo设置普通用户具有root权限"><a href="#sudo设置普通用户具有root权限" class="headerlink" title="sudo设置普通用户具有root权限"></a>sudo设置普通用户具有root权限</h1><p>vim &#x2F;etc&#x2F;sudoers</p><h1 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h1><p>lys     ALL&#x3D;(ALL)       ALL</p><h1 id="使用超级管理员权限"><a href="#使用超级管理员权限" class="headerlink" title="使用超级管理员权限"></a>使用超级管理员权限</h1><p>sudo lys</p><h1 id="将用户添加入某个组"><a href="#将用户添加入某个组" class="headerlink" title="将用户添加入某个组"></a>将用户添加入某个组</h1><p>usermod -g 组名 用户名</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>8.5 用户组管理命令<br> 每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux系统对用户组的规则有所不同，</p><p> 如Linux下的用户属于与它同名的用户组，这个用户在和创建用户时同时创建。</p><p> 用户组的管理设计用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新</p><h1 id="新增组"><a href="#新增组" class="headerlink" title="新增组"></a>新增组</h1><p>groupadd 组名</p><h1 id="修改组名"><a href="#修改组名" class="headerlink" title="修改组名"></a>修改组名</h1><p>groupmod -n 新组名 旧组名</p><h1 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h1><p>groupdel 组名<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>8.6 文件权限类<br>7.6.1 文件属性<br> Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。在Linux中我们可以使用ll 或者ls -l来显示一个文件的属性以及文件所属的用户和组</p><p>从左到有的10个字符标识</p><p>如果没有权限，就会出现减号[-]而已，从左至右用0-9这些数字赖标师</p><p>(1)0首位表示类型</p><p> 在Linux中第一个字符代表这个文件是目录、文件或链接文件</p><ul><li><ul><li>代表文件</li></ul></li><li>d 代表目录</li><li>l  链接文档 （link file）<br> 1<br> 2<br> 3<br> (2) 第1-3位确定属主（该文件的所有者）拥有该文件的权限。User</li></ul><p>(3)第4-6位确定属组（所有者的同组用户）拥有该文件的权限。Group</p><p>(4) 第7-9位确定其他用户拥有该文件的权限 Other</p><p>rwx作用文件和目录的不同解释</p><p>作用到文件：</p><p>【r】: 代表可读（read) 可以读取，查看</p><p>【w】：代表可写（write) 可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</p><p>【x】：代表可执行(execute) 可以被系统执行</p><p>作用到目录:</p><p>【r】: 代表可读（read) 可以读取，ls查看目录内容</p><p>【w】：代表可写（write) 可以修改，目录内创建+删除+重命名目录</p><p>【x】：代表可执行(execute) 可以进入该目录</p><p>文件基本属性介绍</p><p>（1）如果查看到是文件：链接数指的是硬链接个数。</p><p>（2）如果查看的是文件夹：链接数指的是子文件夹个数。</p><p>8.6.2 chmod 改变权限</p><p>示例</p><h1 id="增加执行权限"><a href="#增加执行权限" class="headerlink" title="增加执行权限"></a>增加执行权限</h1><p>chmod +x nginx.conf</p><h1 id="chmod-u-g-o-a-x3D-rwx-文件或目录"><a href="#chmod-u-g-o-a-x3D-rwx-文件或目录" class="headerlink" title="chmod [u|g|o|a] +-&#x3D; {rwx} 文件或目录"></a>chmod [u|g|o|a] +-&#x3D; {rwx} 文件或目录</h1><p>chmod u+x nginx.conf<br>chmod u-x nginx.conf<br>chmod u&#x3D;x nginx.conf<br>chmod a+x nginx.conf<br>chmod a&#x3D;rwx nginx.conf</p><h1 id="r-x3D-4-w-x3D-2-x-x3D-1"><a href="#r-x3D-4-w-x3D-2-x-x3D-1" class="headerlink" title="r&#x3D;4 w&#x3D;2 x&#x3D;1"></a>r&#x3D;4 w&#x3D;2 x&#x3D;1</h1><h1 id="直接用数字修改权限"><a href="#直接用数字修改权限" class="headerlink" title="直接用数字修改权限"></a>直接用数字修改权限</h1><p>chmod 777 nginx.conf</p><h1 id="修改整个文件夹的所有这，所属组，其他用户都具有可读可写可执行权限"><a href="#修改整个文件夹的所有这，所属组，其他用户都具有可读可写可执行权限" class="headerlink" title="修改整个文件夹的所有这，所属组，其他用户都具有可读可写可执行权限"></a>修改整个文件夹的所有这，所属组，其他用户都具有可读可写可执行权限</h1><p>chmod -R 777 nginx.conf</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>8.6.3 chown 改变所有者<br>chown 改变所有者</p><p>chown [选项] [最终用户] [文件或目录]</p><p>chown lys a.txt</p><h1 id="获取递归改变文件所有者和所有组"><a href="#获取递归改变文件所有者和所有组" class="headerlink" title="获取递归改变文件所有者和所有组"></a>获取递归改变文件所有者和所有组</h1><p>chown -R lys dir<br>1<br>2<br>3<br>8.6.4 charp 改变所有组<br>chgrp [最终用户组] [文件或目录]</p><p>chgrp root a.txt</p><p>8.7 搜索查找类<br>8.7.1 find 查找文件或目录<br> find 指令将从指定目录向下递归地遍历其各个子目录</p><p>find [搜索范围] [选项]</p><p>选项功能<br>-name 查询方式按照指定文件名查找模式查找文件<br>-user 用户名查找属于指定用户名所有文件<br>-size 文件大小按照指定文件大小查找文件，单位为 b-块 （512字节） c- 字节 w-字 2字节 k - 千字节 M -兆字节 G-吉字节</p><h1 id="按名称查找"><a href="#按名称查找" class="headerlink" title="按名称查找"></a>按名称查找</h1><p>find -name nginx.conf</p><h1 id="按路径加名称查找"><a href="#按路径加名称查找" class="headerlink" title="按路径加名称查找"></a>按路径加名称查找</h1><p>find &#x2F;root -name nginx.conf</p><h1 id="按照后缀查找"><a href="#按照后缀查找" class="headerlink" title="按照后缀查找"></a>按照后缀查找</h1><h1 id="“-”匹配多个字段-”-”匹配单个字符"><a href="#“-”匹配多个字段-”-”匹配单个字符" class="headerlink" title="“*”匹配多个字段,”?”匹配单个字符"></a>“*”匹配多个字段,”?”匹配单个字符</h1><p>find -name “*.txt”</p><h1 id="按用户查找"><a href="#按用户查找" class="headerlink" title="按用户查找"></a>按用户查找</h1><p>find -user lys</p><h1 id="按大小查找-大于-小于"><a href="#按大小查找-大于-小于" class="headerlink" title="按大小查找 +大于 -小于"></a>按大小查找 +大于 -小于</h1><p>find -size +1M<br>find -size +1M</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>8.7.2 locate 快速定位文件路径<br> local指令利用事先简历的系统中所有文件名称及路径的locate数据库事先快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时时刻。</p><p> locate 搜索文件</p><p> 由于locate指令基于数据库进行查询，所以第一此运行前，必须使用updatedb指令创建locate数据库</p><p>updatedb<br>locate nginx.conf</p><h1 id="查看指令所在位置"><a href="#查看指令所在位置" class="headerlink" title="查看指令所在位置"></a>查看指令所在位置</h1><p>which ls<br>whereis locate<br>1<br>2<br>3<br>4<br>5<br>8.7.3 grep过滤查找及”|”管道符<br> 管道符，|，表示将前一个命令的处理结果输出传递给后面的命令处理</p><p>grep 选项 查找内容 源文件</p><p>-n 显示匹配行及行号</p><h1 id="显示location在nginx-conf的哪几行"><a href="#显示location在nginx-conf的哪几行" class="headerlink" title="显示location在nginx.conf的哪几行"></a>显示location在nginx.conf的哪几行</h1><p>grep -n location nginx.conf </p><h1 id="查找某文件在该目录的第一个"><a href="#查找某文件在该目录的第一个" class="headerlink" title="查找某文件在该目录的第一个"></a>查找某文件在该目录的第一个</h1><p>ls | grep -n test<br>1<br>2<br>3<br>4<br>wc 查看单词数量</p><p>wc nginx.conf<br>136  302 3022 nginx.conf<br>行数  单词数量 字节数<br>1<br>2<br>3<br>8.8 压缩和压缩类<br>8.8.1 gzip&#x2F;gunip 压缩<br>gzip 文件</p><p>gunzip 文件.gz (解压缩文件命令)</p><p>只能压缩文件不能压缩目录<br>不保留原来的文件<br>同时多个文件会产生多个压缩包<br>示例</p><p>gzip nginx.conf<br>gunzip nginx.conf<br>gzip nginx.conf nginx.conf2<br>1<br>2<br>3<br>8.8.2 zip&#x2F;unzip压缩<br> zip压缩命令在window&#x2F;linux都通用，可以压缩目录且保留源文件</p><p>zip [选项] XXX.zip 压缩文件和目录命令</p><p>unzip [选项] XXX.zip 解压缩文件</p><p>zip -r 压缩目录<br>unzip -d 指定解压后文件的存放目录</p><h1 id="将logs压缩成logs-zip"><a href="#将logs压缩成logs-zip" class="headerlink" title="将logs压缩成logs.zip"></a>将logs压缩成logs.zip</h1><p>zip -r logs.zip logs&#x2F;</p><h1 id="解压logs-zip"><a href="#解压logs-zip" class="headerlink" title="解压logs.zip"></a>解压logs.zip</h1><p>unzip -d .&#x2F;tmp logs.zip<br>1<br>2<br>3<br>4<br>5<br>8.8.3 tar打包<br>tar [选项] XXX.tar.gz 打包目录，压缩后的文件格式 .tar.gz</p><p>选项功能<br>-c产生.tar打包文件<br>-v显示详细信息<br>-f执行压缩后的文件名<br>-z打包同时压缩<br>-x解压.tar文件<br>-C解压到指定目录</p><h1 id="压缩单个文件"><a href="#压缩单个文件" class="headerlink" title="压缩单个文件"></a>压缩单个文件</h1><p>tar -zcvf nginx.tar.gz nginx.conf</p><h1 id="压缩多个文件"><a href="#压缩多个文件" class="headerlink" title="压缩多个文件"></a>压缩多个文件</h1><p>tar -zcvf nginx.tar.gz nginx.conf nginx.conf2</p><h1 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h1><p>mkdir tmp<br>tar -zxvf nginx.tar.gz -C tmp&#x2F;<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8.9 磁盘查看和分区类<br>8.9.1 du 查看文件和目录占用的磁盘空间<br> du: disk usage 磁盘占用情况</p><p>du 目录&#x2F;文件 显示目录下每个子目录的磁盘使用情况</p><p>选项功能<br>-h以人们较易预读的G,M、k等格式自行显示<br>-a不进查看子目录大小，还要包括文件<br>-c显示所有的文件和子目录大小后，显示总和<br>-s只显示总和<br>-max-depth&#x3D;n指定统计子目录的深度为第nc层<br>tree 工具</p><p>示例</p><p>查看当前用户主目录占用的磁盘空间大小</p><p>du -sh # 查看当前路径文件大小</p><h1 id="子查看一级子目录"><a href="#子查看一级子目录" class="headerlink" title="子查看一级子目录"></a>子查看一级子目录</h1><p>du –max-depth&#x3D;1 -ah</p><p>1<br>2<br>3<br>4<br>8.9.2 df查看磁盘空间使用情况<br>df: disk free 空余磁盘</p><p>df 选项 列出文件系统的整体磁盘使用量，检查文件系统的磁盘空间占用情况</p><p>df -h 以人们较阅读的格式自行显示</p><p>8.9.3 lsblk 查看设备挂载情况<br>lsblk</p><p>lsblk -f 查看详细的设备故障情况，显示文件系统信息</p><p>8.9.4 mount&#x2F;umount 挂载&#x2F;卸载<br> 对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根目录、一个独立且唯一的文件结构。</p><p> Linux中每个分区都是用来组成整个文件系统的一部门，它在用一种叫挂载的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个文件将它的存储空间在这个目录获得,</p><p>mount [-t vfstype] [-o options] device dir （功能描述：挂载设备）</p><p>umount 设备文件名或挂载点 （功能描述：卸载设备）</p><p>参数功能<br>-t vfstype指定文件系统的类型，通常不必指定。mount会自动选择类型。常用类型有：光盘或光盘镜像 DOS Windows9x fat32文件系统：vfat Windows NT ntfs 文件系统： ntfs Mount Windows 文件网络共享：smbfs UNIX(LINUX)文件共享：nfs<br>-o options主要用来描述设备或档案的挂接方式。常用的参数有: loop 用来把一个文件当成硬盘分区挂接上系统 ro:采用只读方式挂接设备 rw:采用读写方式挂接设备 iocharset: 指定访问系统所用字符集<br>device要挂接的设备<br>dir设备在系统上的挂载点<br>设置开机自启动</p><p>vi &#x2F;etc&#x2F;fstab</p><p>8.9.5 fdisk分区<br>fdisk -l 查看磁盘分区详情</p><p>fdisk 硬盘设备名 （显示所有硬盘的分区列表）</p><p>（1）Linux 分区</p><p>Device：分区序列</p><p>Boot：引导</p><p>Start：从X磁柱开始</p><p>End：到Y磁柱结束</p><p>Blocks：容量</p><p>Id：分区类型ID</p><p>System：分区类型</p><p>（2）分区操作按键说明</p><p>m：显示命令列表</p><p>p：显示当前磁盘分区</p><p>n：新增分区</p><p>w：写入分区信息并退出</p><p>q：不保存分区信息直接退出</p><p>8.10 进程管理类<br> 进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用着一定的系统资源</p><p>8.10.1 ps 查看当前系统进程状态<br> ps: process status 进程状态</p><p>ps aux | grep XXX 查看系统中带XXX的进程<br>ps -ef | grep XXX 可以查看子父今后进程之间的关系<br>选项功能<br>a列出带有终端的所有用户的进程<br>x列出当前用户的所有今后进程，包括没有终端的进程<br>u面向用户友好的显示风格<br>-e列出所有进程<br>-u列出某个用户关联的所有进程<br>-f显示完整格式的进程列表<br>ls &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system</p><h1 id="带d-service的为守护进程"><a href="#带d-service的为守护进程" class="headerlink" title="带d.service的为守护进程"></a>带d.service的为守护进程</h1><p>ls &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system | grep d.service<br>1<br>2<br>3<br>ps aux | less<br>ps -ef | less<br>1<br>2</p><ol><li>ps aux显示信息说明<br> USER：该进程是由哪个用户产生的</li></ol><p>PID: 进程的ID号</p><p>%CPU: 该进程占用CPU资源的百分比，占用越高，进程越耗费资源；</p><p>%MEM: 该进程占用物理内存的百分比，占用越高，进程越耗费资源；</p><p>VSZ: 该进程占用虚拟内存的大小，单位KB;</p><p>RSS: 该进程占用实际物理内存的大小，单位KB;</p><p>TTY: 该进程是哪个终端中运行的。对于CentOS来说，tty1是图形化终端，tty2-tty5是本地的字符界面终端。pts&#x2F;0-255代表虚拟终端。</p><p>STAT: 进程状态。常见的状态有：</p><p> R:运行状态 S:睡眠状态 T: 暂停状态 Z:僵尸状态 s:包含子进程 l: 多线程 +:前台显示 &lt;：高优先级 N:低优先级</p><p>START: 该进程的启动时间</p><p>TIME：该进程占用CPU的运算时间，注意不是系统时间</p><p>COMMAND：产生此进程的命令名</p><ol start="2"><li>ps -ef 显示信息说明<br> UID: 用户ID</li></ol><p>PID: 进程ID</p><p>PPID: 父进程ID</p><p>C: CPU用于计算执行优先级的因子。数字越大，表明进程是CPU密集型运算，执行优先级会降低；数字越小，表明进程是I&#x2F;O密级型运算，执行优先级会提高</p><p>STIME：进程启动的时间</p><p>TIY:完成的终端名称</p><p>TIME: CPU时间</p><p>CMD: 启动进程所用的命令和参数</p><p>如果是想查看进程CPU占用率和内存占用率，可以使用aux</p><p>如果想查看进程的父进程ID可以使用ef;</p><p>8.10.2 kill 终止进程<br>kill [选项] 进程号 通过进程号杀死进程</p><p>killall 进程名称 通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</p><p>选项功能<br>-9表示强迫进程立即停止<br>kill -l 查看各个号码代表的意思</p><p>8.10.3 pstree 查看进程树<br>pstree [选项]</p><p>选项功能<br>-p显示进程PID<br>-u显示进程的所属用户<br>pstree<br>pstree -p<br>pstree -u<br>8.10.4 top实施监控系统进程状态<br>top [选项]</p><p>选项功能<br>-d 秒数指定top命令每隔几秒更新。默认是3秒在top命令的交互模式当中可以执行<br>-i使top不显示任何闲置或者僵死进程。<br>-p通过指定进程ID来仅仅监控某个进程的状态<br>操作功能<br>P以CPU使用率排序，默认就是此项<br>M以内存的使用率排序<br>N以PID排序<br>q退出top<br>u根据指定用户进行过滤<br>k直接杀死<br>top详细内容，参考文章Linux之top命令详解</p><p>8.10.5 netstat 显示网络状态和端口占用信息<br>选项功能<br>-a显示所有正在监听（listen）和未监听的套接字（socket)<br>-n拒绝显示别名，能显示数字的全部转化为数字<br>-l仅列出在监听的服务状态<br>-p表示显示哪个进程在调用<br>netstat -anp | grep 进程号 查看该进程网络信息<br>netstat -nlp | grep 端口号 查看网络端口号占用情况<br>netstat -atnp 查看连接<br>根据端口号查进程ID</p><p>netstat -tlnp | grep &lt;端口号&gt;</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>netstat -tlnp | grep 3658<br>tcp6       0      0 127.0.0.1:3658          :::*                    LISTEN      20753&#x2F;java  </p><h1 id="20753就为进程id"><a href="#20753就为进程id" class="headerlink" title="20753就为进程id"></a>20753就为进程id</h1><p>1<br>2<br>3<br>4<br>5<br>根据进程id查占用端口</p><p>netstat -nlp | grep <pid>  | grep LISTEN</p><h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h1><p>netstat -nlp | grep 12564 | grep LISTEN<br>tcp6       0      0 :::49999                :::*                    LISTEN      12564&#x2F;java<br>unix  2      [ ACC ]     STREAM     LISTENING     572295240 12564&#x2F;java           &#x2F;tmp&#x2F;.java_pid12564.tmp</p><h1 id="说明该进程占用的端口号为49999"><a href="#说明该进程占用的端口号为49999" class="headerlink" title="说明该进程占用的端口号为49999"></a>说明该进程占用的端口号为49999</h1><p>1<br>2<br>3<br>4<br>5<br>6<br>8.11 crontab 系统定时任务<br>8.11.1 crontab服务管理<br>重启cornd服务管理</p><p>systemctl restart crond<br>1<br>选项说明</p><p>选项功能<br>-e编辑crontab定时任务<br>-l查询crontab任务<br>-r删除当前用户所有的crontab任务<br>进入编辑界面</p><p>crontab -e</p><h1 id="小例子-每分钟往hello文件追加一个”hello-world”"><a href="#小例子-每分钟往hello文件追加一个”hello-world”" class="headerlink" title="小例子 每分钟往hello文件追加一个”hello world”"></a>小例子 每分钟往hello文件追加一个”hello world”</h1><p><em>&#x2F;1 * * * * echo “hello world” &gt;&gt; &#x2F;root&#x2F;hello<br>1<br>2<br>3<br>项目含义范围<br>第1个“</em>“一个小时当中的第几分钟0-59<br>第2个“*”一天当中的第几个小时0-23<br>第3个“*”一个月当中的第几天1-31<br>第4个“*”一年当中的第几月1-12<br>第5个“*”一周当中的星期几0-7 （0和7都代表星期日）<br>符号说明</p><p>特殊符号含义</p><ul><li>   代表任何时间，比如第一个“*”就代表一小时中每分钟都执行一次的意思<br>   ，代表不连续的时间。比如“0 8,12,16 * * *” 就代表在每天的8点0分，，12点0分，16点0分都执行一次命令</li></ul><ul><li>   代表连续的时间访问。比如“0 5 * * 1-6” 代表在周一到周六的凌晨5点0分执行命令<br>   <em>&#x2F;n代表每隔多久执行一次，比如”</em>&#x2F;10 * * * *” 命令，代表每隔10分钟就执行一边命令<br>   示例</li></ul><p>45 22 * * *每天22点45分执行命令<br>0 17 * * 1每周1的17点0分执行命令<br>0 5 1,15 * *每月1号 15号的凌晨5点0分执行命令<br>40 4 * * 1-5 命令每周一到周五 4点40分执行命令<br>*&#x2F;10 4 * * *每天的凌晨4点，每隔10分钟执行一次命令<br>0 0 1,15 * 1 命令每月1号和15号，每周1的0点0分都会执行命令。注意：星期几和几号最好不要同事出现，因为他们定义的都是天。非常容易让管理员混乱<br>9 软件包管理<br>9.1 RPM<br>9.1.1 RPM概述<br> RPM(RedHat Package Manager),RedHat软件包管理工具，类似于windows里面的setup.exe，是Linux这系列操作系统的打包安装工具，它虽然是RedHat的标志，但理念是通用的。</p><p> RPM包的名称格式</p><p> Apache-1.3.23-11.i386.rpm</p><p> “apache” 软件名称</p><p> “1.3.23-11”软件的版本号，主版本和此版本</p><p> “i386”是软件所运行的硬件平台，Intel 32位处理器的统称</p><p> “rpm”文件扩展名，代表RPM包</p><p>9.1.2 RPM查询命令 （rpm -qa)<br>rpm -qa 查询所安装的所有rpm软件包</p><p>由于软件包比较多，一般都会才去过滤 rpm -qa | grep 名称</p><p>查询具体信息</p><p>rpm -qi unzip-6.0-24.el7_9.x86_64<br>1<br>9.1.3 RPM 卸载命令 （rpm -e)<br>rpm -e 名称 卸载软件包</p><p>rpm -e –nodeps 名称 卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作</p><p>卸载firefox</p><p>rpm -e firefox<br>1<br>9.1.4 安装命令 (rpm -ivh)<br>rpm -ivh 包全名</p><p>选项功能<br>-iinstall 安装<br>-v–verbose 显示详细信息<br>-h–hase，进度条<br>–nodeps安装前不检查依赖<br>安装firefox</p><p>rpm -ivh firefox-45.0.1-1.el6.centos.x86_64.rpm<br>1<br>9.2 仓库配置<br>9.2.1 YUM概述<br> YUM(全称为 Yellow dog Updater, Modified)是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次 安装所有依赖的软件包，无须繁琐地一次一次下载，安装。</p><p>9.2.2 YUM的常用命令<br>yum [选项] [参数]</p><p>选项功能<br>-y对所有提问都回答“yes”<br>参数功能<br>install安装rpm 软件包<br>update更新rpm软件包<br>check-update检查是否有可用的更新rpm软件包<br>remove删除指定的rpm软件包<br>list显示软件包信息<br>clean清楚yum过期的缓存<br>deplist显示yum软件包的所有依赖关系<br>yum方式安装firefox</p><p>yum list | grep firefox</p><h1 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h1><p>yum remove firefox<br>yum -y install firefox<br>1<br>2<br>3<br>4<br>9.2.3 修改网络YUM源 (默认会自己搜索最近的)<br> 默认的系统 YUM 源，需要连接国外 apache 网站，网速比较慢，可以修改关联的网络 YUM 源为国内镜像的网站，比如网易 163,aliyun 等</p><p>(1)安装 wget, wget 用来从指定的 URL 下载文件</p><p>yum install wget<br>1<br>(2)在&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下，备份默认的 repos 文件</p><p>cd &#x2F;etc&#x2F;yum.repos.d<br>cp CentOS-Base.repo CentOS-Base.repo.backup<br>1<br>2<br>（3）下载网易 163 或者是 aliyun 的 repos 文件,任选其一</p><p>wget <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a> # 阿里云<br>wget <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a> # 网易<br>1<br>2<br>（4）使用下载好的 repos 文件替换默认的 repos 文件 例如:用 CentOS7-Base-163.repo 替换 CentOS-Base.repo</p><p>mv CentOS7-Base-163.repo CentOS-Base.repo<br>1<br>（5）清理旧缓存数据，缓存新数据</p><p>yum clean all<br>yum makecache<br>1<br>2<br>yum makecache 就是把服务器的包信息下载到本地电脑缓存起来</p><p>(6)测试</p><p>yum list | grep firefox<br>yum -y install firefox<br>1<br>2<br>10 克隆虚拟机 （略）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2022/09/19/13/"/>
      <url>/2022/09/19/13/</url>
      
        <content type="html"><![CDATA[<h3 id="一、操作系统概论"><a href="#一、操作系统概论" class="headerlink" title="一、操作系统概论"></a>一、操作系统概论</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li><strong>操作系统</strong> 操作系统是计算机系统中的系统软件，由若干程序模块组成。这些模块能有效地组织和管理计算机系统中的硬件及软件资源，合理组织计算机工作流程，控制程序执行，并向用户提供各种服务功能，使用户能够灵活、方便、有效地使用计算机，并使整个计算机系统高效运行。</li><li><strong>操作系统特征</strong><ol><li><strong>并发性</strong> 并发性是指在计算机系统中同时运行的程序，宏观上这些程序同时向前推进。计算机的并发性体现在：<ul><li>用户程序与用户程序之间的并发执行。</li><li>用户程序与操作系统程序之间的并发执行。</li></ul></li><li><strong>共享性</strong> 共享性是指操作系统程序与多个用户程序共享系统资源。资源共享主要针对以下几项重要资源：中央处理器、内存、外存储器、外部设备。资源共享有两种形式：互斥共享和同时共享。</li><li><strong>虚拟性</strong> 虚拟性是指通过技术手段将一个物理实体转化为若干个逻辑上的对应物。</li><li><strong>异步性</strong> 异步性即不确定性，表现为：<ul><li>同一程序和数据的多次运行可能得到不同结果。</li><li>程序的运行时间、顺序具有不确定性。</li><li>外部输入请求和运行故障发生时间难以预测。</li></ul></li></ol></li><li><strong>研究操作系统的观点</strong><ol><li>软件的观点。</li><li>资源管理的观点。</li><li>进程的观点。</li><li>虚拟机的观点。</li><li>服务提供者的观点。</li></ol></li><li><strong>操作系统的功能</strong><ol><li><strong>进程管理</strong> 包括进程控制、进程同步、进程间通信和调度等内容。</li><li><strong>存储管理</strong> 包括内存分配与回收、存储保护和内存扩充。</li><li><strong>文件管理</strong> 支持文件存储、检索、修改，解决文件共享、保密和保护问题。</li><li><strong>设备管理</strong> 完成用户的I&#x2F;O请求，为用户分配I&#x2F;O设备，具有以下功能：<ul><li>缓冲管理</li><li>设备分配</li><li>设备处理</li><li>设备独立性和虚拟设备</li></ul></li><li><strong>提供用户接口</strong> 具备中断处理、错误处理等功能。操作系统的各功能之间相互依赖。</li></ol></li></ol><h4 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h4><ol><li><strong>体系结构</strong><ol><li><strong>Windows操作系统</strong> Windows体系结构为分层模块系统，主要层次包括硬件抽象层（HAL）、内核、执行体和大量子系统集合。</li><li><strong>UNIX操作系统</strong> 包括硬件、内核、系统调用接口和应用程序。</li><li><strong>Linux操作系统</strong> 包括内核、Shell、文件系统和用户应用程序。内核、Shell和文件系统形成基本操作系统结构。</li><li><strong>Android操作系统</strong> 分为四层，从高层到低层分别是应用程序层、应用框架层、系统运行库层和Linux内核层。</li></ol></li><li><strong>操作系统的发展</strong> 包括手工操作、监控程序（早期批处理）、多道批处理、分时与实时系统、UNIX通用操作系统、个人计算机操作系统和Android操作系统。</li><li><strong>操作系统分类</strong> 根据用户界面和功能特征分为批处理系统、分时系统和实时系统。此外，还有个人操作系统、网络操作系统、分布式操作系统和嵌入式操作系统。</li><li><strong>操作系统设计</strong><ol><li><strong>主要困难</strong> 设计复杂度高、正确性难以保证、研制周期长等问题。</li><li><strong>设计过程</strong><ul><li>功能设计：确定操作系统应具备的功能及类型。</li><li>算法设计：选择和设计满足功能的算法和策略。</li><li>结构设计：选择合适的结构，确保系统结构清晰、易用、适应性强。</li></ul></li><li><strong>设计目标</strong> 可靠性（正确性和健壮性）、高效性、易维护性（易读性、易扩充性、易修改性）、可移植性、安全性、简明性。</li><li><strong>结构研究目标</strong><ul><li>系统模块化</li><li>模块标准化</li><li>通信规范化</li></ul></li><li><strong>操作系统的结构</strong><ol><li><strong>整体式结构</strong> 模块组合结构，优点是结构紧密、接口简单直接，效率较高。缺点包括模块间关联强、数据处理方式全局性、并发性差。</li><li><strong>层次式结构</strong> 将功能模块按功能流图排列成若干层，层间模块单向依赖或调用。</li><li><strong>微内核（客户&#x2F;服务器）结构</strong> 将系统分为若干小的服务进程，优点是模块化强，缺点是效率问题。</li></ol></li></ol></li></ol><h4 id="二、操作系统运行环境"><a href="#二、操作系统运行环境" class="headerlink" title="二、操作系统运行环境"></a>二、操作系统运行环境</h4><ol><li><strong>处理器</strong> 由运算器、控制器、一系列寄存器及高速缓存组成。运算器实现算术和逻辑运算，是计算机计算核心。</li><li><strong>处理器内寄存器</strong><ol><li><strong>用户可见寄存器</strong> 包括数据寄存器（Data Register）、地址寄存器（Address Register）和条件码寄存器。</li><li><strong>控制和状态寄存器</strong></li></ol></li><li><strong>指令</strong><ol><li><strong>指令执行的基本过程</strong> 处理器从存储器中读取指令，更新程序计数器，解释并执行指令。</li><li><strong>指令的五类</strong><ul><li>访问存储器指令</li><li>I&#x2F;O指令</li><li>算术逻辑指令</li><li>控制转移指令</li><li>处理器控制指令</li></ul></li><li><strong>特权指令和非特权指令</strong><ul><li>特权指令：操作系统使用，具有特殊权限。</li><li>非特权指令：用户态下使用，不能使用特权指令。</li></ul></li></ol></li><li><strong>管态和目态</strong><ol><li><strong>管态</strong> 操作系统管理状态，具有较高特权级别，又称内核态、特权态。</li><li><strong>目态</strong> 用户程序运行状态，具有较低特权级别，又称用户态、普通态。</li></ol></li><li><strong>处理器工作状态的转换</strong><ol><li><strong>目态到管态的转换</strong> 通过中断响应实现。</li><li><strong>管态到目态的转换</strong> 通过设置PSW指令实现。</li></ol></li><li><strong>计算机系统硬件部件</strong><ol><li><strong>存储器的类型</strong><ul><li>读写型存储器</li><li>只读型存储器</li></ul></li><li><strong>存储器的层次结构</strong> 由寄存器、高速缓存、内存、硬盘、磁带和光盘存储器等装置构成。</li><li><strong>I&#x2F;O结构</strong> 每台外部设备配有I&#x2F;O设备控制器，通道专门负责数据传输工作。</li><li><strong>DMA技术</strong> 通过DMA控制器自动控制内存与I&#x2F;O单元之间的数据传送。</li><li><strong>缓冲技术</strong> 在外部设备与其他硬件部件之间设置数据存储区域，称为缓冲区。</li><li><strong>时钟部件的原理</strong> 使用晶体振荡器产生固定脉冲频率，时钟电路对时钟寄存器进行加1操作。分为绝对时钟和相对时钟。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待更进</title>
      <link href="/2022/08/19/12/"/>
      <url>/2022/08/19/12/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的CSS样式</title>
      <link href="/2022/08/19/11/"/>
      <url>/2022/08/19/11/</url>
      
        <content type="html"><![CDATA[<h1 id="自取我的样式"><a href="#自取我的样式" class="headerlink" title="自取我的样式"></a>自取我的样式</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 白天模式遮罩透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 夜间模式遮罩透明 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 一图流*/</span></span><br><span class="line"><span class="selector-id">#web_container</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#web_bg &#123;</span></span><br><span class="line"><span class="comment">    background: url(https://pic.imgdb.cn/item/66dd05dad9c307b7e94309e1.jpg)</span></span><br><span class="line"><span class="comment">&#125;    */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,<span class="built_in">rgba</span>(<span class="number">247</span>,<span class="number">149</span>,<span class="number">51</span>,.<span class="number">1</span>),<span class="built_in">rgba</span>(<span class="number">243</span>,<span class="number">112</span>,<span class="number">85</span>,.<span class="number">1</span>) <span class="number">15%</span>,<span class="built_in">rgba</span>(<span class="number">239</span>,<span class="number">78</span>,<span class="number">123</span>,.<span class="number">1</span>) <span class="number">30%</span>,<span class="built_in">rgba</span>(<span class="number">161</span>,<span class="number">102</span>,<span class="number">171</span>,.<span class="number">1</span>) <span class="number">44%</span>,<span class="built_in">rgba</span>(<span class="number">80</span>,<span class="number">115</span>,<span class="number">184</span>,.<span class="number">1</span>) <span class="number">58%</span>,<span class="built_in">rgba</span>(<span class="number">16</span>,<span class="number">152</span>,<span class="number">173</span>,.<span class="number">1</span>) <span class="number">72%</span>,<span class="built_in">rgba</span>(<span class="number">7</span>,<span class="number">179</span>,<span class="number">155</span>,.<span class="number">1</span>) <span class="number">86%</span>,<span class="built_in">rgba</span>(<span class="number">109</span>,<span class="number">186</span>,<span class="number">130</span>,.<span class="number">1</span>));</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: center; </span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[data-type=<span class="string">&quot;essay&quot;</span>]</span> <span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>),</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>));</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: center; </span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-attr">[data-type=<span class="string">&quot;about&quot;</span>]</span> <span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>),</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>));</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-position</span>: center; </span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#web_bg &#123;</span></span><br><span class="line"><span class="comment">    background: linear-gradient(90deg, rgba(247,149,51,.1), rgba(243,112,85,.1) 15%, rgba(239,78,123,.1) 30%, rgba(161,102,171,.1) 44%, rgba(80,115,184,.1) 58%, rgba(16,152,173,.1) 72%, rgba(7,179,155,.1) 86%, rgba(109,186,130,.1)),</span></span><br><span class="line"><span class="comment">                url(&#x27;your-image-url.jpg&#x27;);</span></span><br><span class="line"><span class="comment">    background-size: cover; /* 背景图片适应 */</span></span><br><span class="line">    <span class="comment">/*background-repeat: no-repeat;  /*禁止图片重复 </span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 头图透明 </span></span><br><span class="line"><span class="comment">#page-header &#123;</span></span><br><span class="line"><span class="comment">  background: transparent !important;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导航栏 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.75</span>);</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">var</span>(--backdrop-filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 由于全屏会出bug，所以直接给他隐藏 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.winbox</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wb-full</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wb-min</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.wb-body</span>,</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-id">#changeBgBox</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bgbox</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pimgbox</span>,</span><br><span class="line"><span class="selector-class">.imgbox</span>,</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">166px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 强制禁止 .imgbox 和 .pimgbox 悬停放大效果 */</span></span><br><span class="line"><span class="selector-class">.pimgbox</span>,</span><br><span class="line"><span class="selector-class">.imgbox</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">transform</span>: none <span class="meta">!important</span>; <span class="comment">/* 强制禁止任何变换 */</span></span><br><span class="line">    <span class="attribute">transition</span>: none <span class="meta">!important</span>; <span class="comment">/* 强制禁止动画效果 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pimgbox</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">240px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.imgbox</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">95px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="comment">/* 背景 */</span></span><br><span class="line">    <span class="selector-class">.pimgbox</span>,</span><br><span class="line">    <span class="selector-class">.imgbox</span>,</span><br><span class="line">    <span class="selector-class">.box</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">73px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">135px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.pimgbox</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">205px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 2.0新增内容 */</span>    </span><br><span class="line">    <span class="selector-class">.wb-min</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#changeBgBox</span> <span class="selector-class">.wb-body</span>::-webkit-scrollbar &#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* @font-face &#123;</span></span><br><span class="line"><span class="comment">  font-family: Candyhome;</span></span><br><span class="line"><span class="comment">  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);</span></span><br><span class="line"><span class="comment">  font-display: swap;</span></span><br><span class="line"><span class="comment">  font-weight: lighter;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">font-weight</span>: lighter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#menus</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;ZhuZiAYuanJWD&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.article-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.blog-slider__title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryBar-list-link</span>,</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.post-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="comment">/* 可以定义图标大小 */</span></span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解决artitalk的图标问题 */</span></span><br><span class="line"><span class="selector-id">#uploadSource</span> &gt; svg &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.19em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*夜间模式伪类遮罩层透明*/</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#archive</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#rightside</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9796f0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9796f0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 音乐播放器 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* .aplayer .aplayer-lrc &#123;</span></span><br><span class="line"><span class="comment">  display: none !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="comment">/* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999999</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* md网站下划线 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-id">#hpp_talk</span> <span class="selector-tag">p</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 代码框主题 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">figure</span><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:not</span>(<span class="selector-tag">a</span>)<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, transparent, white, transparent);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">200%</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.5s</span> linear;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:not</span>(<span class="selector-tag">a</span>)<span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>) <span class="built_in">skewX</span>(-<span class="number">60deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> floating &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">4px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, <span class="number">4px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">4px</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-box</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line"><span class="attribute">align-items</span>: center;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">185px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag-left</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line"><span class="attribute">align-items</span>: flex-end;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">355px</span>; <span class="comment">/* 设置标签与头像之间的水平间距 */</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag-right</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line"><span class="attribute">align-items</span>: flex-start;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">355px</span>; <span class="comment">/* 设置标签与头像之间的水平间距 */</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 移动端隐藏 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag-left</span>, <span class="selector-id">#about-page</span> <span class="selector-class">.author-tag-right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag-left</span> <span class="selector-class">.author-tag</span><span class="selector-pseudo">:first</span>-child, <span class="selector-id">#about-page</span> <span class="selector-class">.author-tag-left</span> <span class="selector-class">.author-tag</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line"><span class="attribute">margin-right</span>: -<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag-right</span> <span class="selector-class">.author-tag</span><span class="selector-pseudo">:first</span>-child, <span class="selector-id">#about-page</span> <span class="selector-class">.author-tag-right</span> <span class="selector-class">.author-tag</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">4px</span>);</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">8px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e3e8f7</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line"><span class="attribute">animation</span>: <span class="number">4s</span> ease-in-out <span class="number">0s</span> infinite normal none running floating;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 适配深色模式 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#about-page</span> <span class="selector-class">.author-tag</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#1e1e1e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="attribute">animation-delay</span>: <span class="number">0s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line"><span class="attribute">animation-delay</span>: <span class="number">0.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line"><span class="attribute">animation-delay</span>: <span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#about-page</span> <span class="selector-class">.author-tag</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span><br><span class="line"><span class="attribute">animation-delay</span>: <span class="number">1.8s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#welcome-info</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attr">--kouseki-welcome-color</span>: <span class="number">#49B1F5</span>;</span><br><span class="line">    <span class="attr">--kouseki-ip-color</span>: <span class="number">#49B1F5</span>;</span><br><span class="line">    <span class="attr">--kouseki-gl-size</span>: <span class="number">16px</span><span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 帧率检测 */</span></span><br><span class="line"><span class="selector-id">#fps</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="comment">/* 指定位置 */</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1919810</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-id">#fps</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>);</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">var</span>(--backdrop-filter);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#fps</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.72</span>);</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">var</span>(--backdrop-filter);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#aside-content &gt; .card-widget.card-info &#123;</span></span><br><span class="line"><span class="comment">  background: linear-gradient(-45deg, var(--anzhiyu-main), #FFAFBD, #C9FFBF);</span></span><br><span class="line"><span class="comment">  background-size: 400%;</span></span><br><span class="line"><span class="comment">  box-shadow: var(--anzhiyu-shadow-black);</span></span><br><span class="line"><span class="comment">  animation: gradient 15s ease infinite;</span></span><br><span class="line"><span class="comment">  position: relative;</span></span><br><span class="line"><span class="comment">  color: var(--anzhiyu-white);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">.site-data &gt; a .headline,</span></span><br><span class="line"><span class="comment">.site-data &gt; a .length-num &#123;</span></span><br><span class="line"><span class="comment">  color: var(--anzhiyu-white);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#welcome-info &#123;</span></span><br><span class="line"><span class="comment">    overflow: hidden;</span></span><br><span class="line"><span class="comment">    border-radius: 14px;</span></span><br><span class="line"><span class="comment">    --kouseki-welcome-color: #2a37e8;</span></span><br><span class="line"><span class="comment">    --kouseki-ip-color: #0e12ebb9;</span></span><br><span class="line"><span class="comment">    --kouseki-gl-size: 16px!important;</span></span><br><span class="line"><span class="comment">    background: #FFAFBD;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个人信息卡片背景图 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> <span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://pic.imgdb.cn/item/66dc4745d9c307b7e925afbf.jpg</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: inherit;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#aside-content</span> &gt; <span class="selector-class">.card-widget</span><span class="selector-class">.card-info</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://pic.imgdb.cn/item/66dc4745d9c307b7e925afbf.jpg</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: inherit;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.imgbox</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">95px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">166px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transform</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.imgbox</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 作品案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
